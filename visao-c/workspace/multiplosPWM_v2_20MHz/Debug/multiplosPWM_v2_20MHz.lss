
multiplosPWM_v2_20MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00004d88  00004e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800140  00800140  00004e5c  2**0
                  ALLOC
  3 .stab         00005d9c  00000000  00000000  00004e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000422a  00000000  00000000  0000abf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  0000ee22  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000ee44  2**2
                  CONTENTS, READONLY
  7 .avr.prop     00000028  00000000  00000000  0000ee84  2**0
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  0000eeac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  0000f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001d  00000000  00000000  0000fa42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  0000fa5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e8       	ldi	r30, 0x88	; 136
      7c:	fd e4       	ldi	r31, 0x4D	; 77
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 34       	cpi	r26, 0x40	; 64
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e4       	ldi	r26, 0x40	; 64
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 38       	cpi	r26, 0x88	; 136
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <main>
      9e:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    cli();
      ae:	f8 94       	cli
    return 1;
      b0:	81 e0       	ldi	r24, 0x01	; 1
}
      b2:	df 91       	pop	r29
      b4:	cf 91       	pop	r28
      b6:	08 95       	ret

000000b8 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
      b8:	cf 93       	push	r28
      ba:	df 93       	push	r29
      bc:	00 d0       	rcall	.+0      	; 0xbe <__iRestore+0x6>
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	9a 83       	std	Y+2, r25	; 0x02
      c4:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
      c6:	8f e5       	ldi	r24, 0x5F	; 95
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	29 81       	ldd	r18, Y+1	; 0x01
      cc:	3a 81       	ldd	r19, Y+2	; 0x02
      ce:	f9 01       	movw	r30, r18
      d0:	20 81       	ld	r18, Z
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
      d6:	00 00       	nop
      d8:	0f 90       	pop	r0
      da:	0f 90       	pop	r0
      dc:	df 91       	pop	r29
      de:	cf 91       	pop	r28
      e0:	08 95       	ret

000000e2 <globalInterruptEnable>:
/* -----------------------------------------------------------------------------
 * Enable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptEnable(void)
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
	sei();
      ea:	78 94       	sei
	return;
      ec:	00 00       	nop
}
      ee:	df 91       	pop	r29
      f0:	cf 91       	pop	r28
      f2:	08 95       	ret

000000f4 <globalInterruptDisable>:
/* -----------------------------------------------------------------------------
 * Disable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptDisable(void)
{
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
	cli();
      fc:	f8 94       	cli
	return;
      fe:	00 00       	nop
}
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <systemClockSetPrescaler>:
/* -----------------------------------------------------------------------------
 * Configures the system clock prescaler
 * -------------------------------------------------------------------------- */

resultValue_t systemClockSetPrescaler(systemPrescalerValue_t prescaler)
{
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	00 d0       	rcall	.+0      	; 0x10c <systemClockSetPrescaler+0x6>
     10c:	00 d0       	rcall	.+0      	; 0x10e <systemClockSetPrescaler+0x8>
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
     112:	8c 83       	std	Y+4, r24	; 0x04
	uint8 aux8 = 0;
     114:	19 82       	std	Y+1, r1	; 0x01

	switch(prescaler){
     116:	8c 81       	ldd	r24, Y+4	; 0x04
     118:	88 2f       	mov	r24, r24
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	09 2e       	mov	r0, r25
     11e:	00 0c       	add	r0, r0
     120:	aa 0b       	sbc	r26, r26
     122:	bb 0b       	sbc	r27, r27
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	28 e0       	ldi	r18, 0x08	; 8
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	84 1b       	sub	r24, r20
     12e:	95 0b       	sbc	r25, r21
     130:	28 17       	cp	r18, r24
     132:	39 07       	cpc	r19, r25
     134:	40 f1       	brcs	.+80     	; 0x186 <systemClockSetPrescaler+0x80>
     136:	80 56       	subi	r24, 0x60	; 96
     138:	9f 4f       	sbci	r25, 0xFF	; 255
     13a:	fc 01       	movw	r30, r24
     13c:	0c 94 94 23 	jmp	0x4728	; 0x4728 <__tablejump2__>
     140:	a9 00       	.word	0x00a9	; ????
     142:	ab 00       	.word	0x00ab	; ????
     144:	ae 00       	.word	0x00ae	; ????
     146:	b1 00       	.word	0x00b1	; ????
     148:	b4 00       	.word	0x00b4	; ????
     14a:	b7 00       	.word	0x00b7	; ????
     14c:	ba 00       	.word	0x00ba	; ????
     14e:	bd 00       	.word	0x00bd	; ????
     150:	c0 00       	.word	0x00c0	; ????
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
     152:	19 82       	std	Y+1, r1	; 0x01
     154:	1a c0       	rjmp	.+52     	; 0x18a <systemClockSetPrescaler+0x84>
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	17 c0       	rjmp	.+46     	; 0x18a <systemClockSetPrescaler+0x84>
		case SYSTEM_PRESCALER_4:		aux8 = 2;	break;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	89 83       	std	Y+1, r24	; 0x01
     160:	14 c0       	rjmp	.+40     	; 0x18a <systemClockSetPrescaler+0x84>
		case SYSTEM_PRESCALER_8:		aux8 = 3;	break;
     162:	83 e0       	ldi	r24, 0x03	; 3
     164:	89 83       	std	Y+1, r24	; 0x01
     166:	11 c0       	rjmp	.+34     	; 0x18a <systemClockSetPrescaler+0x84>
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
     168:	84 e0       	ldi	r24, 0x04	; 4
     16a:	89 83       	std	Y+1, r24	; 0x01
     16c:	0e c0       	rjmp	.+28     	; 0x18a <systemClockSetPrescaler+0x84>
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
     16e:	85 e0       	ldi	r24, 0x05	; 5
     170:	89 83       	std	Y+1, r24	; 0x01
     172:	0b c0       	rjmp	.+22     	; 0x18a <systemClockSetPrescaler+0x84>
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
     174:	86 e0       	ldi	r24, 0x06	; 6
     176:	89 83       	std	Y+1, r24	; 0x01
     178:	08 c0       	rjmp	.+16     	; 0x18a <systemClockSetPrescaler+0x84>
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
     17a:	87 e0       	ldi	r24, 0x07	; 7
     17c:	89 83       	std	Y+1, r24	; 0x01
     17e:	05 c0       	rjmp	.+10     	; 0x18a <systemClockSetPrescaler+0x84>
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
     180:	88 e0       	ldi	r24, 0x08	; 8
     182:	89 83       	std	Y+1, r24	; 0x01
     184:	02 c0       	rjmp	.+4      	; 0x18a <systemClockSetPrescaler+0x84>
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
     186:	87 e0       	ldi	r24, 0x07	; 7
     188:	1c c0       	rjmp	.+56     	; 0x1c2 <systemClockSetPrescaler+0xbc>
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     18a:	8f e5       	ldi	r24, 0x5F	; 95
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	fc 01       	movw	r30, r24
     190:	80 81       	ld	r24, Z
     192:	8b 83       	std	Y+3, r24	; 0x03
     194:	0e 94 53 00 	call	0xa6	; 0xa6 <__iCliRetVal>
     198:	8a 83       	std	Y+2, r24	; 0x02
     19a:	0b c0       	rjmp	.+22     	; 0x1b2 <systemClockSetPrescaler+0xac>
		CLKPR = 0b10000000;
     19c:	81 e6       	ldi	r24, 0x61	; 97
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	20 e8       	ldi	r18, 0x80	; 128
     1a2:	fc 01       	movw	r30, r24
     1a4:	20 83       	st	Z, r18
		CLKPR = aux8;
     1a6:	81 e6       	ldi	r24, 0x61	; 97
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	29 81       	ldd	r18, Y+1	; 0x01
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     1b0:	1a 82       	std	Y+2, r1	; 0x02
     1b2:	8a 81       	ldd	r24, Y+2	; 0x02
     1b4:	88 23       	and	r24, r24
     1b6:	91 f7       	brne	.-28     	; 0x19c <systemClockSetPrescaler+0x96>
     1b8:	ce 01       	movw	r24, r28
     1ba:	03 96       	adiw	r24, 0x03	; 3
     1bc:	0e 94 5c 00 	call	0xb8	; 0xb8 <__iRestore>
	}

	return RESULT_OK;
     1c0:	80 e0       	ldi	r24, 0x00	; 0
}
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	0f 90       	pop	r0
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <eepromSetOperationMode>:
/* -----------------------------------------------------------------------------
 * Changes the EEPROM operation mode
 * -------------------------------------------------------------------------- */

void eepromSetOperationMode(eepromMode_t mode)
{
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	00 d0       	rcall	.+0      	; 0x1d6 <eepromSetOperationMode+0x6>
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 aux8 = 0;
     1dc:	19 82       	std	Y+1, r1	; 0x01

	aux8 = EECR & ~(0x03 << EEPM0);
     1de:	8f e3       	ldi	r24, 0x3F	; 63
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	fc 01       	movw	r30, r24
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7c       	andi	r24, 0xCF	; 207
     1e8:	89 83       	std	Y+1, r24	; 0x01
	aux8 |= (mode << EEPM0);
     1ea:	8a 81       	ldd	r24, Y+2	; 0x02
     1ec:	88 2f       	mov	r24, r24
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	82 95       	swap	r24
     1f2:	92 95       	swap	r25
     1f4:	90 7f       	andi	r25, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	80 7f       	andi	r24, 0xF0	; 240
     1fa:	98 27       	eor	r25, r24
     1fc:	98 2f       	mov	r25, r24
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	89 2b       	or	r24, r25
     202:	89 83       	std	Y+1, r24	; 0x01
	EECR = aux8;
     204:	8f e3       	ldi	r24, 0x3F	; 63
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	29 81       	ldd	r18, Y+1	; 0x01
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18

	return;
     20e:	00 00       	nop
}
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <eepromReadyActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyActivateInterrupt(void)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
	setBit(EECR, EERIE);
     222:	8f e3       	ldi	r24, 0x3F	; 63
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	2f e3       	ldi	r18, 0x3F	; 63
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	28 60       	ori	r18, 0x08	; 8
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
	return;
     234:	00 00       	nop
}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <eepromReadyDeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyDeactivateInterrupt(void)
{
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
	clrBit(EECR, EERIE);
     244:	8f e3       	ldi	r24, 0x3F	; 63
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	2f e3       	ldi	r18, 0x3F	; 63
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	27 7f       	andi	r18, 0xF7	; 247
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	return;
     256:	00 00       	nop
}
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <eepromWrite>:
/* -----------------------------------------------------------------------------
 * Writes a byte in the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

void eepromWrite(uint16 address, uint8 data)
{
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	00 d0       	rcall	.+0      	; 0x264 <eepromWrite+0x6>
     264:	00 d0       	rcall	.+0      	; 0x266 <eepromWrite+0x8>
     266:	1f 92       	push	r1
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	9c 83       	std	Y+4, r25	; 0x04
     26e:	8b 83       	std	Y+3, r24	; 0x03
     270:	6d 83       	std	Y+5, r22	; 0x05
	waitUntilBitIsClear(EECR, EEPE);
     272:	8f e3       	ldi	r24, 0x3F	; 63
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	80 81       	ld	r24, Z
     27a:	86 95       	lsr	r24
     27c:	88 2f       	mov	r24, r24
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	81 70       	andi	r24, 0x01	; 1
     282:	99 27       	eor	r25, r25
     284:	89 2b       	or	r24, r25
     286:	a9 f7       	brne	.-22     	; 0x272 <eepromWrite+0x14>
	waitUntilBitIsClear(SPMEN, SPMCSR);
     288:	87 e5       	ldi	r24, 0x57	; 87
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	fc 01       	movw	r30, r24
     28e:	80 81       	ld	r24, Z
	EEAR = (address & EEPROM_ADDRESS_MASK);
     290:	81 e4       	ldi	r24, 0x41	; 65
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	2b 81       	ldd	r18, Y+3	; 0x03
     296:	3c 81       	ldd	r19, Y+4	; 0x04
     298:	33 70       	andi	r19, 0x03	; 3
     29a:	fc 01       	movw	r30, r24
     29c:	31 83       	std	Z+1, r19	; 0x01
     29e:	20 83       	st	Z, r18
	EEDR = data;
     2a0:	80 e4       	ldi	r24, 0x40	; 64
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	2d 81       	ldd	r18, Y+5	; 0x05
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 83       	st	Z, r18
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     2aa:	8f e5       	ldi	r24, 0x5F	; 95
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	fc 01       	movw	r30, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	8a 83       	std	Y+2, r24	; 0x02
     2b4:	0e 94 53 00 	call	0xa6	; 0xa6 <__iCliRetVal>
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <eepromWrite+0x84>
		setBit(EECR, EEMPE);
     2bc:	8f e3       	ldi	r24, 0x3F	; 63
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	2f e3       	ldi	r18, 0x3F	; 63
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	f9 01       	movw	r30, r18
     2c6:	20 81       	ld	r18, Z
     2c8:	24 60       	ori	r18, 0x04	; 4
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 83       	st	Z, r18
		setBit(EECR, EEPE);
     2ce:	8f e3       	ldi	r24, 0x3F	; 63
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	2f e3       	ldi	r18, 0x3F	; 63
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	f9 01       	movw	r30, r18
     2d8:	20 81       	ld	r18, Z
     2da:	22 60       	ori	r18, 0x02	; 2
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     2e0:	19 82       	std	Y+1, r1	; 0x01
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	88 23       	and	r24, r24
     2e6:	51 f7       	brne	.-44     	; 0x2bc <eepromWrite+0x5e>
     2e8:	ce 01       	movw	r24, r28
     2ea:	02 96       	adiw	r24, 0x02	; 2
     2ec:	0e 94 5c 00 	call	0xb8	; 0xb8 <__iRestore>
	}

	return;
     2f0:	00 00       	nop
}
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <eepromRead>:
/* -----------------------------------------------------------------------------
 * Reads a byte from the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

uint8 eepromRead(uint16 address)
{
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	00 d0       	rcall	.+0      	; 0x308 <eepromRead+0x6>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	9a 83       	std	Y+2, r25	; 0x02
     30e:	89 83       	std	Y+1, r24	; 0x01
	waitUntilBitIsClear(EECR, EEPE);
     310:	8f e3       	ldi	r24, 0x3F	; 63
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	fc 01       	movw	r30, r24
     316:	80 81       	ld	r24, Z
     318:	86 95       	lsr	r24
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	81 70       	andi	r24, 0x01	; 1
     320:	99 27       	eor	r25, r25
     322:	89 2b       	or	r24, r25
     324:	a9 f7       	brne	.-22     	; 0x310 <eepromRead+0xe>
	EEAR = (address & EEPROM_ADDRESS_MASK);
     326:	81 e4       	ldi	r24, 0x41	; 65
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	29 81       	ldd	r18, Y+1	; 0x01
     32c:	3a 81       	ldd	r19, Y+2	; 0x02
     32e:	33 70       	andi	r19, 0x03	; 3
     330:	fc 01       	movw	r30, r24
     332:	31 83       	std	Z+1, r19	; 0x01
     334:	20 83       	st	Z, r18
	setBit(EECR, EERE);
     336:	8f e3       	ldi	r24, 0x3F	; 63
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	2f e3       	ldi	r18, 0x3F	; 63
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	21 60       	ori	r18, 0x01	; 1
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
	return EEDR;
     348:	80 e4       	ldi	r24, 0x40	; 64
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	fc 01       	movw	r30, r24
     34e:	80 81       	ld	r24, Z
}
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <globalPullUpEnable>:
/* -----------------------------------------------------------------------------
 * Enables the global pull-up
 * -------------------------------------------------------------------------- */

void globalPullUpEnable(void)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
	clrBit(MCUCR, PUD);
     362:	85 e5       	ldi	r24, 0x55	; 85
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	25 e5       	ldi	r18, 0x55	; 85
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	f9 01       	movw	r30, r18
     36c:	20 81       	ld	r18, Z
     36e:	2f 7e       	andi	r18, 0xEF	; 239
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	return;
     374:	00 00       	nop
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <pullUpDisable>:
/* -----------------------------------------------------------------------------
 * Disables the global pull-up
 * -------------------------------------------------------------------------- */

void pullUpDisable(void)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
	setBit(MCUCR, PUD);
     384:	85 e5       	ldi	r24, 0x55	; 85
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	25 e5       	ldi	r18, 0x55	; 85
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	20 61       	ori	r18, 0x10	; 16
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
	return;
     396:	00 00       	nop
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <int0Config>:
/* -----------------------------------------------------------------------------
 * Configures the external interrupt int0
 * -------------------------------------------------------------------------- */

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <int0Config+0x6>
     3a4:	1f 92       	push	r1
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	8a 83       	std	Y+2, r24	; 0x02
     3ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 aux8 = 0;
     3ae:	19 82       	std	Y+1, r1	; 0x01

	switch(port){
     3b0:	8a 81       	ldd	r24, Y+2	; 0x02
     3b2:	88 2f       	mov	r24, r24
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	82 30       	cpi	r24, 0x02	; 2
     3b8:	91 05       	cpc	r25, r1
     3ba:	b9 f1       	breq	.+110    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     3bc:	83 30       	cpi	r24, 0x03	; 3
     3be:	91 05       	cpc	r25, r1
     3c0:	2c f4       	brge	.+10     	; 0x3cc <int0Config+0x2e>
     3c2:	00 97       	sbiw	r24, 0x00	; 0
     3c4:	61 f0       	breq	.+24     	; 0x3de <int0Config+0x40>
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	e9 f0       	breq	.+58     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     3ca:	55 c0       	rjmp	.+170    	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
     3cc:	83 30       	cpi	r24, 0x03	; 3
     3ce:	91 05       	cpc	r25, r1
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <int0Config+0x36>
     3d2:	3e c0       	rjmp	.+124    	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
     3d4:	8f 3f       	cpi	r24, 0xFF	; 255
     3d6:	91 05       	cpc	r25, r1
     3d8:	09 f4       	brne	.+2      	; 0x3dc <int0Config+0x3e>
     3da:	4f c0       	rjmp	.+158    	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
     3dc:	4c c0       	rjmp	.+152    	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     3de:	8b e2       	ldi	r24, 0x2B	; 43
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	2b e2       	ldi	r18, 0x2B	; 43
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	2b 7f       	andi	r18, 0xFB	; 251
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
     3f0:	8a e2       	ldi	r24, 0x2A	; 42
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	2a e2       	ldi	r18, 0x2A	; 42
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	f9 01       	movw	r30, r18
     3fa:	20 81       	ld	r18, Z
     3fc:	24 60       	ori	r18, 0x04	; 4
     3fe:	fc 01       	movw	r30, r24
     400:	20 83       	st	Z, r18
     402:	3c c0       	rjmp	.+120    	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     404:	8b e2       	ldi	r24, 0x2B	; 43
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	2b e2       	ldi	r18, 0x2B	; 43
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	24 60       	ori	r18, 0x04	; 4
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
     416:	8a e2       	ldi	r24, 0x2A	; 42
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	2a e2       	ldi	r18, 0x2A	; 42
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	f9 01       	movw	r30, r18
     420:	20 81       	ld	r18, Z
     422:	24 60       	ori	r18, 0x04	; 4
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
     428:	29 c0       	rjmp	.+82     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     42a:	8b e2       	ldi	r24, 0x2B	; 43
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	2b e2       	ldi	r18, 0x2B	; 43
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	f9 01       	movw	r30, r18
     434:	20 81       	ld	r18, Z
     436:	2b 7f       	andi	r18, 0xFB	; 251
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
     43c:	8a e2       	ldi	r24, 0x2A	; 42
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	2a e2       	ldi	r18, 0x2A	; 42
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	f9 01       	movw	r30, r18
     446:	20 81       	ld	r18, Z
     448:	2b 7f       	andi	r18, 0xFB	; 251
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
     44e:	16 c0       	rjmp	.+44     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	2b e2       	ldi	r18, 0x2B	; 43
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	24 60       	ori	r18, 0x04	; 4
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
     462:	8a e2       	ldi	r24, 0x2A	; 42
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	2a e2       	ldi	r18, 0x2A	; 42
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	2b 7f       	andi	r18, 0xFB	; 251
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
     474:	03 c0       	rjmp	.+6      	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	36 c0       	rjmp	.+108    	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
		case PORT_NO_CHANGE:		break;
     47a:	00 00       	nop
	}

	if(sense != SENSE_NO_CHANGE){
     47c:	8b 81       	ldd	r24, Y+3	; 0x03
     47e:	8f 3f       	cpi	r24, 0xFF	; 255
     480:	89 f1       	breq	.+98     	; 0x4e4 <__FUSE_REGION_LENGTH__+0xe4>
		aux8 = EICRA & ~(0x03 << ISC00);
     482:	89 e6       	ldi	r24, 0x69	; 105
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	8c 7f       	andi	r24, 0xFC	; 252
     48c:	89 83       	std	Y+1, r24	; 0x01
		switch(sense){
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	88 2f       	mov	r24, r24
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	82 30       	cpi	r24, 0x02	; 2
     496:	91 05       	cpc	r25, r1
     498:	99 f0       	breq	.+38     	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
     49a:	83 30       	cpi	r24, 0x03	; 3
     49c:	91 05       	cpc	r25, r1
     49e:	2c f4       	brge	.+10     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     4a0:	00 97       	sbiw	r24, 0x00	; 0
     4a2:	c1 f0       	breq	.+48     	; 0x4d4 <__FUSE_REGION_LENGTH__+0xd4>
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	41 f0       	breq	.+16     	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     4a8:	13 c0       	rjmp	.+38     	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
     4aa:	83 30       	cpi	r24, 0x03	; 3
     4ac:	91 05       	cpc	r25, r1
     4ae:	61 f0       	breq	.+24     	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
     4b0:	8f 3f       	cpi	r24, 0xFF	; 255
     4b2:	91 05       	cpc	r25, r1
     4b4:	89 f0       	breq	.+34     	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
     4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	0d c0       	rjmp	.+26     	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	82 60       	ori	r24, 0x02	; 2
     4c4:	89 83       	std	Y+1, r24	; 0x01
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	83 60       	ori	r24, 0x03	; 3
     4cc:	89 83       	std	Y+1, r24	; 0x01
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
			case SENSE_LOW_LEVEL:		break;
     4d4:	00 00       	nop
     4d6:	01 c0       	rjmp	.+2      	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
			case SENSE_NO_CHANGE:		break;
     4d8:	00 00       	nop
		}
		EICRA = aux8;
     4da:	89 e6       	ldi	r24, 0x69	; 105
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	29 81       	ldd	r18, Y+1	; 0x01
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
	}

	return RESULT_OK;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
}
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <int0ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0ActivateInterrupt(void)
{
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
	setBit(EIMSK, INT0);
     4fa:	8d e3       	ldi	r24, 0x3D	; 61
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2d e3       	ldi	r18, 0x3D	; 61
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	f9 01       	movw	r30, r18
     504:	20 81       	ld	r18, Z
     506:	21 60       	ori	r18, 0x01	; 1
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
	return;
     50c:	00 00       	nop
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <int0DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0DeactivateInterrupt(void)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	clrBit(EIMSK, INT0);
     51c:	8d e3       	ldi	r24, 0x3D	; 61
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	2d e3       	ldi	r18, 0x3D	; 61
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	f9 01       	movw	r30, r18
     526:	20 81       	ld	r18, Z
     528:	2e 7f       	andi	r18, 0xFE	; 254
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
	return;
     52e:	00 00       	nop
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <int0ClearInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the external interrupt int0 request
 * -------------------------------------------------------------------------- */

void int0ClearInterruptRequest(void)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	setBit(EIFR, INTF0);
     53e:	8c e3       	ldi	r24, 0x3C	; 60
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	2c e3       	ldi	r18, 0x3C	; 60
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	f9 01       	movw	r30, r18
     548:	20 81       	ld	r18, Z
     54a:	21 60       	ori	r18, 0x01	; 1
     54c:	fc 01       	movw	r30, r24
     54e:	20 83       	st	Z, r18
	return;
     550:	00 00       	nop
}
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <int1Config>:
/* -----------------------------------------------------------------------------
 * Configures the external interrupt int1
 * -------------------------------------------------------------------------- */

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	00 d0       	rcall	.+0      	; 0x55e <int1Config+0x6>
     55e:	1f 92       	push	r1
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	8a 83       	std	Y+2, r24	; 0x02
     566:	6b 83       	std	Y+3, r22	; 0x03
	uint8 aux8 = 0;
     568:	19 82       	std	Y+1, r1	; 0x01

	switch(port){
     56a:	8a 81       	ldd	r24, Y+2	; 0x02
     56c:	88 2f       	mov	r24, r24
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	91 05       	cpc	r25, r1
     574:	b9 f1       	breq	.+110    	; 0x5e4 <int1Config+0x8c>
     576:	83 30       	cpi	r24, 0x03	; 3
     578:	91 05       	cpc	r25, r1
     57a:	2c f4       	brge	.+10     	; 0x586 <int1Config+0x2e>
     57c:	00 97       	sbiw	r24, 0x00	; 0
     57e:	61 f0       	breq	.+24     	; 0x598 <int1Config+0x40>
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	e9 f0       	breq	.+58     	; 0x5be <int1Config+0x66>
     584:	55 c0       	rjmp	.+170    	; 0x630 <int1Config+0xd8>
     586:	83 30       	cpi	r24, 0x03	; 3
     588:	91 05       	cpc	r25, r1
     58a:	09 f4       	brne	.+2      	; 0x58e <int1Config+0x36>
     58c:	3e c0       	rjmp	.+124    	; 0x60a <int1Config+0xb2>
     58e:	8f 3f       	cpi	r24, 0xFF	; 255
     590:	91 05       	cpc	r25, r1
     592:	09 f4       	brne	.+2      	; 0x596 <int1Config+0x3e>
     594:	4f c0       	rjmp	.+158    	; 0x634 <int1Config+0xdc>
     596:	4c c0       	rjmp	.+152    	; 0x630 <int1Config+0xd8>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     598:	8b e2       	ldi	r24, 0x2B	; 43
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	2b e2       	ldi	r18, 0x2B	; 43
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	f9 01       	movw	r30, r18
     5a2:	20 81       	ld	r18, Z
     5a4:	27 7f       	andi	r18, 0xF7	; 247
     5a6:	fc 01       	movw	r30, r24
     5a8:	20 83       	st	Z, r18
     5aa:	8a e2       	ldi	r24, 0x2A	; 42
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	2a e2       	ldi	r18, 0x2A	; 42
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	28 60       	ori	r18, 0x08	; 8
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
     5bc:	3c c0       	rjmp	.+120    	; 0x636 <int1Config+0xde>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     5be:	8b e2       	ldi	r24, 0x2B	; 43
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	2b e2       	ldi	r18, 0x2B	; 43
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	f9 01       	movw	r30, r18
     5c8:	20 81       	ld	r18, Z
     5ca:	28 60       	ori	r18, 0x08	; 8
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18
     5d0:	8a e2       	ldi	r24, 0x2A	; 42
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	2a e2       	ldi	r18, 0x2A	; 42
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	f9 01       	movw	r30, r18
     5da:	20 81       	ld	r18, Z
     5dc:	28 60       	ori	r18, 0x08	; 8
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
     5e2:	29 c0       	rjmp	.+82     	; 0x636 <int1Config+0xde>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     5e4:	8b e2       	ldi	r24, 0x2B	; 43
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	2b e2       	ldi	r18, 0x2B	; 43
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	f9 01       	movw	r30, r18
     5ee:	20 81       	ld	r18, Z
     5f0:	27 7f       	andi	r18, 0xF7	; 247
     5f2:	fc 01       	movw	r30, r24
     5f4:	20 83       	st	Z, r18
     5f6:	8a e2       	ldi	r24, 0x2A	; 42
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	2a e2       	ldi	r18, 0x2A	; 42
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	f9 01       	movw	r30, r18
     600:	20 81       	ld	r18, Z
     602:	27 7f       	andi	r18, 0xF7	; 247
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
     608:	16 c0       	rjmp	.+44     	; 0x636 <int1Config+0xde>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     60a:	8b e2       	ldi	r24, 0x2B	; 43
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	2b e2       	ldi	r18, 0x2B	; 43
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	28 60       	ori	r18, 0x08	; 8
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
     61c:	8a e2       	ldi	r24, 0x2A	; 42
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	2a e2       	ldi	r18, 0x2A	; 42
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	f9 01       	movw	r30, r18
     626:	20 81       	ld	r18, Z
     628:	27 7f       	andi	r18, 0xF7	; 247
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
     62e:	03 c0       	rjmp	.+6      	; 0x636 <int1Config+0xde>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	36 c0       	rjmp	.+108    	; 0x6a0 <int1Config+0x148>
		case PORT_NO_CHANGE:		break;
     634:	00 00       	nop
	}

	if(sense != SENSE_NO_CHANGE){
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	8f 3f       	cpi	r24, 0xFF	; 255
     63a:	89 f1       	breq	.+98     	; 0x69e <int1Config+0x146>
		aux8 = EICRA & ~(0x03 << ISC10);
     63c:	89 e6       	ldi	r24, 0x69	; 105
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	fc 01       	movw	r30, r24
     642:	80 81       	ld	r24, Z
     644:	83 7f       	andi	r24, 0xF3	; 243
     646:	89 83       	std	Y+1, r24	; 0x01
		switch(sense){
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	82 30       	cpi	r24, 0x02	; 2
     650:	91 05       	cpc	r25, r1
     652:	99 f0       	breq	.+38     	; 0x67a <int1Config+0x122>
     654:	83 30       	cpi	r24, 0x03	; 3
     656:	91 05       	cpc	r25, r1
     658:	2c f4       	brge	.+10     	; 0x664 <int1Config+0x10c>
     65a:	00 97       	sbiw	r24, 0x00	; 0
     65c:	c1 f0       	breq	.+48     	; 0x68e <int1Config+0x136>
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	41 f0       	breq	.+16     	; 0x672 <int1Config+0x11a>
     662:	13 c0       	rjmp	.+38     	; 0x68a <int1Config+0x132>
     664:	83 30       	cpi	r24, 0x03	; 3
     666:	91 05       	cpc	r25, r1
     668:	61 f0       	breq	.+24     	; 0x682 <int1Config+0x12a>
     66a:	8f 3f       	cpi	r24, 0xFF	; 255
     66c:	91 05       	cpc	r25, r1
     66e:	89 f0       	breq	.+34     	; 0x692 <int1Config+0x13a>
     670:	0c c0       	rjmp	.+24     	; 0x68a <int1Config+0x132>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	84 60       	ori	r24, 0x04	; 4
     676:	89 83       	std	Y+1, r24	; 0x01
     678:	0d c0       	rjmp	.+26     	; 0x694 <int1Config+0x13c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	88 60       	ori	r24, 0x08	; 8
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	09 c0       	rjmp	.+18     	; 0x694 <int1Config+0x13c>
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	8c 60       	ori	r24, 0x0C	; 12
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	05 c0       	rjmp	.+10     	; 0x694 <int1Config+0x13c>
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	09 c0       	rjmp	.+18     	; 0x6a0 <int1Config+0x148>
			case SENSE_LOW_LEVEL:		break;
     68e:	00 00       	nop
     690:	01 c0       	rjmp	.+2      	; 0x694 <int1Config+0x13c>
			case SENSE_NO_CHANGE:		break;
     692:	00 00       	nop
		}
		EICRA = aux8;
     694:	89 e6       	ldi	r24, 0x69	; 105
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	29 81       	ldd	r18, Y+1	; 0x01
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18
	}

	return RESULT_OK;
     69e:	80 e0       	ldi	r24, 0x00	; 0
}
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <int1ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1ActivateInterrupt(void)
{
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
	setBit(EIMSK, INT1);
     6b4:	8d e3       	ldi	r24, 0x3D	; 61
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	2d e3       	ldi	r18, 0x3D	; 61
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	22 60       	ori	r18, 0x02	; 2
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
	return;
     6c6:	00 00       	nop
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <int1DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1DeactivateInterrupt(void)
{
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
	clrBit(EIMSK, INT1);
     6d6:	8d e3       	ldi	r24, 0x3D	; 61
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	2d e3       	ldi	r18, 0x3D	; 61
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	f9 01       	movw	r30, r18
     6e0:	20 81       	ld	r18, Z
     6e2:	2d 7f       	andi	r18, 0xFD	; 253
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 83       	st	Z, r18
	return;
     6e8:	00 00       	nop
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <int1ClearInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the external interrupt int1 request
 * -------------------------------------------------------------------------- */

void int1ClearInterruptRequest(void)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
	setBit(EIFR, INTF1);
     6f8:	8c e3       	ldi	r24, 0x3C	; 60
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	2c e3       	ldi	r18, 0x3C	; 60
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	22 60       	ori	r18, 0x02	; 2
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
	return;
     70a:	00 00       	nop
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <pcint7_0Enable>:
/* -----------------------------------------------------------------------------
 * Enables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Enable(void)
{
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
	setBit(PCICR, PCIE0);
     71a:	88 e6       	ldi	r24, 0x68	; 104
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	28 e6       	ldi	r18, 0x68	; 104
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	21 60       	ori	r18, 0x01	; 1
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
	return;
     72c:	00 00       	nop
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <pcint7_0Disable>:
/* -----------------------------------------------------------------------------
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Disable(void)
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCICR, PCIE0);
     73c:	88 e6       	ldi	r24, 0x68	; 104
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	28 e6       	ldi	r18, 0x68	; 104
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	f9 01       	movw	r30, r18
     746:	20 81       	ld	r18, Z
     748:	2e 7f       	andi	r18, 0xFE	; 254
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
	return;
     74e:	00 00       	nop
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <pcint7_0ClearInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0ClearInterruptRequest(void)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
	setBit(PCIFR, PCIF0);
     75e:	8b e3       	ldi	r24, 0x3B	; 59
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	2b e3       	ldi	r18, 0x3B	; 59
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	f9 01       	movw	r30, r18
     768:	20 81       	ld	r18, Z
     76a:	21 60       	ori	r18, 0x01	; 1
     76c:	fc 01       	movw	r30, r24
     76e:	20 83       	st	Z, r18
	return;
     770:	00 00       	nop
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <pcint0ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	1f 92       	push	r1
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	88 2f       	mov	r24, r24
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	91 05       	cpc	r25, r1
     78e:	b9 f1       	breq	.+110    	; 0x7fe <pcint0ActivateInterrupt+0x86>
     790:	83 30       	cpi	r24, 0x03	; 3
     792:	91 05       	cpc	r25, r1
     794:	2c f4       	brge	.+10     	; 0x7a0 <pcint0ActivateInterrupt+0x28>
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	61 f0       	breq	.+24     	; 0x7b2 <pcint0ActivateInterrupt+0x3a>
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	e9 f0       	breq	.+58     	; 0x7d8 <pcint0ActivateInterrupt+0x60>
     79e:	55 c0       	rjmp	.+170    	; 0x84a <pcint0ActivateInterrupt+0xd2>
     7a0:	83 30       	cpi	r24, 0x03	; 3
     7a2:	91 05       	cpc	r25, r1
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <pcint0ActivateInterrupt+0x30>
     7a6:	3e c0       	rjmp	.+124    	; 0x824 <pcint0ActivateInterrupt+0xac>
     7a8:	8f 3f       	cpi	r24, 0xFF	; 255
     7aa:	91 05       	cpc	r25, r1
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <pcint0ActivateInterrupt+0x38>
     7ae:	4f c0       	rjmp	.+158    	; 0x84e <pcint0ActivateInterrupt+0xd6>
     7b0:	4c c0       	rjmp	.+152    	; 0x84a <pcint0ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     7b2:	85 e2       	ldi	r24, 0x25	; 37
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	25 e2       	ldi	r18, 0x25	; 37
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	f9 01       	movw	r30, r18
     7bc:	20 81       	ld	r18, Z
     7be:	2e 7f       	andi	r18, 0xFE	; 254
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 83       	st	Z, r18
     7c4:	84 e2       	ldi	r24, 0x24	; 36
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	24 e2       	ldi	r18, 0x24	; 36
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	f9 01       	movw	r30, r18
     7ce:	20 81       	ld	r18, Z
     7d0:	21 60       	ori	r18, 0x01	; 1
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
     7d6:	3c c0       	rjmp	.+120    	; 0x850 <pcint0ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     7d8:	85 e2       	ldi	r24, 0x25	; 37
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	25 e2       	ldi	r18, 0x25	; 37
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	20 81       	ld	r18, Z
     7e4:	21 60       	ori	r18, 0x01	; 1
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
     7ea:	84 e2       	ldi	r24, 0x24	; 36
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	24 e2       	ldi	r18, 0x24	; 36
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	21 60       	ori	r18, 0x01	; 1
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
     7fc:	29 c0       	rjmp	.+82     	; 0x850 <pcint0ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     7fe:	85 e2       	ldi	r24, 0x25	; 37
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	25 e2       	ldi	r18, 0x25	; 37
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	20 81       	ld	r18, Z
     80a:	2e 7f       	andi	r18, 0xFE	; 254
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
     810:	84 e2       	ldi	r24, 0x24	; 36
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	24 e2       	ldi	r18, 0x24	; 36
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	f9 01       	movw	r30, r18
     81a:	20 81       	ld	r18, Z
     81c:	2e 7f       	andi	r18, 0xFE	; 254
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	16 c0       	rjmp	.+44     	; 0x850 <pcint0ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     824:	85 e2       	ldi	r24, 0x25	; 37
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	25 e2       	ldi	r18, 0x25	; 37
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	f9 01       	movw	r30, r18
     82e:	20 81       	ld	r18, Z
     830:	21 60       	ori	r18, 0x01	; 1
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
     836:	84 e2       	ldi	r24, 0x24	; 36
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	24 e2       	ldi	r18, 0x24	; 36
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	2e 7f       	andi	r18, 0xFE	; 254
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
     848:	03 c0       	rjmp	.+6      	; 0x850 <pcint0ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	0b c0       	rjmp	.+22     	; 0x864 <pcint0ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
     84e:	00 00       	nop
	}
	setBit(PCMSK0, PCINT0);
     850:	8b e6       	ldi	r24, 0x6B	; 107
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	2b e6       	ldi	r18, 0x6B	; 107
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	f9 01       	movw	r30, r18
     85a:	20 81       	ld	r18, Z
     85c:	21 60       	ori	r18, 0x01	; 1
     85e:	fc 01       	movw	r30, r24
     860:	20 83       	st	Z, r18
	return RESULT_OK;
     862:	80 e0       	ldi	r24, 0x00	; 0
}
     864:	0f 90       	pop	r0
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <pcint0DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint0 in PB0
 * -------------------------------------------------------------------------- */

void pcint0DeactivateInterrupt(void)
{
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK0, PCINT0);
     874:	8b e6       	ldi	r24, 0x6B	; 107
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	2b e6       	ldi	r18, 0x6B	; 107
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	f9 01       	movw	r30, r18
     87e:	20 81       	ld	r18, Z
     880:	2e 7f       	andi	r18, 0xFE	; 254
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
	return;
     886:	00 00       	nop
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <pcint1ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	1f 92       	push	r1
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	91 05       	cpc	r25, r1
     8a4:	b9 f1       	breq	.+110    	; 0x914 <__stack+0x15>
     8a6:	83 30       	cpi	r24, 0x03	; 3
     8a8:	91 05       	cpc	r25, r1
     8aa:	2c f4       	brge	.+10     	; 0x8b6 <pcint1ActivateInterrupt+0x28>
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	61 f0       	breq	.+24     	; 0x8c8 <pcint1ActivateInterrupt+0x3a>
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	e9 f0       	breq	.+58     	; 0x8ee <pcint1ActivateInterrupt+0x60>
     8b4:	55 c0       	rjmp	.+170    	; 0x960 <__stack+0x61>
     8b6:	83 30       	cpi	r24, 0x03	; 3
     8b8:	91 05       	cpc	r25, r1
     8ba:	09 f4       	brne	.+2      	; 0x8be <pcint1ActivateInterrupt+0x30>
     8bc:	3e c0       	rjmp	.+124    	; 0x93a <__stack+0x3b>
     8be:	8f 3f       	cpi	r24, 0xFF	; 255
     8c0:	91 05       	cpc	r25, r1
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <pcint1ActivateInterrupt+0x38>
     8c4:	4f c0       	rjmp	.+158    	; 0x964 <__stack+0x65>
     8c6:	4c c0       	rjmp	.+152    	; 0x960 <__stack+0x61>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     8c8:	85 e2       	ldi	r24, 0x25	; 37
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	25 e2       	ldi	r18, 0x25	; 37
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	f9 01       	movw	r30, r18
     8d2:	20 81       	ld	r18, Z
     8d4:	2d 7f       	andi	r18, 0xFD	; 253
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
     8da:	84 e2       	ldi	r24, 0x24	; 36
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	24 e2       	ldi	r18, 0x24	; 36
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	f9 01       	movw	r30, r18
     8e4:	20 81       	ld	r18, Z
     8e6:	22 60       	ori	r18, 0x02	; 2
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
     8ec:	3c c0       	rjmp	.+120    	; 0x966 <__stack+0x67>
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     8ee:	85 e2       	ldi	r24, 0x25	; 37
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	25 e2       	ldi	r18, 0x25	; 37
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	f9 01       	movw	r30, r18
     8f8:	20 81       	ld	r18, Z
     8fa:	22 60       	ori	r18, 0x02	; 2
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
     900:	84 e2       	ldi	r24, 0x24	; 36
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	24 e2       	ldi	r18, 0x24	; 36
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	22 60       	ori	r18, 0x02	; 2
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
     912:	29 c0       	rjmp	.+82     	; 0x966 <__stack+0x67>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     914:	85 e2       	ldi	r24, 0x25	; 37
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	25 e2       	ldi	r18, 0x25	; 37
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	f9 01       	movw	r30, r18
     91e:	20 81       	ld	r18, Z
     920:	2d 7f       	andi	r18, 0xFD	; 253
     922:	fc 01       	movw	r30, r24
     924:	20 83       	st	Z, r18
     926:	84 e2       	ldi	r24, 0x24	; 36
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	24 e2       	ldi	r18, 0x24	; 36
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	f9 01       	movw	r30, r18
     930:	20 81       	ld	r18, Z
     932:	2d 7f       	andi	r18, 0xFD	; 253
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
     938:	16 c0       	rjmp	.+44     	; 0x966 <__stack+0x67>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     93a:	85 e2       	ldi	r24, 0x25	; 37
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	25 e2       	ldi	r18, 0x25	; 37
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	f9 01       	movw	r30, r18
     944:	20 81       	ld	r18, Z
     946:	22 60       	ori	r18, 0x02	; 2
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	84 e2       	ldi	r24, 0x24	; 36
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	24 e2       	ldi	r18, 0x24	; 36
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	20 81       	ld	r18, Z
     958:	2d 7f       	andi	r18, 0xFD	; 253
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
     95e:	03 c0       	rjmp	.+6      	; 0x966 <__stack+0x67>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0b c0       	rjmp	.+22     	; 0x97a <__stack+0x7b>
		case PORT_NO_CHANGE:		break;
     964:	00 00       	nop
	}
	setBit(PCMSK0, PCINT1);
     966:	8b e6       	ldi	r24, 0x6B	; 107
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	2b e6       	ldi	r18, 0x6B	; 107
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	22 60       	ori	r18, 0x02	; 2
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
	return RESULT_OK;
     978:	80 e0       	ldi	r24, 0x00	; 0
}
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <pcint1DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint1 in PB1
 * -------------------------------------------------------------------------- */

void pcint1DeactivateInterrupt(void)
{
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK0, PCINT1);
     98a:	8b e6       	ldi	r24, 0x6B	; 107
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	2b e6       	ldi	r18, 0x6B	; 107
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	f9 01       	movw	r30, r18
     994:	20 81       	ld	r18, Z
     996:	2d 7f       	andi	r18, 0xFD	; 253
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
	return;
     99c:	00 00       	nop
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <pcint2ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	1f 92       	push	r1
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	88 2f       	mov	r24, r24
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	82 30       	cpi	r24, 0x02	; 2
     9b8:	91 05       	cpc	r25, r1
     9ba:	b9 f1       	breq	.+110    	; 0xa2a <pcint2ActivateInterrupt+0x86>
     9bc:	83 30       	cpi	r24, 0x03	; 3
     9be:	91 05       	cpc	r25, r1
     9c0:	2c f4       	brge	.+10     	; 0x9cc <pcint2ActivateInterrupt+0x28>
     9c2:	00 97       	sbiw	r24, 0x00	; 0
     9c4:	61 f0       	breq	.+24     	; 0x9de <pcint2ActivateInterrupt+0x3a>
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	e9 f0       	breq	.+58     	; 0xa04 <pcint2ActivateInterrupt+0x60>
     9ca:	55 c0       	rjmp	.+170    	; 0xa76 <pcint2ActivateInterrupt+0xd2>
     9cc:	83 30       	cpi	r24, 0x03	; 3
     9ce:	91 05       	cpc	r25, r1
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <pcint2ActivateInterrupt+0x30>
     9d2:	3e c0       	rjmp	.+124    	; 0xa50 <pcint2ActivateInterrupt+0xac>
     9d4:	8f 3f       	cpi	r24, 0xFF	; 255
     9d6:	91 05       	cpc	r25, r1
     9d8:	09 f4       	brne	.+2      	; 0x9dc <pcint2ActivateInterrupt+0x38>
     9da:	4f c0       	rjmp	.+158    	; 0xa7a <pcint2ActivateInterrupt+0xd6>
     9dc:	4c c0       	rjmp	.+152    	; 0xa76 <pcint2ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     9de:	85 e2       	ldi	r24, 0x25	; 37
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	25 e2       	ldi	r18, 0x25	; 37
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	f9 01       	movw	r30, r18
     9e8:	20 81       	ld	r18, Z
     9ea:	2b 7f       	andi	r18, 0xFB	; 251
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
     9f0:	84 e2       	ldi	r24, 0x24	; 36
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	24 e2       	ldi	r18, 0x24	; 36
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	f9 01       	movw	r30, r18
     9fa:	20 81       	ld	r18, Z
     9fc:	24 60       	ori	r18, 0x04	; 4
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
     a02:	3c c0       	rjmp	.+120    	; 0xa7c <pcint2ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     a04:	85 e2       	ldi	r24, 0x25	; 37
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	25 e2       	ldi	r18, 0x25	; 37
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	f9 01       	movw	r30, r18
     a0e:	20 81       	ld	r18, Z
     a10:	24 60       	ori	r18, 0x04	; 4
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18
     a16:	84 e2       	ldi	r24, 0x24	; 36
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	24 e2       	ldi	r18, 0x24	; 36
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	24 60       	ori	r18, 0x04	; 4
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
     a28:	29 c0       	rjmp	.+82     	; 0xa7c <pcint2ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     a2a:	85 e2       	ldi	r24, 0x25	; 37
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	25 e2       	ldi	r18, 0x25	; 37
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	f9 01       	movw	r30, r18
     a34:	20 81       	ld	r18, Z
     a36:	2b 7f       	andi	r18, 0xFB	; 251
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
     a3c:	84 e2       	ldi	r24, 0x24	; 36
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	24 e2       	ldi	r18, 0x24	; 36
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	f9 01       	movw	r30, r18
     a46:	20 81       	ld	r18, Z
     a48:	2b 7f       	andi	r18, 0xFB	; 251
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 83       	st	Z, r18
     a4e:	16 c0       	rjmp	.+44     	; 0xa7c <pcint2ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     a50:	85 e2       	ldi	r24, 0x25	; 37
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	25 e2       	ldi	r18, 0x25	; 37
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	f9 01       	movw	r30, r18
     a5a:	20 81       	ld	r18, Z
     a5c:	24 60       	ori	r18, 0x04	; 4
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
     a62:	84 e2       	ldi	r24, 0x24	; 36
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	24 e2       	ldi	r18, 0x24	; 36
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	f9 01       	movw	r30, r18
     a6c:	20 81       	ld	r18, Z
     a6e:	2b 7f       	andi	r18, 0xFB	; 251
     a70:	fc 01       	movw	r30, r24
     a72:	20 83       	st	Z, r18
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <pcint2ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0b c0       	rjmp	.+22     	; 0xa90 <pcint2ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
     a7a:	00 00       	nop
	}
	setBit(PCMSK0, PCINT2);
     a7c:	8b e6       	ldi	r24, 0x6B	; 107
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2b e6       	ldi	r18, 0x6B	; 107
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	f9 01       	movw	r30, r18
     a86:	20 81       	ld	r18, Z
     a88:	24 60       	ori	r18, 0x04	; 4
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
	return RESULT_OK;
     a8e:	80 e0       	ldi	r24, 0x00	; 0
}
     a90:	0f 90       	pop	r0
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <pcint2DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint2 in PB2
 * -------------------------------------------------------------------------- */

void pcint2DeactivateInterrupt(void)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK0, PCINT2);
     aa0:	8b e6       	ldi	r24, 0x6B	; 107
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	2b e6       	ldi	r18, 0x6B	; 107
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	f9 01       	movw	r30, r18
     aaa:	20 81       	ld	r18, Z
     aac:	2b 7f       	andi	r18, 0xFB	; 251
     aae:	fc 01       	movw	r30, r24
     ab0:	20 83       	st	Z, r18
	return;
     ab2:	00 00       	nop
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <pcint3ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	1f 92       	push	r1
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	91 05       	cpc	r25, r1
     ad0:	b9 f1       	breq	.+110    	; 0xb40 <pcint3ActivateInterrupt+0x86>
     ad2:	83 30       	cpi	r24, 0x03	; 3
     ad4:	91 05       	cpc	r25, r1
     ad6:	2c f4       	brge	.+10     	; 0xae2 <pcint3ActivateInterrupt+0x28>
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	61 f0       	breq	.+24     	; 0xaf4 <pcint3ActivateInterrupt+0x3a>
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	e9 f0       	breq	.+58     	; 0xb1a <pcint3ActivateInterrupt+0x60>
     ae0:	55 c0       	rjmp	.+170    	; 0xb8c <pcint3ActivateInterrupt+0xd2>
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	91 05       	cpc	r25, r1
     ae6:	09 f4       	brne	.+2      	; 0xaea <pcint3ActivateInterrupt+0x30>
     ae8:	3e c0       	rjmp	.+124    	; 0xb66 <pcint3ActivateInterrupt+0xac>
     aea:	8f 3f       	cpi	r24, 0xFF	; 255
     aec:	91 05       	cpc	r25, r1
     aee:	09 f4       	brne	.+2      	; 0xaf2 <pcint3ActivateInterrupt+0x38>
     af0:	4f c0       	rjmp	.+158    	; 0xb90 <pcint3ActivateInterrupt+0xd6>
     af2:	4c c0       	rjmp	.+152    	; 0xb8c <pcint3ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     af4:	85 e2       	ldi	r24, 0x25	; 37
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	25 e2       	ldi	r18, 0x25	; 37
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	27 7f       	andi	r18, 0xF7	; 247
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
     b06:	84 e2       	ldi	r24, 0x24	; 36
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	24 e2       	ldi	r18, 0x24	; 36
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	28 60       	ori	r18, 0x08	; 8
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
     b18:	3c c0       	rjmp	.+120    	; 0xb92 <pcint3ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     b1a:	85 e2       	ldi	r24, 0x25	; 37
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	25 e2       	ldi	r18, 0x25	; 37
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	28 60       	ori	r18, 0x08	; 8
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
     b2c:	84 e2       	ldi	r24, 0x24	; 36
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	24 e2       	ldi	r18, 0x24	; 36
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	f9 01       	movw	r30, r18
     b36:	20 81       	ld	r18, Z
     b38:	28 60       	ori	r18, 0x08	; 8
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
     b3e:	29 c0       	rjmp	.+82     	; 0xb92 <pcint3ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     b40:	85 e2       	ldi	r24, 0x25	; 37
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	25 e2       	ldi	r18, 0x25	; 37
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	f9 01       	movw	r30, r18
     b4a:	20 81       	ld	r18, Z
     b4c:	27 7f       	andi	r18, 0xF7	; 247
     b4e:	fc 01       	movw	r30, r24
     b50:	20 83       	st	Z, r18
     b52:	84 e2       	ldi	r24, 0x24	; 36
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	24 e2       	ldi	r18, 0x24	; 36
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	f9 01       	movw	r30, r18
     b5c:	20 81       	ld	r18, Z
     b5e:	27 7f       	andi	r18, 0xF7	; 247
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
     b64:	16 c0       	rjmp	.+44     	; 0xb92 <pcint3ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     b66:	85 e2       	ldi	r24, 0x25	; 37
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	25 e2       	ldi	r18, 0x25	; 37
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	28 60       	ori	r18, 0x08	; 8
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
     b78:	84 e2       	ldi	r24, 0x24	; 36
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	24 e2       	ldi	r18, 0x24	; 36
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	f9 01       	movw	r30, r18
     b82:	20 81       	ld	r18, Z
     b84:	27 7f       	andi	r18, 0xF7	; 247
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <pcint3ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	0b c0       	rjmp	.+22     	; 0xba6 <pcint3ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
     b90:	00 00       	nop
	}
	setBit(PCMSK0, PCINT3);
     b92:	8b e6       	ldi	r24, 0x6B	; 107
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	2b e6       	ldi	r18, 0x6B	; 107
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	f9 01       	movw	r30, r18
     b9c:	20 81       	ld	r18, Z
     b9e:	28 60       	ori	r18, 0x08	; 8
     ba0:	fc 01       	movw	r30, r24
     ba2:	20 83       	st	Z, r18
	return RESULT_OK;
     ba4:	80 e0       	ldi	r24, 0x00	; 0
}
     ba6:	0f 90       	pop	r0
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <pcint3DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint3 in PB3
 * -------------------------------------------------------------------------- */

void pcint3DeactivateInterrupt(void)
{
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK0, PCINT3);
     bb6:	8b e6       	ldi	r24, 0x6B	; 107
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	2b e6       	ldi	r18, 0x6B	; 107
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	f9 01       	movw	r30, r18
     bc0:	20 81       	ld	r18, Z
     bc2:	27 7f       	andi	r18, 0xF7	; 247
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
	return;
     bc8:	00 00       	nop
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <pcint4ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	1f 92       	push	r1
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	91 05       	cpc	r25, r1
     be6:	b9 f1       	breq	.+110    	; 0xc56 <pcint4ActivateInterrupt+0x86>
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	91 05       	cpc	r25, r1
     bec:	2c f4       	brge	.+10     	; 0xbf8 <pcint4ActivateInterrupt+0x28>
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	61 f0       	breq	.+24     	; 0xc0a <pcint4ActivateInterrupt+0x3a>
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	e9 f0       	breq	.+58     	; 0xc30 <pcint4ActivateInterrupt+0x60>
     bf6:	55 c0       	rjmp	.+170    	; 0xca2 <pcint4ActivateInterrupt+0xd2>
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <pcint4ActivateInterrupt+0x30>
     bfe:	3e c0       	rjmp	.+124    	; 0xc7c <pcint4ActivateInterrupt+0xac>
     c00:	8f 3f       	cpi	r24, 0xFF	; 255
     c02:	91 05       	cpc	r25, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <pcint4ActivateInterrupt+0x38>
     c06:	4f c0       	rjmp	.+158    	; 0xca6 <pcint4ActivateInterrupt+0xd6>
     c08:	4c c0       	rjmp	.+152    	; 0xca2 <pcint4ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     c0a:	85 e2       	ldi	r24, 0x25	; 37
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	25 e2       	ldi	r18, 0x25	; 37
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	f9 01       	movw	r30, r18
     c14:	20 81       	ld	r18, Z
     c16:	2f 7e       	andi	r18, 0xEF	; 239
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
     c1c:	84 e2       	ldi	r24, 0x24	; 36
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	24 e2       	ldi	r18, 0x24	; 36
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	f9 01       	movw	r30, r18
     c26:	20 81       	ld	r18, Z
     c28:	20 61       	ori	r18, 0x10	; 16
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
     c2e:	3c c0       	rjmp	.+120    	; 0xca8 <pcint4ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     c30:	85 e2       	ldi	r24, 0x25	; 37
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	25 e2       	ldi	r18, 0x25	; 37
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	f9 01       	movw	r30, r18
     c3a:	20 81       	ld	r18, Z
     c3c:	20 61       	ori	r18, 0x10	; 16
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18
     c42:	84 e2       	ldi	r24, 0x24	; 36
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	24 e2       	ldi	r18, 0x24	; 36
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	f9 01       	movw	r30, r18
     c4c:	20 81       	ld	r18, Z
     c4e:	20 61       	ori	r18, 0x10	; 16
     c50:	fc 01       	movw	r30, r24
     c52:	20 83       	st	Z, r18
     c54:	29 c0       	rjmp	.+82     	; 0xca8 <pcint4ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     c56:	85 e2       	ldi	r24, 0x25	; 37
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	25 e2       	ldi	r18, 0x25	; 37
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	f9 01       	movw	r30, r18
     c60:	20 81       	ld	r18, Z
     c62:	2f 7e       	andi	r18, 0xEF	; 239
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
     c68:	84 e2       	ldi	r24, 0x24	; 36
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	24 e2       	ldi	r18, 0x24	; 36
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	f9 01       	movw	r30, r18
     c72:	20 81       	ld	r18, Z
     c74:	2f 7e       	andi	r18, 0xEF	; 239
     c76:	fc 01       	movw	r30, r24
     c78:	20 83       	st	Z, r18
     c7a:	16 c0       	rjmp	.+44     	; 0xca8 <pcint4ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     c7c:	85 e2       	ldi	r24, 0x25	; 37
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	25 e2       	ldi	r18, 0x25	; 37
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	f9 01       	movw	r30, r18
     c86:	20 81       	ld	r18, Z
     c88:	20 61       	ori	r18, 0x10	; 16
     c8a:	fc 01       	movw	r30, r24
     c8c:	20 83       	st	Z, r18
     c8e:	84 e2       	ldi	r24, 0x24	; 36
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	24 e2       	ldi	r18, 0x24	; 36
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	f9 01       	movw	r30, r18
     c98:	20 81       	ld	r18, Z
     c9a:	2f 7e       	andi	r18, 0xEF	; 239
     c9c:	fc 01       	movw	r30, r24
     c9e:	20 83       	st	Z, r18
     ca0:	03 c0       	rjmp	.+6      	; 0xca8 <pcint4ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	0b c0       	rjmp	.+22     	; 0xcbc <pcint4ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
     ca6:	00 00       	nop
	}
	setBit(PCMSK0, PCINT4);
     ca8:	8b e6       	ldi	r24, 0x6B	; 107
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	2b e6       	ldi	r18, 0x6B	; 107
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	20 61       	ori	r18, 0x10	; 16
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
	return RESULT_OK;
     cba:	80 e0       	ldi	r24, 0x00	; 0
}
     cbc:	0f 90       	pop	r0
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <pcint4DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint4 in PB4
 * -------------------------------------------------------------------------- */

void pcint4DeactivateInterrupt(void)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK0, PCINT4);
     ccc:	8b e6       	ldi	r24, 0x6B	; 107
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	2b e6       	ldi	r18, 0x6B	; 107
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f9 01       	movw	r30, r18
     cd6:	20 81       	ld	r18, Z
     cd8:	2f 7e       	andi	r18, 0xEF	; 239
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18
	return;
     cde:	00 00       	nop
}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <pcint5ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	1f 92       	push	r1
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	91 05       	cpc	r25, r1
     cfc:	b9 f1       	breq	.+110    	; 0xd6c <pcint5ActivateInterrupt+0x86>
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	2c f4       	brge	.+10     	; 0xd0e <pcint5ActivateInterrupt+0x28>
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	61 f0       	breq	.+24     	; 0xd20 <pcint5ActivateInterrupt+0x3a>
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	e9 f0       	breq	.+58     	; 0xd46 <pcint5ActivateInterrupt+0x60>
     d0c:	55 c0       	rjmp	.+170    	; 0xdb8 <pcint5ActivateInterrupt+0xd2>
     d0e:	83 30       	cpi	r24, 0x03	; 3
     d10:	91 05       	cpc	r25, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <pcint5ActivateInterrupt+0x30>
     d14:	3e c0       	rjmp	.+124    	; 0xd92 <pcint5ActivateInterrupt+0xac>
     d16:	8f 3f       	cpi	r24, 0xFF	; 255
     d18:	91 05       	cpc	r25, r1
     d1a:	09 f4       	brne	.+2      	; 0xd1e <pcint5ActivateInterrupt+0x38>
     d1c:	4f c0       	rjmp	.+158    	; 0xdbc <pcint5ActivateInterrupt+0xd6>
     d1e:	4c c0       	rjmp	.+152    	; 0xdb8 <pcint5ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     d20:	85 e2       	ldi	r24, 0x25	; 37
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	25 e2       	ldi	r18, 0x25	; 37
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	f9 01       	movw	r30, r18
     d2a:	20 81       	ld	r18, Z
     d2c:	2f 7d       	andi	r18, 0xDF	; 223
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
     d32:	84 e2       	ldi	r24, 0x24	; 36
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	24 e2       	ldi	r18, 0x24	; 36
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	20 81       	ld	r18, Z
     d3e:	20 62       	ori	r18, 0x20	; 32
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
     d44:	3c c0       	rjmp	.+120    	; 0xdbe <pcint5ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     d46:	85 e2       	ldi	r24, 0x25	; 37
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	25 e2       	ldi	r18, 0x25	; 37
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	f9 01       	movw	r30, r18
     d50:	20 81       	ld	r18, Z
     d52:	20 62       	ori	r18, 0x20	; 32
     d54:	fc 01       	movw	r30, r24
     d56:	20 83       	st	Z, r18
     d58:	84 e2       	ldi	r24, 0x24	; 36
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	24 e2       	ldi	r18, 0x24	; 36
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	f9 01       	movw	r30, r18
     d62:	20 81       	ld	r18, Z
     d64:	20 62       	ori	r18, 0x20	; 32
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18
     d6a:	29 c0       	rjmp	.+82     	; 0xdbe <pcint5ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     d6c:	85 e2       	ldi	r24, 0x25	; 37
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	25 e2       	ldi	r18, 0x25	; 37
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	f9 01       	movw	r30, r18
     d76:	20 81       	ld	r18, Z
     d78:	2f 7d       	andi	r18, 0xDF	; 223
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
     d7e:	84 e2       	ldi	r24, 0x24	; 36
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	24 e2       	ldi	r18, 0x24	; 36
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	2f 7d       	andi	r18, 0xDF	; 223
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 83       	st	Z, r18
     d90:	16 c0       	rjmp	.+44     	; 0xdbe <pcint5ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     d92:	85 e2       	ldi	r24, 0x25	; 37
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	25 e2       	ldi	r18, 0x25	; 37
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	f9 01       	movw	r30, r18
     d9c:	20 81       	ld	r18, Z
     d9e:	20 62       	ori	r18, 0x20	; 32
     da0:	fc 01       	movw	r30, r24
     da2:	20 83       	st	Z, r18
     da4:	84 e2       	ldi	r24, 0x24	; 36
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	24 e2       	ldi	r18, 0x24	; 36
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	f9 01       	movw	r30, r18
     dae:	20 81       	ld	r18, Z
     db0:	2f 7d       	andi	r18, 0xDF	; 223
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <pcint5ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0b c0       	rjmp	.+22     	; 0xdd2 <pcint5ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
     dbc:	00 00       	nop
	}
	setBit(PCMSK0, PCINT5);
     dbe:	8b e6       	ldi	r24, 0x6B	; 107
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	2b e6       	ldi	r18, 0x6B	; 107
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	f9 01       	movw	r30, r18
     dc8:	20 81       	ld	r18, Z
     dca:	20 62       	ori	r18, 0x20	; 32
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
	return RESULT_OK;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
}
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <pcint5DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint5 in PB5
 * -------------------------------------------------------------------------- */

void pcint5DeactivateInterrupt(void)
{
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK0, PCINT5);
     de2:	8b e6       	ldi	r24, 0x6B	; 107
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	2b e6       	ldi	r18, 0x6B	; 107
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	f9 01       	movw	r30, r18
     dec:	20 81       	ld	r18, Z
     dee:	2f 7d       	andi	r18, 0xDF	; 223
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
	return;
     df4:	00 00       	nop
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <pcint6ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	1f 92       	push	r1
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	91 05       	cpc	r25, r1
     e12:	b9 f1       	breq	.+110    	; 0xe82 <pcint6ActivateInterrupt+0x86>
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	91 05       	cpc	r25, r1
     e18:	2c f4       	brge	.+10     	; 0xe24 <pcint6ActivateInterrupt+0x28>
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	61 f0       	breq	.+24     	; 0xe36 <pcint6ActivateInterrupt+0x3a>
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	e9 f0       	breq	.+58     	; 0xe5c <pcint6ActivateInterrupt+0x60>
     e22:	55 c0       	rjmp	.+170    	; 0xece <pcint6ActivateInterrupt+0xd2>
     e24:	83 30       	cpi	r24, 0x03	; 3
     e26:	91 05       	cpc	r25, r1
     e28:	09 f4       	brne	.+2      	; 0xe2c <pcint6ActivateInterrupt+0x30>
     e2a:	3e c0       	rjmp	.+124    	; 0xea8 <pcint6ActivateInterrupt+0xac>
     e2c:	8f 3f       	cpi	r24, 0xFF	; 255
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <pcint6ActivateInterrupt+0x38>
     e32:	4f c0       	rjmp	.+158    	; 0xed2 <pcint6ActivateInterrupt+0xd6>
     e34:	4c c0       	rjmp	.+152    	; 0xece <pcint6ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     e36:	85 e2       	ldi	r24, 0x25	; 37
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	25 e2       	ldi	r18, 0x25	; 37
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	f9 01       	movw	r30, r18
     e40:	20 81       	ld	r18, Z
     e42:	2f 7b       	andi	r18, 0xBF	; 191
     e44:	fc 01       	movw	r30, r24
     e46:	20 83       	st	Z, r18
     e48:	84 e2       	ldi	r24, 0x24	; 36
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	24 e2       	ldi	r18, 0x24	; 36
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	f9 01       	movw	r30, r18
     e52:	20 81       	ld	r18, Z
     e54:	20 64       	ori	r18, 0x40	; 64
     e56:	fc 01       	movw	r30, r24
     e58:	20 83       	st	Z, r18
     e5a:	3c c0       	rjmp	.+120    	; 0xed4 <pcint6ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     e5c:	85 e2       	ldi	r24, 0x25	; 37
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	25 e2       	ldi	r18, 0x25	; 37
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	f9 01       	movw	r30, r18
     e66:	20 81       	ld	r18, Z
     e68:	20 64       	ori	r18, 0x40	; 64
     e6a:	fc 01       	movw	r30, r24
     e6c:	20 83       	st	Z, r18
     e6e:	84 e2       	ldi	r24, 0x24	; 36
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	24 e2       	ldi	r18, 0x24	; 36
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	f9 01       	movw	r30, r18
     e78:	20 81       	ld	r18, Z
     e7a:	20 64       	ori	r18, 0x40	; 64
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
     e80:	29 c0       	rjmp	.+82     	; 0xed4 <pcint6ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     e82:	85 e2       	ldi	r24, 0x25	; 37
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	25 e2       	ldi	r18, 0x25	; 37
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	20 81       	ld	r18, Z
     e8e:	2f 7b       	andi	r18, 0xBF	; 191
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
     e94:	84 e2       	ldi	r24, 0x24	; 36
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	24 e2       	ldi	r18, 0x24	; 36
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	f9 01       	movw	r30, r18
     e9e:	20 81       	ld	r18, Z
     ea0:	2f 7b       	andi	r18, 0xBF	; 191
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 83       	st	Z, r18
     ea6:	16 c0       	rjmp	.+44     	; 0xed4 <pcint6ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     ea8:	85 e2       	ldi	r24, 0x25	; 37
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	25 e2       	ldi	r18, 0x25	; 37
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	f9 01       	movw	r30, r18
     eb2:	20 81       	ld	r18, Z
     eb4:	20 64       	ori	r18, 0x40	; 64
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 83       	st	Z, r18
     eba:	84 e2       	ldi	r24, 0x24	; 36
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	24 e2       	ldi	r18, 0x24	; 36
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	f9 01       	movw	r30, r18
     ec4:	20 81       	ld	r18, Z
     ec6:	2f 7b       	andi	r18, 0xBF	; 191
     ec8:	fc 01       	movw	r30, r24
     eca:	20 83       	st	Z, r18
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <pcint6ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	0b c0       	rjmp	.+22     	; 0xee8 <pcint6ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
     ed2:	00 00       	nop
	}
	setBit(PCMSK0, PCINT6);
     ed4:	8b e6       	ldi	r24, 0x6B	; 107
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	2b e6       	ldi	r18, 0x6B	; 107
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	20 64       	ori	r18, 0x40	; 64
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
	return RESULT_OK;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
}
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <pcint6DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint6 in PB6
 * -------------------------------------------------------------------------- */

void pcint6DeactivateInterrupt(void)
{
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK0, PCINT6);
     ef8:	8b e6       	ldi	r24, 0x6B	; 107
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	2b e6       	ldi	r18, 0x6B	; 107
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	2f 7b       	andi	r18, 0xBF	; 191
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
	return;
     f0a:	00 00       	nop
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <pcint7ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	1f 92       	push	r1
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	91 05       	cpc	r25, r1
     f28:	b9 f1       	breq	.+110    	; 0xf98 <pcint7ActivateInterrupt+0x86>
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	91 05       	cpc	r25, r1
     f2e:	2c f4       	brge	.+10     	; 0xf3a <pcint7ActivateInterrupt+0x28>
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	61 f0       	breq	.+24     	; 0xf4c <pcint7ActivateInterrupt+0x3a>
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	e9 f0       	breq	.+58     	; 0xf72 <pcint7ActivateInterrupt+0x60>
     f38:	55 c0       	rjmp	.+170    	; 0xfe4 <pcint7ActivateInterrupt+0xd2>
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <pcint7ActivateInterrupt+0x30>
     f40:	3e c0       	rjmp	.+124    	; 0xfbe <pcint7ActivateInterrupt+0xac>
     f42:	8f 3f       	cpi	r24, 0xFF	; 255
     f44:	91 05       	cpc	r25, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <pcint7ActivateInterrupt+0x38>
     f48:	4f c0       	rjmp	.+158    	; 0xfe8 <pcint7ActivateInterrupt+0xd6>
     f4a:	4c c0       	rjmp	.+152    	; 0xfe4 <pcint7ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     f4c:	85 e2       	ldi	r24, 0x25	; 37
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	25 e2       	ldi	r18, 0x25	; 37
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	f9 01       	movw	r30, r18
     f56:	20 81       	ld	r18, Z
     f58:	2f 77       	andi	r18, 0x7F	; 127
     f5a:	fc 01       	movw	r30, r24
     f5c:	20 83       	st	Z, r18
     f5e:	84 e2       	ldi	r24, 0x24	; 36
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	24 e2       	ldi	r18, 0x24	; 36
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	f9 01       	movw	r30, r18
     f68:	20 81       	ld	r18, Z
     f6a:	20 68       	ori	r18, 0x80	; 128
     f6c:	fc 01       	movw	r30, r24
     f6e:	20 83       	st	Z, r18
     f70:	3c c0       	rjmp	.+120    	; 0xfea <pcint7ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     f72:	85 e2       	ldi	r24, 0x25	; 37
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	25 e2       	ldi	r18, 0x25	; 37
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	f9 01       	movw	r30, r18
     f7c:	20 81       	ld	r18, Z
     f7e:	20 68       	ori	r18, 0x80	; 128
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18
     f84:	84 e2       	ldi	r24, 0x24	; 36
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	24 e2       	ldi	r18, 0x24	; 36
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	f9 01       	movw	r30, r18
     f8e:	20 81       	ld	r18, Z
     f90:	20 68       	ori	r18, 0x80	; 128
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18
     f96:	29 c0       	rjmp	.+82     	; 0xfea <pcint7ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     f98:	85 e2       	ldi	r24, 0x25	; 37
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	25 e2       	ldi	r18, 0x25	; 37
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	f9 01       	movw	r30, r18
     fa2:	20 81       	ld	r18, Z
     fa4:	2f 77       	andi	r18, 0x7F	; 127
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18
     faa:	84 e2       	ldi	r24, 0x24	; 36
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	24 e2       	ldi	r18, 0x24	; 36
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	2f 77       	andi	r18, 0x7F	; 127
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18
     fbc:	16 c0       	rjmp	.+44     	; 0xfea <pcint7ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     fbe:	85 e2       	ldi	r24, 0x25	; 37
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	25 e2       	ldi	r18, 0x25	; 37
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	f9 01       	movw	r30, r18
     fc8:	20 81       	ld	r18, Z
     fca:	20 68       	ori	r18, 0x80	; 128
     fcc:	fc 01       	movw	r30, r24
     fce:	20 83       	st	Z, r18
     fd0:	84 e2       	ldi	r24, 0x24	; 36
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	24 e2       	ldi	r18, 0x24	; 36
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	f9 01       	movw	r30, r18
     fda:	20 81       	ld	r18, Z
     fdc:	2f 77       	andi	r18, 0x7F	; 127
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <pcint7ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	0b c0       	rjmp	.+22     	; 0xffe <pcint7ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
     fe8:	00 00       	nop
	}
	setBit(PCMSK0, PCINT7);
     fea:	8b e6       	ldi	r24, 0x6B	; 107
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	2b e6       	ldi	r18, 0x6B	; 107
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	f9 01       	movw	r30, r18
     ff4:	20 81       	ld	r18, Z
     ff6:	20 68       	ori	r18, 0x80	; 128
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
	return RESULT_OK;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
}
     ffe:	0f 90       	pop	r0
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <pcint7DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint7 in PB7
 * -------------------------------------------------------------------------- */

void pcint7DeactivateInterrupt(void)
{
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK0, PCINT7);
    100e:	8b e6       	ldi	r24, 0x6B	; 107
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	2b e6       	ldi	r18, 0x6B	; 107
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	2f 77       	andi	r18, 0x7F	; 127
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
	return;
    1020:	00 00       	nop
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <pcint14_8Enable>:
/* -----------------------------------------------------------------------------
 * Enables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Enable(void)
{
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	setBit(PCICR, PCIE1);
    1030:	88 e6       	ldi	r24, 0x68	; 104
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	28 e6       	ldi	r18, 0x68	; 104
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	f9 01       	movw	r30, r18
    103a:	20 81       	ld	r18, Z
    103c:	22 60       	ori	r18, 0x02	; 2
    103e:	fc 01       	movw	r30, r24
    1040:	20 83       	st	Z, r18
	return;
    1042:	00 00       	nop
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <pcint14_8Disable>:
/* -----------------------------------------------------------------------------
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Disable(void)
{
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCICR, PCIE1);
    1052:	88 e6       	ldi	r24, 0x68	; 104
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	28 e6       	ldi	r18, 0x68	; 104
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	f9 01       	movw	r30, r18
    105c:	20 81       	ld	r18, Z
    105e:	2d 7f       	andi	r18, 0xFD	; 253
    1060:	fc 01       	movw	r30, r24
    1062:	20 83       	st	Z, r18
	return;
    1064:	00 00       	nop
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <pcint14_8ClearInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8ClearInterruptRequest(void)
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	setBit(PCIFR, PCIF1);
    1074:	8b e3       	ldi	r24, 0x3B	; 59
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	2b e3       	ldi	r18, 0x3B	; 59
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	f9 01       	movw	r30, r18
    107e:	20 81       	ld	r18, Z
    1080:	22 60       	ori	r18, 0x02	; 2
    1082:	fc 01       	movw	r30, r24
    1084:	20 83       	st	Z, r18
	return;
    1086:	00 00       	nop
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <pcint8ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	1f 92       	push	r1
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	91 05       	cpc	r25, r1
    10a4:	b9 f1       	breq	.+110    	; 0x1114 <pcint8ActivateInterrupt+0x86>
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <pcint8ActivateInterrupt+0x28>
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	61 f0       	breq	.+24     	; 0x10c8 <pcint8ActivateInterrupt+0x3a>
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	e9 f0       	breq	.+58     	; 0x10ee <pcint8ActivateInterrupt+0x60>
    10b4:	55 c0       	rjmp	.+170    	; 0x1160 <pcint8ActivateInterrupt+0xd2>
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	91 05       	cpc	r25, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <pcint8ActivateInterrupt+0x30>
    10bc:	3e c0       	rjmp	.+124    	; 0x113a <pcint8ActivateInterrupt+0xac>
    10be:	8f 3f       	cpi	r24, 0xFF	; 255
    10c0:	91 05       	cpc	r25, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <pcint8ActivateInterrupt+0x38>
    10c4:	4f c0       	rjmp	.+158    	; 0x1164 <pcint8ActivateInterrupt+0xd6>
    10c6:	4c c0       	rjmp	.+152    	; 0x1160 <pcint8ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
    10c8:	88 e2       	ldi	r24, 0x28	; 40
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	28 e2       	ldi	r18, 0x28	; 40
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	f9 01       	movw	r30, r18
    10d2:	20 81       	ld	r18, Z
    10d4:	2e 7f       	andi	r18, 0xFE	; 254
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 83       	st	Z, r18
    10da:	87 e2       	ldi	r24, 0x27	; 39
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	27 e2       	ldi	r18, 0x27	; 39
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	f9 01       	movw	r30, r18
    10e4:	20 81       	ld	r18, Z
    10e6:	21 60       	ori	r18, 0x01	; 1
    10e8:	fc 01       	movw	r30, r24
    10ea:	20 83       	st	Z, r18
    10ec:	3c c0       	rjmp	.+120    	; 0x1166 <pcint8ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
    10ee:	88 e2       	ldi	r24, 0x28	; 40
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	28 e2       	ldi	r18, 0x28	; 40
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	f9 01       	movw	r30, r18
    10f8:	20 81       	ld	r18, Z
    10fa:	21 60       	ori	r18, 0x01	; 1
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 83       	st	Z, r18
    1100:	87 e2       	ldi	r24, 0x27	; 39
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	27 e2       	ldi	r18, 0x27	; 39
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	f9 01       	movw	r30, r18
    110a:	20 81       	ld	r18, Z
    110c:	21 60       	ori	r18, 0x01	; 1
    110e:	fc 01       	movw	r30, r24
    1110:	20 83       	st	Z, r18
    1112:	29 c0       	rjmp	.+82     	; 0x1166 <pcint8ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
    1114:	88 e2       	ldi	r24, 0x28	; 40
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	28 e2       	ldi	r18, 0x28	; 40
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	f9 01       	movw	r30, r18
    111e:	20 81       	ld	r18, Z
    1120:	2e 7f       	andi	r18, 0xFE	; 254
    1122:	fc 01       	movw	r30, r24
    1124:	20 83       	st	Z, r18
    1126:	87 e2       	ldi	r24, 0x27	; 39
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	27 e2       	ldi	r18, 0x27	; 39
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	f9 01       	movw	r30, r18
    1130:	20 81       	ld	r18, Z
    1132:	2e 7f       	andi	r18, 0xFE	; 254
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
    1138:	16 c0       	rjmp	.+44     	; 0x1166 <pcint8ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
    113a:	88 e2       	ldi	r24, 0x28	; 40
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	28 e2       	ldi	r18, 0x28	; 40
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	f9 01       	movw	r30, r18
    1144:	20 81       	ld	r18, Z
    1146:	21 60       	ori	r18, 0x01	; 1
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
    114c:	87 e2       	ldi	r24, 0x27	; 39
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	27 e2       	ldi	r18, 0x27	; 39
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	f9 01       	movw	r30, r18
    1156:	20 81       	ld	r18, Z
    1158:	2e 7f       	andi	r18, 0xFE	; 254
    115a:	fc 01       	movw	r30, r24
    115c:	20 83       	st	Z, r18
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <pcint8ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	0b c0       	rjmp	.+22     	; 0x117a <pcint8ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1164:	00 00       	nop
	}
	setBit(PCMSK1, PCINT8);
    1166:	8c e6       	ldi	r24, 0x6C	; 108
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	2c e6       	ldi	r18, 0x6C	; 108
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	f9 01       	movw	r30, r18
    1170:	20 81       	ld	r18, Z
    1172:	21 60       	ori	r18, 0x01	; 1
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
	return RESULT_OK;
    1178:	80 e0       	ldi	r24, 0x00	; 0
}
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <pcint8DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint8 in PC0
 * -------------------------------------------------------------------------- */

void pcint8DeactivateInterrupt(void)
{
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK1, PCINT8);
    118a:	8c e6       	ldi	r24, 0x6C	; 108
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	2c e6       	ldi	r18, 0x6C	; 108
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	f9 01       	movw	r30, r18
    1194:	20 81       	ld	r18, Z
    1196:	2e 7f       	andi	r18, 0xFE	; 254
    1198:	fc 01       	movw	r30, r24
    119a:	20 83       	st	Z, r18
	return;
    119c:	00 00       	nop
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <pcint9ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	1f 92       	push	r1
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	91 05       	cpc	r25, r1
    11ba:	b9 f1       	breq	.+110    	; 0x122a <pcint9ActivateInterrupt+0x86>
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	91 05       	cpc	r25, r1
    11c0:	2c f4       	brge	.+10     	; 0x11cc <pcint9ActivateInterrupt+0x28>
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	61 f0       	breq	.+24     	; 0x11de <pcint9ActivateInterrupt+0x3a>
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	e9 f0       	breq	.+58     	; 0x1204 <pcint9ActivateInterrupt+0x60>
    11ca:	55 c0       	rjmp	.+170    	; 0x1276 <pcint9ActivateInterrupt+0xd2>
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <pcint9ActivateInterrupt+0x30>
    11d2:	3e c0       	rjmp	.+124    	; 0x1250 <pcint9ActivateInterrupt+0xac>
    11d4:	8f 3f       	cpi	r24, 0xFF	; 255
    11d6:	91 05       	cpc	r25, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <pcint9ActivateInterrupt+0x38>
    11da:	4f c0       	rjmp	.+158    	; 0x127a <pcint9ActivateInterrupt+0xd6>
    11dc:	4c c0       	rjmp	.+152    	; 0x1276 <pcint9ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
    11de:	88 e2       	ldi	r24, 0x28	; 40
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	28 e2       	ldi	r18, 0x28	; 40
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	f9 01       	movw	r30, r18
    11e8:	20 81       	ld	r18, Z
    11ea:	2d 7f       	andi	r18, 0xFD	; 253
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
    11f0:	87 e2       	ldi	r24, 0x27	; 39
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	27 e2       	ldi	r18, 0x27	; 39
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	f9 01       	movw	r30, r18
    11fa:	20 81       	ld	r18, Z
    11fc:	22 60       	ori	r18, 0x02	; 2
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
    1202:	3c c0       	rjmp	.+120    	; 0x127c <pcint9ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
    1204:	88 e2       	ldi	r24, 0x28	; 40
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	28 e2       	ldi	r18, 0x28	; 40
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	f9 01       	movw	r30, r18
    120e:	20 81       	ld	r18, Z
    1210:	22 60       	ori	r18, 0x02	; 2
    1212:	fc 01       	movw	r30, r24
    1214:	20 83       	st	Z, r18
    1216:	87 e2       	ldi	r24, 0x27	; 39
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	27 e2       	ldi	r18, 0x27	; 39
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	f9 01       	movw	r30, r18
    1220:	20 81       	ld	r18, Z
    1222:	22 60       	ori	r18, 0x02	; 2
    1224:	fc 01       	movw	r30, r24
    1226:	20 83       	st	Z, r18
    1228:	29 c0       	rjmp	.+82     	; 0x127c <pcint9ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
    122a:	88 e2       	ldi	r24, 0x28	; 40
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	28 e2       	ldi	r18, 0x28	; 40
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	f9 01       	movw	r30, r18
    1234:	20 81       	ld	r18, Z
    1236:	2d 7f       	andi	r18, 0xFD	; 253
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
    123c:	87 e2       	ldi	r24, 0x27	; 39
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	27 e2       	ldi	r18, 0x27	; 39
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	f9 01       	movw	r30, r18
    1246:	20 81       	ld	r18, Z
    1248:	2d 7f       	andi	r18, 0xFD	; 253
    124a:	fc 01       	movw	r30, r24
    124c:	20 83       	st	Z, r18
    124e:	16 c0       	rjmp	.+44     	; 0x127c <pcint9ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
    1250:	88 e2       	ldi	r24, 0x28	; 40
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	28 e2       	ldi	r18, 0x28	; 40
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	f9 01       	movw	r30, r18
    125a:	20 81       	ld	r18, Z
    125c:	22 60       	ori	r18, 0x02	; 2
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
    1262:	87 e2       	ldi	r24, 0x27	; 39
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	27 e2       	ldi	r18, 0x27	; 39
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	f9 01       	movw	r30, r18
    126c:	20 81       	ld	r18, Z
    126e:	2d 7f       	andi	r18, 0xFD	; 253
    1270:	fc 01       	movw	r30, r24
    1272:	20 83       	st	Z, r18
    1274:	03 c0       	rjmp	.+6      	; 0x127c <pcint9ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <pcint9ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    127a:	00 00       	nop
	}
	setBit(PCMSK1, PCINT9);
    127c:	8c e6       	ldi	r24, 0x6C	; 108
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	2c e6       	ldi	r18, 0x6C	; 108
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	f9 01       	movw	r30, r18
    1286:	20 81       	ld	r18, Z
    1288:	22 60       	ori	r18, 0x02	; 2
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
	return RESULT_OK;
    128e:	80 e0       	ldi	r24, 0x00	; 0
}
    1290:	0f 90       	pop	r0
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <pcint9DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint9 in PC1
 * -------------------------------------------------------------------------- */

void pcint9DeactivateInterrupt(void)
{
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK1, PCINT9);
    12a0:	8c e6       	ldi	r24, 0x6C	; 108
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	2c e6       	ldi	r18, 0x6C	; 108
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	f9 01       	movw	r30, r18
    12aa:	20 81       	ld	r18, Z
    12ac:	2d 7f       	andi	r18, 0xFD	; 253
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
	return;
    12b2:	00 00       	nop
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <pcint10ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	1f 92       	push	r1
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	91 05       	cpc	r25, r1
    12d0:	b9 f1       	breq	.+110    	; 0x1340 <pcint10ActivateInterrupt+0x86>
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	91 05       	cpc	r25, r1
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <pcint10ActivateInterrupt+0x28>
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 f0       	breq	.+24     	; 0x12f4 <pcint10ActivateInterrupt+0x3a>
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	e9 f0       	breq	.+58     	; 0x131a <pcint10ActivateInterrupt+0x60>
    12e0:	55 c0       	rjmp	.+170    	; 0x138c <pcint10ActivateInterrupt+0xd2>
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <pcint10ActivateInterrupt+0x30>
    12e8:	3e c0       	rjmp	.+124    	; 0x1366 <pcint10ActivateInterrupt+0xac>
    12ea:	8f 3f       	cpi	r24, 0xFF	; 255
    12ec:	91 05       	cpc	r25, r1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <pcint10ActivateInterrupt+0x38>
    12f0:	4f c0       	rjmp	.+158    	; 0x1390 <pcint10ActivateInterrupt+0xd6>
    12f2:	4c c0       	rjmp	.+152    	; 0x138c <pcint10ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
    12f4:	88 e2       	ldi	r24, 0x28	; 40
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	28 e2       	ldi	r18, 0x28	; 40
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	f9 01       	movw	r30, r18
    12fe:	20 81       	ld	r18, Z
    1300:	2b 7f       	andi	r18, 0xFB	; 251
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18
    1306:	87 e2       	ldi	r24, 0x27	; 39
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	27 e2       	ldi	r18, 0x27	; 39
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	f9 01       	movw	r30, r18
    1310:	20 81       	ld	r18, Z
    1312:	24 60       	ori	r18, 0x04	; 4
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18
    1318:	3c c0       	rjmp	.+120    	; 0x1392 <pcint10ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
    131a:	88 e2       	ldi	r24, 0x28	; 40
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	28 e2       	ldi	r18, 0x28	; 40
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	f9 01       	movw	r30, r18
    1324:	20 81       	ld	r18, Z
    1326:	24 60       	ori	r18, 0x04	; 4
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
    132c:	87 e2       	ldi	r24, 0x27	; 39
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	27 e2       	ldi	r18, 0x27	; 39
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	f9 01       	movw	r30, r18
    1336:	20 81       	ld	r18, Z
    1338:	24 60       	ori	r18, 0x04	; 4
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
    133e:	29 c0       	rjmp	.+82     	; 0x1392 <pcint10ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
    1340:	88 e2       	ldi	r24, 0x28	; 40
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	28 e2       	ldi	r18, 0x28	; 40
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	f9 01       	movw	r30, r18
    134a:	20 81       	ld	r18, Z
    134c:	2b 7f       	andi	r18, 0xFB	; 251
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
    1352:	87 e2       	ldi	r24, 0x27	; 39
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	27 e2       	ldi	r18, 0x27	; 39
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	f9 01       	movw	r30, r18
    135c:	20 81       	ld	r18, Z
    135e:	2b 7f       	andi	r18, 0xFB	; 251
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <pcint10ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
    1366:	88 e2       	ldi	r24, 0x28	; 40
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	28 e2       	ldi	r18, 0x28	; 40
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	f9 01       	movw	r30, r18
    1370:	20 81       	ld	r18, Z
    1372:	24 60       	ori	r18, 0x04	; 4
    1374:	fc 01       	movw	r30, r24
    1376:	20 83       	st	Z, r18
    1378:	87 e2       	ldi	r24, 0x27	; 39
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	27 e2       	ldi	r18, 0x27	; 39
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	f9 01       	movw	r30, r18
    1382:	20 81       	ld	r18, Z
    1384:	2b 7f       	andi	r18, 0xFB	; 251
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <pcint10ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0b c0       	rjmp	.+22     	; 0x13a6 <pcint10ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1390:	00 00       	nop
	}
	setBit(PCMSK1, PCINT10);
    1392:	8c e6       	ldi	r24, 0x6C	; 108
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	2c e6       	ldi	r18, 0x6C	; 108
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	f9 01       	movw	r30, r18
    139c:	20 81       	ld	r18, Z
    139e:	24 60       	ori	r18, 0x04	; 4
    13a0:	fc 01       	movw	r30, r24
    13a2:	20 83       	st	Z, r18
	return RESULT_OK;
    13a4:	80 e0       	ldi	r24, 0x00	; 0
}
    13a6:	0f 90       	pop	r0
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <pcint10DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint10 in PC2
 * -------------------------------------------------------------------------- */

void pcint10DeactivateInterrupt(void)
{
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK1, PCINT10);
    13b6:	8c e6       	ldi	r24, 0x6C	; 108
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	2c e6       	ldi	r18, 0x6C	; 108
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	f9 01       	movw	r30, r18
    13c0:	20 81       	ld	r18, Z
    13c2:	2b 7f       	andi	r18, 0xFB	; 251
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
	return;
    13c8:	00 00       	nop
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <pcint11ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	1f 92       	push	r1
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	91 05       	cpc	r25, r1
    13e6:	b9 f1       	breq	.+110    	; 0x1456 <pcint11ActivateInterrupt+0x86>
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <pcint11ActivateInterrupt+0x28>
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	61 f0       	breq	.+24     	; 0x140a <pcint11ActivateInterrupt+0x3a>
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	e9 f0       	breq	.+58     	; 0x1430 <pcint11ActivateInterrupt+0x60>
    13f6:	55 c0       	rjmp	.+170    	; 0x14a2 <pcint11ActivateInterrupt+0xd2>
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <pcint11ActivateInterrupt+0x30>
    13fe:	3e c0       	rjmp	.+124    	; 0x147c <pcint11ActivateInterrupt+0xac>
    1400:	8f 3f       	cpi	r24, 0xFF	; 255
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <pcint11ActivateInterrupt+0x38>
    1406:	4f c0       	rjmp	.+158    	; 0x14a6 <pcint11ActivateInterrupt+0xd6>
    1408:	4c c0       	rjmp	.+152    	; 0x14a2 <pcint11ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
    140a:	88 e2       	ldi	r24, 0x28	; 40
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	28 e2       	ldi	r18, 0x28	; 40
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	f9 01       	movw	r30, r18
    1414:	20 81       	ld	r18, Z
    1416:	27 7f       	andi	r18, 0xF7	; 247
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
    141c:	87 e2       	ldi	r24, 0x27	; 39
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	27 e2       	ldi	r18, 0x27	; 39
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	f9 01       	movw	r30, r18
    1426:	20 81       	ld	r18, Z
    1428:	28 60       	ori	r18, 0x08	; 8
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18
    142e:	3c c0       	rjmp	.+120    	; 0x14a8 <pcint11ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
    1430:	88 e2       	ldi	r24, 0x28	; 40
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	28 e2       	ldi	r18, 0x28	; 40
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	f9 01       	movw	r30, r18
    143a:	20 81       	ld	r18, Z
    143c:	28 60       	ori	r18, 0x08	; 8
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
    1442:	87 e2       	ldi	r24, 0x27	; 39
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	27 e2       	ldi	r18, 0x27	; 39
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	f9 01       	movw	r30, r18
    144c:	20 81       	ld	r18, Z
    144e:	28 60       	ori	r18, 0x08	; 8
    1450:	fc 01       	movw	r30, r24
    1452:	20 83       	st	Z, r18
    1454:	29 c0       	rjmp	.+82     	; 0x14a8 <pcint11ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
    1456:	88 e2       	ldi	r24, 0x28	; 40
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	28 e2       	ldi	r18, 0x28	; 40
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	f9 01       	movw	r30, r18
    1460:	20 81       	ld	r18, Z
    1462:	27 7f       	andi	r18, 0xF7	; 247
    1464:	fc 01       	movw	r30, r24
    1466:	20 83       	st	Z, r18
    1468:	87 e2       	ldi	r24, 0x27	; 39
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	27 e2       	ldi	r18, 0x27	; 39
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	f9 01       	movw	r30, r18
    1472:	20 81       	ld	r18, Z
    1474:	27 7f       	andi	r18, 0xF7	; 247
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18
    147a:	16 c0       	rjmp	.+44     	; 0x14a8 <pcint11ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
    147c:	88 e2       	ldi	r24, 0x28	; 40
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	28 e2       	ldi	r18, 0x28	; 40
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	f9 01       	movw	r30, r18
    1486:	20 81       	ld	r18, Z
    1488:	28 60       	ori	r18, 0x08	; 8
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18
    148e:	87 e2       	ldi	r24, 0x27	; 39
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	27 e2       	ldi	r18, 0x27	; 39
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	27 7f       	andi	r18, 0xF7	; 247
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <pcint11ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	0b c0       	rjmp	.+22     	; 0x14bc <pcint11ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    14a6:	00 00       	nop
	}
	setBit(PCMSK1, PCINT11);
    14a8:	8c e6       	ldi	r24, 0x6C	; 108
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	2c e6       	ldi	r18, 0x6C	; 108
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	f9 01       	movw	r30, r18
    14b2:	20 81       	ld	r18, Z
    14b4:	28 60       	ori	r18, 0x08	; 8
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18
	return RESULT_OK;
    14ba:	80 e0       	ldi	r24, 0x00	; 0
}
    14bc:	0f 90       	pop	r0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <pcint11DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint11 in PC3
 * -------------------------------------------------------------------------- */

void pcint11DeactivateInterrupt(void)
{
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK1, PCINT11);
    14cc:	8c e6       	ldi	r24, 0x6C	; 108
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	2c e6       	ldi	r18, 0x6C	; 108
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	f9 01       	movw	r30, r18
    14d6:	20 81       	ld	r18, Z
    14d8:	27 7f       	andi	r18, 0xF7	; 247
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
	return;
    14de:	00 00       	nop
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <pcint12ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	1f 92       	push	r1
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	91 05       	cpc	r25, r1
    14fc:	b9 f1       	breq	.+110    	; 0x156c <pcint12ActivateInterrupt+0x86>
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	91 05       	cpc	r25, r1
    1502:	2c f4       	brge	.+10     	; 0x150e <pcint12ActivateInterrupt+0x28>
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	61 f0       	breq	.+24     	; 0x1520 <pcint12ActivateInterrupt+0x3a>
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	e9 f0       	breq	.+58     	; 0x1546 <pcint12ActivateInterrupt+0x60>
    150c:	55 c0       	rjmp	.+170    	; 0x15b8 <pcint12ActivateInterrupt+0xd2>
    150e:	83 30       	cpi	r24, 0x03	; 3
    1510:	91 05       	cpc	r25, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <pcint12ActivateInterrupt+0x30>
    1514:	3e c0       	rjmp	.+124    	; 0x1592 <pcint12ActivateInterrupt+0xac>
    1516:	8f 3f       	cpi	r24, 0xFF	; 255
    1518:	91 05       	cpc	r25, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <pcint12ActivateInterrupt+0x38>
    151c:	4f c0       	rjmp	.+158    	; 0x15bc <pcint12ActivateInterrupt+0xd6>
    151e:	4c c0       	rjmp	.+152    	; 0x15b8 <pcint12ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
    1520:	88 e2       	ldi	r24, 0x28	; 40
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	28 e2       	ldi	r18, 0x28	; 40
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	f9 01       	movw	r30, r18
    152a:	20 81       	ld	r18, Z
    152c:	2f 7e       	andi	r18, 0xEF	; 239
    152e:	fc 01       	movw	r30, r24
    1530:	20 83       	st	Z, r18
    1532:	87 e2       	ldi	r24, 0x27	; 39
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	27 e2       	ldi	r18, 0x27	; 39
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	f9 01       	movw	r30, r18
    153c:	20 81       	ld	r18, Z
    153e:	20 61       	ori	r18, 0x10	; 16
    1540:	fc 01       	movw	r30, r24
    1542:	20 83       	st	Z, r18
    1544:	3c c0       	rjmp	.+120    	; 0x15be <pcint12ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
    1546:	88 e2       	ldi	r24, 0x28	; 40
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	28 e2       	ldi	r18, 0x28	; 40
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	f9 01       	movw	r30, r18
    1550:	20 81       	ld	r18, Z
    1552:	20 61       	ori	r18, 0x10	; 16
    1554:	fc 01       	movw	r30, r24
    1556:	20 83       	st	Z, r18
    1558:	87 e2       	ldi	r24, 0x27	; 39
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	27 e2       	ldi	r18, 0x27	; 39
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	f9 01       	movw	r30, r18
    1562:	20 81       	ld	r18, Z
    1564:	20 61       	ori	r18, 0x10	; 16
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
    156a:	29 c0       	rjmp	.+82     	; 0x15be <pcint12ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
    156c:	88 e2       	ldi	r24, 0x28	; 40
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	28 e2       	ldi	r18, 0x28	; 40
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	f9 01       	movw	r30, r18
    1576:	20 81       	ld	r18, Z
    1578:	2f 7e       	andi	r18, 0xEF	; 239
    157a:	fc 01       	movw	r30, r24
    157c:	20 83       	st	Z, r18
    157e:	87 e2       	ldi	r24, 0x27	; 39
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	27 e2       	ldi	r18, 0x27	; 39
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	f9 01       	movw	r30, r18
    1588:	20 81       	ld	r18, Z
    158a:	2f 7e       	andi	r18, 0xEF	; 239
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18
    1590:	16 c0       	rjmp	.+44     	; 0x15be <pcint12ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
    1592:	88 e2       	ldi	r24, 0x28	; 40
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	28 e2       	ldi	r18, 0x28	; 40
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	20 81       	ld	r18, Z
    159e:	20 61       	ori	r18, 0x10	; 16
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
    15a4:	87 e2       	ldi	r24, 0x27	; 39
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	27 e2       	ldi	r18, 0x27	; 39
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	f9 01       	movw	r30, r18
    15ae:	20 81       	ld	r18, Z
    15b0:	2f 7e       	andi	r18, 0xEF	; 239
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <pcint12ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	0b c0       	rjmp	.+22     	; 0x15d2 <pcint12ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    15bc:	00 00       	nop
	}
	setBit(PCMSK1, PCINT12);
    15be:	8c e6       	ldi	r24, 0x6C	; 108
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	2c e6       	ldi	r18, 0x6C	; 108
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	f9 01       	movw	r30, r18
    15c8:	20 81       	ld	r18, Z
    15ca:	20 61       	ori	r18, 0x10	; 16
    15cc:	fc 01       	movw	r30, r24
    15ce:	20 83       	st	Z, r18
	return RESULT_OK;
    15d0:	80 e0       	ldi	r24, 0x00	; 0
}
    15d2:	0f 90       	pop	r0
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <pcint12DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint12 in PC4
 * -------------------------------------------------------------------------- */

void pcint12DeactivateInterrupt(void)
{
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK1, PCINT12);
    15e2:	8c e6       	ldi	r24, 0x6C	; 108
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	2c e6       	ldi	r18, 0x6C	; 108
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	f9 01       	movw	r30, r18
    15ec:	20 81       	ld	r18, Z
    15ee:	2f 7e       	andi	r18, 0xEF	; 239
    15f0:	fc 01       	movw	r30, r24
    15f2:	20 83       	st	Z, r18
	return;
    15f4:	00 00       	nop
}
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <pcint13ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	b9 f1       	breq	.+110    	; 0x1682 <pcint13ActivateInterrupt+0x86>
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	91 05       	cpc	r25, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <pcint13ActivateInterrupt+0x28>
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	61 f0       	breq	.+24     	; 0x1636 <pcint13ActivateInterrupt+0x3a>
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	e9 f0       	breq	.+58     	; 0x165c <pcint13ActivateInterrupt+0x60>
    1622:	55 c0       	rjmp	.+170    	; 0x16ce <pcint13ActivateInterrupt+0xd2>
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	91 05       	cpc	r25, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <pcint13ActivateInterrupt+0x30>
    162a:	3e c0       	rjmp	.+124    	; 0x16a8 <pcint13ActivateInterrupt+0xac>
    162c:	8f 3f       	cpi	r24, 0xFF	; 255
    162e:	91 05       	cpc	r25, r1
    1630:	09 f4       	brne	.+2      	; 0x1634 <pcint13ActivateInterrupt+0x38>
    1632:	4f c0       	rjmp	.+158    	; 0x16d2 <pcint13ActivateInterrupt+0xd6>
    1634:	4c c0       	rjmp	.+152    	; 0x16ce <pcint13ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
    1636:	88 e2       	ldi	r24, 0x28	; 40
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	28 e2       	ldi	r18, 0x28	; 40
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	f9 01       	movw	r30, r18
    1640:	20 81       	ld	r18, Z
    1642:	2f 7d       	andi	r18, 0xDF	; 223
    1644:	fc 01       	movw	r30, r24
    1646:	20 83       	st	Z, r18
    1648:	87 e2       	ldi	r24, 0x27	; 39
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	27 e2       	ldi	r18, 0x27	; 39
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	f9 01       	movw	r30, r18
    1652:	20 81       	ld	r18, Z
    1654:	20 62       	ori	r18, 0x20	; 32
    1656:	fc 01       	movw	r30, r24
    1658:	20 83       	st	Z, r18
    165a:	3c c0       	rjmp	.+120    	; 0x16d4 <pcint13ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
    165c:	88 e2       	ldi	r24, 0x28	; 40
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	28 e2       	ldi	r18, 0x28	; 40
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	f9 01       	movw	r30, r18
    1666:	20 81       	ld	r18, Z
    1668:	20 62       	ori	r18, 0x20	; 32
    166a:	fc 01       	movw	r30, r24
    166c:	20 83       	st	Z, r18
    166e:	87 e2       	ldi	r24, 0x27	; 39
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	27 e2       	ldi	r18, 0x27	; 39
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	f9 01       	movw	r30, r18
    1678:	20 81       	ld	r18, Z
    167a:	20 62       	ori	r18, 0x20	; 32
    167c:	fc 01       	movw	r30, r24
    167e:	20 83       	st	Z, r18
    1680:	29 c0       	rjmp	.+82     	; 0x16d4 <pcint13ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
    1682:	88 e2       	ldi	r24, 0x28	; 40
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	28 e2       	ldi	r18, 0x28	; 40
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	f9 01       	movw	r30, r18
    168c:	20 81       	ld	r18, Z
    168e:	2f 7d       	andi	r18, 0xDF	; 223
    1690:	fc 01       	movw	r30, r24
    1692:	20 83       	st	Z, r18
    1694:	87 e2       	ldi	r24, 0x27	; 39
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	27 e2       	ldi	r18, 0x27	; 39
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	f9 01       	movw	r30, r18
    169e:	20 81       	ld	r18, Z
    16a0:	2f 7d       	andi	r18, 0xDF	; 223
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18
    16a6:	16 c0       	rjmp	.+44     	; 0x16d4 <pcint13ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
    16a8:	88 e2       	ldi	r24, 0x28	; 40
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	28 e2       	ldi	r18, 0x28	; 40
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	f9 01       	movw	r30, r18
    16b2:	20 81       	ld	r18, Z
    16b4:	20 62       	ori	r18, 0x20	; 32
    16b6:	fc 01       	movw	r30, r24
    16b8:	20 83       	st	Z, r18
    16ba:	87 e2       	ldi	r24, 0x27	; 39
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	27 e2       	ldi	r18, 0x27	; 39
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	f9 01       	movw	r30, r18
    16c4:	20 81       	ld	r18, Z
    16c6:	2f 7d       	andi	r18, 0xDF	; 223
    16c8:	fc 01       	movw	r30, r24
    16ca:	20 83       	st	Z, r18
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <pcint13ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	0b c0       	rjmp	.+22     	; 0x16e8 <pcint13ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    16d2:	00 00       	nop
	}
	setBit(PCMSK1, PCINT13);
    16d4:	8c e6       	ldi	r24, 0x6C	; 108
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	2c e6       	ldi	r18, 0x6C	; 108
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	f9 01       	movw	r30, r18
    16de:	20 81       	ld	r18, Z
    16e0:	20 62       	ori	r18, 0x20	; 32
    16e2:	fc 01       	movw	r30, r24
    16e4:	20 83       	st	Z, r18
	return RESULT_OK;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
}
    16e8:	0f 90       	pop	r0
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <pcint13DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint13 in PC5
 * -------------------------------------------------------------------------- */

void pcint13DeactivateInterrupt(void)
{
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK1, PCINT13);
    16f8:	8c e6       	ldi	r24, 0x6C	; 108
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	2c e6       	ldi	r18, 0x6C	; 108
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	f9 01       	movw	r30, r18
    1702:	20 81       	ld	r18, Z
    1704:	2f 7d       	andi	r18, 0xDF	; 223
    1706:	fc 01       	movw	r30, r24
    1708:	20 83       	st	Z, r18
	return;
    170a:	00 00       	nop
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <pcint14ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	1f 92       	push	r1
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	91 05       	cpc	r25, r1
    1728:	b9 f1       	breq	.+110    	; 0x1798 <pcint14ActivateInterrupt+0x86>
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	2c f4       	brge	.+10     	; 0x173a <pcint14ActivateInterrupt+0x28>
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	61 f0       	breq	.+24     	; 0x174c <pcint14ActivateInterrupt+0x3a>
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	e9 f0       	breq	.+58     	; 0x1772 <pcint14ActivateInterrupt+0x60>
    1738:	55 c0       	rjmp	.+170    	; 0x17e4 <pcint14ActivateInterrupt+0xd2>
    173a:	83 30       	cpi	r24, 0x03	; 3
    173c:	91 05       	cpc	r25, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <pcint14ActivateInterrupt+0x30>
    1740:	3e c0       	rjmp	.+124    	; 0x17be <pcint14ActivateInterrupt+0xac>
    1742:	8f 3f       	cpi	r24, 0xFF	; 255
    1744:	91 05       	cpc	r25, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <pcint14ActivateInterrupt+0x38>
    1748:	4f c0       	rjmp	.+158    	; 0x17e8 <pcint14ActivateInterrupt+0xd6>
    174a:	4c c0       	rjmp	.+152    	; 0x17e4 <pcint14ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
    174c:	88 e2       	ldi	r24, 0x28	; 40
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	28 e2       	ldi	r18, 0x28	; 40
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	2f 7b       	andi	r18, 0xBF	; 191
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18
    175e:	87 e2       	ldi	r24, 0x27	; 39
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	27 e2       	ldi	r18, 0x27	; 39
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	20 64       	ori	r18, 0x40	; 64
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
    1770:	3c c0       	rjmp	.+120    	; 0x17ea <pcint14ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
    1772:	88 e2       	ldi	r24, 0x28	; 40
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	28 e2       	ldi	r18, 0x28	; 40
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	f9 01       	movw	r30, r18
    177c:	20 81       	ld	r18, Z
    177e:	20 64       	ori	r18, 0x40	; 64
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
    1784:	87 e2       	ldi	r24, 0x27	; 39
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	27 e2       	ldi	r18, 0x27	; 39
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	20 64       	ori	r18, 0x40	; 64
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18
    1796:	29 c0       	rjmp	.+82     	; 0x17ea <pcint14ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
    1798:	88 e2       	ldi	r24, 0x28	; 40
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	28 e2       	ldi	r18, 0x28	; 40
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	f9 01       	movw	r30, r18
    17a2:	20 81       	ld	r18, Z
    17a4:	2f 7b       	andi	r18, 0xBF	; 191
    17a6:	fc 01       	movw	r30, r24
    17a8:	20 83       	st	Z, r18
    17aa:	87 e2       	ldi	r24, 0x27	; 39
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	27 e2       	ldi	r18, 0x27	; 39
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	f9 01       	movw	r30, r18
    17b4:	20 81       	ld	r18, Z
    17b6:	2f 7b       	andi	r18, 0xBF	; 191
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
    17bc:	16 c0       	rjmp	.+44     	; 0x17ea <pcint14ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
    17be:	88 e2       	ldi	r24, 0x28	; 40
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	28 e2       	ldi	r18, 0x28	; 40
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	f9 01       	movw	r30, r18
    17c8:	20 81       	ld	r18, Z
    17ca:	20 64       	ori	r18, 0x40	; 64
    17cc:	fc 01       	movw	r30, r24
    17ce:	20 83       	st	Z, r18
    17d0:	87 e2       	ldi	r24, 0x27	; 39
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	27 e2       	ldi	r18, 0x27	; 39
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	f9 01       	movw	r30, r18
    17da:	20 81       	ld	r18, Z
    17dc:	2f 7b       	andi	r18, 0xBF	; 191
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <pcint14ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	0b c0       	rjmp	.+22     	; 0x17fe <pcint14ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    17e8:	00 00       	nop
	}
	setBit(PCMSK1, PCINT14);
    17ea:	8c e6       	ldi	r24, 0x6C	; 108
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	2c e6       	ldi	r18, 0x6C	; 108
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	f9 01       	movw	r30, r18
    17f4:	20 81       	ld	r18, Z
    17f6:	20 64       	ori	r18, 0x40	; 64
    17f8:	fc 01       	movw	r30, r24
    17fa:	20 83       	st	Z, r18
	return RESULT_OK;
    17fc:	80 e0       	ldi	r24, 0x00	; 0
}
    17fe:	0f 90       	pop	r0
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <pcint14DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint14 in PC6
 * -------------------------------------------------------------------------- */

void pcint14DeactivateInterrupt(void)
{
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK1, PCINT14);
    180e:	8c e6       	ldi	r24, 0x6C	; 108
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	2c e6       	ldi	r18, 0x6C	; 108
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	f9 01       	movw	r30, r18
    1818:	20 81       	ld	r18, Z
    181a:	2f 7b       	andi	r18, 0xBF	; 191
    181c:	fc 01       	movw	r30, r24
    181e:	20 83       	st	Z, r18
	return;
    1820:	00 00       	nop
}
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <pcint23_16Enable>:
/* -----------------------------------------------------------------------------
 * Enables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Enable(void)
{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
	setBit(PCICR, PCIE2);
    1830:	88 e6       	ldi	r24, 0x68	; 104
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	28 e6       	ldi	r18, 0x68	; 104
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	f9 01       	movw	r30, r18
    183a:	20 81       	ld	r18, Z
    183c:	24 60       	ori	r18, 0x04	; 4
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
	return;
    1842:	00 00       	nop
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <pcint23_16Disable>:
/* -----------------------------------------------------------------------------
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Disable(void)
{
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCICR, PCIE2);
    1852:	88 e6       	ldi	r24, 0x68	; 104
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	28 e6       	ldi	r18, 0x68	; 104
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	2b 7f       	andi	r18, 0xFB	; 251
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
	return;
    1864:	00 00       	nop
}
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <pcint23_16ClearInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16ClearInterruptRequest(void)
{
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	setBit(PCIFR, PCIF2);
    1874:	8b e3       	ldi	r24, 0x3B	; 59
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	2b e3       	ldi	r18, 0x3B	; 59
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	f9 01       	movw	r30, r18
    187e:	20 81       	ld	r18, Z
    1880:	24 60       	ori	r18, 0x04	; 4
    1882:	fc 01       	movw	r30, r24
    1884:	20 83       	st	Z, r18
	return;
    1886:	00 00       	nop
}
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <pcint16ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	1f 92       	push	r1
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	91 05       	cpc	r25, r1
    18a4:	b9 f1       	breq	.+110    	; 0x1914 <pcint16ActivateInterrupt+0x86>
    18a6:	83 30       	cpi	r24, 0x03	; 3
    18a8:	91 05       	cpc	r25, r1
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <pcint16ActivateInterrupt+0x28>
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <pcint16ActivateInterrupt+0x3a>
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	e9 f0       	breq	.+58     	; 0x18ee <pcint16ActivateInterrupt+0x60>
    18b4:	55 c0       	rjmp	.+170    	; 0x1960 <pcint16ActivateInterrupt+0xd2>
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <pcint16ActivateInterrupt+0x30>
    18bc:	3e c0       	rjmp	.+124    	; 0x193a <pcint16ActivateInterrupt+0xac>
    18be:	8f 3f       	cpi	r24, 0xFF	; 255
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <pcint16ActivateInterrupt+0x38>
    18c4:	4f c0       	rjmp	.+158    	; 0x1964 <pcint16ActivateInterrupt+0xd6>
    18c6:	4c c0       	rjmp	.+152    	; 0x1960 <pcint16ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
    18c8:	8b e2       	ldi	r24, 0x2B	; 43
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	2b e2       	ldi	r18, 0x2B	; 43
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	f9 01       	movw	r30, r18
    18d2:	20 81       	ld	r18, Z
    18d4:	2e 7f       	andi	r18, 0xFE	; 254
    18d6:	fc 01       	movw	r30, r24
    18d8:	20 83       	st	Z, r18
    18da:	8a e2       	ldi	r24, 0x2A	; 42
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	2a e2       	ldi	r18, 0x2A	; 42
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	f9 01       	movw	r30, r18
    18e4:	20 81       	ld	r18, Z
    18e6:	21 60       	ori	r18, 0x01	; 1
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 83       	st	Z, r18
    18ec:	3c c0       	rjmp	.+120    	; 0x1966 <pcint16ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
    18ee:	8b e2       	ldi	r24, 0x2B	; 43
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	2b e2       	ldi	r18, 0x2B	; 43
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	f9 01       	movw	r30, r18
    18f8:	20 81       	ld	r18, Z
    18fa:	21 60       	ori	r18, 0x01	; 1
    18fc:	fc 01       	movw	r30, r24
    18fe:	20 83       	st	Z, r18
    1900:	8a e2       	ldi	r24, 0x2A	; 42
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	2a e2       	ldi	r18, 0x2A	; 42
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	f9 01       	movw	r30, r18
    190a:	20 81       	ld	r18, Z
    190c:	21 60       	ori	r18, 0x01	; 1
    190e:	fc 01       	movw	r30, r24
    1910:	20 83       	st	Z, r18
    1912:	29 c0       	rjmp	.+82     	; 0x1966 <pcint16ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
    1914:	8b e2       	ldi	r24, 0x2B	; 43
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	2b e2       	ldi	r18, 0x2B	; 43
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	f9 01       	movw	r30, r18
    191e:	20 81       	ld	r18, Z
    1920:	2e 7f       	andi	r18, 0xFE	; 254
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
    1926:	8a e2       	ldi	r24, 0x2A	; 42
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	2a e2       	ldi	r18, 0x2A	; 42
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	f9 01       	movw	r30, r18
    1930:	20 81       	ld	r18, Z
    1932:	2e 7f       	andi	r18, 0xFE	; 254
    1934:	fc 01       	movw	r30, r24
    1936:	20 83       	st	Z, r18
    1938:	16 c0       	rjmp	.+44     	; 0x1966 <pcint16ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
    193a:	8b e2       	ldi	r24, 0x2B	; 43
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	2b e2       	ldi	r18, 0x2B	; 43
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	f9 01       	movw	r30, r18
    1944:	20 81       	ld	r18, Z
    1946:	21 60       	ori	r18, 0x01	; 1
    1948:	fc 01       	movw	r30, r24
    194a:	20 83       	st	Z, r18
    194c:	8a e2       	ldi	r24, 0x2A	; 42
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	2a e2       	ldi	r18, 0x2A	; 42
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	f9 01       	movw	r30, r18
    1956:	20 81       	ld	r18, Z
    1958:	2e 7f       	andi	r18, 0xFE	; 254
    195a:	fc 01       	movw	r30, r24
    195c:	20 83       	st	Z, r18
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <pcint16ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	0b c0       	rjmp	.+22     	; 0x197a <pcint16ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1964:	00 00       	nop
	}
	setBit(PCMSK2, PCINT16);
    1966:	8d e6       	ldi	r24, 0x6D	; 109
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	2d e6       	ldi	r18, 0x6D	; 109
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	f9 01       	movw	r30, r18
    1970:	20 81       	ld	r18, Z
    1972:	21 60       	ori	r18, 0x01	; 1
    1974:	fc 01       	movw	r30, r24
    1976:	20 83       	st	Z, r18
	return RESULT_OK;
    1978:	80 e0       	ldi	r24, 0x00	; 0
}
    197a:	0f 90       	pop	r0
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	08 95       	ret

00001982 <pcint16DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint16 in PD0
 * -------------------------------------------------------------------------- */

void pcint16DeactivateInterrupt(void)
{
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK2, PCINT16);
    198a:	8d e6       	ldi	r24, 0x6D	; 109
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	2d e6       	ldi	r18, 0x6D	; 109
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	f9 01       	movw	r30, r18
    1994:	20 81       	ld	r18, Z
    1996:	2e 7f       	andi	r18, 0xFE	; 254
    1998:	fc 01       	movw	r30, r24
    199a:	20 83       	st	Z, r18
	return;
    199c:	00 00       	nop
}
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <pcint17ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	1f 92       	push	r1
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	91 05       	cpc	r25, r1
    19ba:	b9 f1       	breq	.+110    	; 0x1a2a <pcint17ActivateInterrupt+0x86>
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	91 05       	cpc	r25, r1
    19c0:	2c f4       	brge	.+10     	; 0x19cc <pcint17ActivateInterrupt+0x28>
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	61 f0       	breq	.+24     	; 0x19de <pcint17ActivateInterrupt+0x3a>
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	e9 f0       	breq	.+58     	; 0x1a04 <pcint17ActivateInterrupt+0x60>
    19ca:	55 c0       	rjmp	.+170    	; 0x1a76 <pcint17ActivateInterrupt+0xd2>
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	91 05       	cpc	r25, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <pcint17ActivateInterrupt+0x30>
    19d2:	3e c0       	rjmp	.+124    	; 0x1a50 <pcint17ActivateInterrupt+0xac>
    19d4:	8f 3f       	cpi	r24, 0xFF	; 255
    19d6:	91 05       	cpc	r25, r1
    19d8:	09 f4       	brne	.+2      	; 0x19dc <pcint17ActivateInterrupt+0x38>
    19da:	4f c0       	rjmp	.+158    	; 0x1a7a <pcint17ActivateInterrupt+0xd6>
    19dc:	4c c0       	rjmp	.+152    	; 0x1a76 <pcint17ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
    19de:	8b e2       	ldi	r24, 0x2B	; 43
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	2b e2       	ldi	r18, 0x2B	; 43
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	f9 01       	movw	r30, r18
    19e8:	20 81       	ld	r18, Z
    19ea:	2d 7f       	andi	r18, 0xFD	; 253
    19ec:	fc 01       	movw	r30, r24
    19ee:	20 83       	st	Z, r18
    19f0:	8a e2       	ldi	r24, 0x2A	; 42
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	2a e2       	ldi	r18, 0x2A	; 42
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	f9 01       	movw	r30, r18
    19fa:	20 81       	ld	r18, Z
    19fc:	22 60       	ori	r18, 0x02	; 2
    19fe:	fc 01       	movw	r30, r24
    1a00:	20 83       	st	Z, r18
    1a02:	3c c0       	rjmp	.+120    	; 0x1a7c <pcint17ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
    1a04:	8b e2       	ldi	r24, 0x2B	; 43
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	2b e2       	ldi	r18, 0x2B	; 43
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	20 81       	ld	r18, Z
    1a10:	22 60       	ori	r18, 0x02	; 2
    1a12:	fc 01       	movw	r30, r24
    1a14:	20 83       	st	Z, r18
    1a16:	8a e2       	ldi	r24, 0x2A	; 42
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	2a e2       	ldi	r18, 0x2A	; 42
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	f9 01       	movw	r30, r18
    1a20:	20 81       	ld	r18, Z
    1a22:	22 60       	ori	r18, 0x02	; 2
    1a24:	fc 01       	movw	r30, r24
    1a26:	20 83       	st	Z, r18
    1a28:	29 c0       	rjmp	.+82     	; 0x1a7c <pcint17ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
    1a2a:	8b e2       	ldi	r24, 0x2B	; 43
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	2b e2       	ldi	r18, 0x2B	; 43
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	f9 01       	movw	r30, r18
    1a34:	20 81       	ld	r18, Z
    1a36:	2d 7f       	andi	r18, 0xFD	; 253
    1a38:	fc 01       	movw	r30, r24
    1a3a:	20 83       	st	Z, r18
    1a3c:	8a e2       	ldi	r24, 0x2A	; 42
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	2a e2       	ldi	r18, 0x2A	; 42
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	f9 01       	movw	r30, r18
    1a46:	20 81       	ld	r18, Z
    1a48:	2d 7f       	andi	r18, 0xFD	; 253
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	20 83       	st	Z, r18
    1a4e:	16 c0       	rjmp	.+44     	; 0x1a7c <pcint17ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
    1a50:	8b e2       	ldi	r24, 0x2B	; 43
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	2b e2       	ldi	r18, 0x2B	; 43
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	f9 01       	movw	r30, r18
    1a5a:	20 81       	ld	r18, Z
    1a5c:	22 60       	ori	r18, 0x02	; 2
    1a5e:	fc 01       	movw	r30, r24
    1a60:	20 83       	st	Z, r18
    1a62:	8a e2       	ldi	r24, 0x2A	; 42
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	2a e2       	ldi	r18, 0x2A	; 42
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	20 81       	ld	r18, Z
    1a6e:	2d 7f       	andi	r18, 0xFD	; 253
    1a70:	fc 01       	movw	r30, r24
    1a72:	20 83       	st	Z, r18
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <pcint17ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	0b c0       	rjmp	.+22     	; 0x1a90 <pcint17ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1a7a:	00 00       	nop
	}
	setBit(PCMSK2, PCINT17);
    1a7c:	8d e6       	ldi	r24, 0x6D	; 109
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	2d e6       	ldi	r18, 0x6D	; 109
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	f9 01       	movw	r30, r18
    1a86:	20 81       	ld	r18, Z
    1a88:	22 60       	ori	r18, 0x02	; 2
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	20 83       	st	Z, r18
	return RESULT_OK;
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <pcint17DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint17 in PD1
 * -------------------------------------------------------------------------- */

void pcint17DeactivateInterrupt(void)
{
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK2, PCINT17);
    1aa0:	8d e6       	ldi	r24, 0x6D	; 109
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	2d e6       	ldi	r18, 0x6D	; 109
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	20 81       	ld	r18, Z
    1aac:	2d 7f       	andi	r18, 0xFD	; 253
    1aae:	fc 01       	movw	r30, r24
    1ab0:	20 83       	st	Z, r18
	return;
    1ab2:	00 00       	nop
}
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <pcint18ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	1f 92       	push	r1
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	91 05       	cpc	r25, r1
    1ad0:	b9 f1       	breq	.+110    	; 0x1b40 <pcint18ActivateInterrupt+0x86>
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <pcint18ActivateInterrupt+0x28>
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	61 f0       	breq	.+24     	; 0x1af4 <pcint18ActivateInterrupt+0x3a>
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	e9 f0       	breq	.+58     	; 0x1b1a <pcint18ActivateInterrupt+0x60>
    1ae0:	55 c0       	rjmp	.+170    	; 0x1b8c <pcint18ActivateInterrupt+0xd2>
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <pcint18ActivateInterrupt+0x30>
    1ae8:	3e c0       	rjmp	.+124    	; 0x1b66 <pcint18ActivateInterrupt+0xac>
    1aea:	8f 3f       	cpi	r24, 0xFF	; 255
    1aec:	91 05       	cpc	r25, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <pcint18ActivateInterrupt+0x38>
    1af0:	4f c0       	rjmp	.+158    	; 0x1b90 <pcint18ActivateInterrupt+0xd6>
    1af2:	4c c0       	rjmp	.+152    	; 0x1b8c <pcint18ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
    1af4:	8b e2       	ldi	r24, 0x2B	; 43
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	2b e2       	ldi	r18, 0x2B	; 43
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	f9 01       	movw	r30, r18
    1afe:	20 81       	ld	r18, Z
    1b00:	2b 7f       	andi	r18, 0xFB	; 251
    1b02:	fc 01       	movw	r30, r24
    1b04:	20 83       	st	Z, r18
    1b06:	8a e2       	ldi	r24, 0x2A	; 42
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	2a e2       	ldi	r18, 0x2A	; 42
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	f9 01       	movw	r30, r18
    1b10:	20 81       	ld	r18, Z
    1b12:	24 60       	ori	r18, 0x04	; 4
    1b14:	fc 01       	movw	r30, r24
    1b16:	20 83       	st	Z, r18
    1b18:	3c c0       	rjmp	.+120    	; 0x1b92 <pcint18ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
    1b1a:	8b e2       	ldi	r24, 0x2B	; 43
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	2b e2       	ldi	r18, 0x2B	; 43
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	f9 01       	movw	r30, r18
    1b24:	20 81       	ld	r18, Z
    1b26:	24 60       	ori	r18, 0x04	; 4
    1b28:	fc 01       	movw	r30, r24
    1b2a:	20 83       	st	Z, r18
    1b2c:	8a e2       	ldi	r24, 0x2A	; 42
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	2a e2       	ldi	r18, 0x2A	; 42
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	f9 01       	movw	r30, r18
    1b36:	20 81       	ld	r18, Z
    1b38:	24 60       	ori	r18, 0x04	; 4
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	20 83       	st	Z, r18
    1b3e:	29 c0       	rjmp	.+82     	; 0x1b92 <pcint18ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
    1b40:	8b e2       	ldi	r24, 0x2B	; 43
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	2b e2       	ldi	r18, 0x2B	; 43
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	f9 01       	movw	r30, r18
    1b4a:	20 81       	ld	r18, Z
    1b4c:	2b 7f       	andi	r18, 0xFB	; 251
    1b4e:	fc 01       	movw	r30, r24
    1b50:	20 83       	st	Z, r18
    1b52:	8a e2       	ldi	r24, 0x2A	; 42
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	2a e2       	ldi	r18, 0x2A	; 42
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	f9 01       	movw	r30, r18
    1b5c:	20 81       	ld	r18, Z
    1b5e:	2b 7f       	andi	r18, 0xFB	; 251
    1b60:	fc 01       	movw	r30, r24
    1b62:	20 83       	st	Z, r18
    1b64:	16 c0       	rjmp	.+44     	; 0x1b92 <pcint18ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
    1b66:	8b e2       	ldi	r24, 0x2B	; 43
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	2b e2       	ldi	r18, 0x2B	; 43
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	f9 01       	movw	r30, r18
    1b70:	20 81       	ld	r18, Z
    1b72:	24 60       	ori	r18, 0x04	; 4
    1b74:	fc 01       	movw	r30, r24
    1b76:	20 83       	st	Z, r18
    1b78:	8a e2       	ldi	r24, 0x2A	; 42
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	2a e2       	ldi	r18, 0x2A	; 42
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	f9 01       	movw	r30, r18
    1b82:	20 81       	ld	r18, Z
    1b84:	2b 7f       	andi	r18, 0xFB	; 251
    1b86:	fc 01       	movw	r30, r24
    1b88:	20 83       	st	Z, r18
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <pcint18ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <pcint18ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1b90:	00 00       	nop
	}
	setBit(PCMSK2, PCINT18);
    1b92:	8d e6       	ldi	r24, 0x6D	; 109
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	2d e6       	ldi	r18, 0x6D	; 109
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	20 81       	ld	r18, Z
    1b9e:	24 60       	ori	r18, 0x04	; 4
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	20 83       	st	Z, r18
	return RESULT_OK;
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
}
    1ba6:	0f 90       	pop	r0
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <pcint18DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint18 in PD2
 * -------------------------------------------------------------------------- */

void pcint18DeactivateInterrupt(void)
{
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK2, PCINT18);
    1bb6:	8d e6       	ldi	r24, 0x6D	; 109
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	2d e6       	ldi	r18, 0x6D	; 109
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	f9 01       	movw	r30, r18
    1bc0:	20 81       	ld	r18, Z
    1bc2:	2b 7f       	andi	r18, 0xFB	; 251
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	20 83       	st	Z, r18
	return;
    1bc8:	00 00       	nop
}
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	08 95       	ret

00001bd0 <pcint19ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	1f 92       	push	r1
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	91 05       	cpc	r25, r1
    1be6:	b9 f1       	breq	.+110    	; 0x1c56 <pcint19ActivateInterrupt+0x86>
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <pcint19ActivateInterrupt+0x28>
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	61 f0       	breq	.+24     	; 0x1c0a <pcint19ActivateInterrupt+0x3a>
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	e9 f0       	breq	.+58     	; 0x1c30 <pcint19ActivateInterrupt+0x60>
    1bf6:	55 c0       	rjmp	.+170    	; 0x1ca2 <pcint19ActivateInterrupt+0xd2>
    1bf8:	83 30       	cpi	r24, 0x03	; 3
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <pcint19ActivateInterrupt+0x30>
    1bfe:	3e c0       	rjmp	.+124    	; 0x1c7c <pcint19ActivateInterrupt+0xac>
    1c00:	8f 3f       	cpi	r24, 0xFF	; 255
    1c02:	91 05       	cpc	r25, r1
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <pcint19ActivateInterrupt+0x38>
    1c06:	4f c0       	rjmp	.+158    	; 0x1ca6 <pcint19ActivateInterrupt+0xd6>
    1c08:	4c c0       	rjmp	.+152    	; 0x1ca2 <pcint19ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
    1c0a:	8b e2       	ldi	r24, 0x2B	; 43
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	2b e2       	ldi	r18, 0x2B	; 43
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	f9 01       	movw	r30, r18
    1c14:	20 81       	ld	r18, Z
    1c16:	27 7f       	andi	r18, 0xF7	; 247
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18
    1c1c:	8a e2       	ldi	r24, 0x2A	; 42
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	2a e2       	ldi	r18, 0x2A	; 42
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	f9 01       	movw	r30, r18
    1c26:	20 81       	ld	r18, Z
    1c28:	28 60       	ori	r18, 0x08	; 8
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	20 83       	st	Z, r18
    1c2e:	3c c0       	rjmp	.+120    	; 0x1ca8 <pcint19ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
    1c30:	8b e2       	ldi	r24, 0x2B	; 43
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	2b e2       	ldi	r18, 0x2B	; 43
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	f9 01       	movw	r30, r18
    1c3a:	20 81       	ld	r18, Z
    1c3c:	28 60       	ori	r18, 0x08	; 8
    1c3e:	fc 01       	movw	r30, r24
    1c40:	20 83       	st	Z, r18
    1c42:	8a e2       	ldi	r24, 0x2A	; 42
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	2a e2       	ldi	r18, 0x2A	; 42
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	20 81       	ld	r18, Z
    1c4e:	28 60       	ori	r18, 0x08	; 8
    1c50:	fc 01       	movw	r30, r24
    1c52:	20 83       	st	Z, r18
    1c54:	29 c0       	rjmp	.+82     	; 0x1ca8 <pcint19ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
    1c56:	8b e2       	ldi	r24, 0x2B	; 43
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	2b e2       	ldi	r18, 0x2B	; 43
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	f9 01       	movw	r30, r18
    1c60:	20 81       	ld	r18, Z
    1c62:	27 7f       	andi	r18, 0xF7	; 247
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18
    1c68:	8a e2       	ldi	r24, 0x2A	; 42
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	2a e2       	ldi	r18, 0x2A	; 42
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	f9 01       	movw	r30, r18
    1c72:	20 81       	ld	r18, Z
    1c74:	27 7f       	andi	r18, 0xF7	; 247
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 83       	st	Z, r18
    1c7a:	16 c0       	rjmp	.+44     	; 0x1ca8 <pcint19ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
    1c7c:	8b e2       	ldi	r24, 0x2B	; 43
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	2b e2       	ldi	r18, 0x2B	; 43
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	f9 01       	movw	r30, r18
    1c86:	20 81       	ld	r18, Z
    1c88:	28 60       	ori	r18, 0x08	; 8
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	20 83       	st	Z, r18
    1c8e:	8a e2       	ldi	r24, 0x2A	; 42
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	2a e2       	ldi	r18, 0x2A	; 42
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	f9 01       	movw	r30, r18
    1c98:	20 81       	ld	r18, Z
    1c9a:	27 7f       	andi	r18, 0xF7	; 247
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <pcint19ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	0b c0       	rjmp	.+22     	; 0x1cbc <pcint19ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1ca6:	00 00       	nop
	}
	setBit(PCMSK2, PCINT19);
    1ca8:	8d e6       	ldi	r24, 0x6D	; 109
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	2d e6       	ldi	r18, 0x6D	; 109
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	20 81       	ld	r18, Z
    1cb4:	28 60       	ori	r18, 0x08	; 8
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	20 83       	st	Z, r18
	return RESULT_OK;
    1cba:	80 e0       	ldi	r24, 0x00	; 0
}
    1cbc:	0f 90       	pop	r0
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <pcint19DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint19 in PD3
 * -------------------------------------------------------------------------- */

void pcint19DeactivateInterrupt(void)
{
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK2, PCINT19);
    1ccc:	8d e6       	ldi	r24, 0x6D	; 109
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	2d e6       	ldi	r18, 0x6D	; 109
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	f9 01       	movw	r30, r18
    1cd6:	20 81       	ld	r18, Z
    1cd8:	27 7f       	andi	r18, 0xF7	; 247
    1cda:	fc 01       	movw	r30, r24
    1cdc:	20 83       	st	Z, r18
	return;
    1cde:	00 00       	nop
}
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	08 95       	ret

00001ce6 <pcint20ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	1f 92       	push	r1
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	82 30       	cpi	r24, 0x02	; 2
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	b9 f1       	breq	.+110    	; 0x1d6c <pcint20ActivateInterrupt+0x86>
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	91 05       	cpc	r25, r1
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <pcint20ActivateInterrupt+0x28>
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	61 f0       	breq	.+24     	; 0x1d20 <pcint20ActivateInterrupt+0x3a>
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	e9 f0       	breq	.+58     	; 0x1d46 <pcint20ActivateInterrupt+0x60>
    1d0c:	55 c0       	rjmp	.+170    	; 0x1db8 <pcint20ActivateInterrupt+0xd2>
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <pcint20ActivateInterrupt+0x30>
    1d14:	3e c0       	rjmp	.+124    	; 0x1d92 <pcint20ActivateInterrupt+0xac>
    1d16:	8f 3f       	cpi	r24, 0xFF	; 255
    1d18:	91 05       	cpc	r25, r1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <pcint20ActivateInterrupt+0x38>
    1d1c:	4f c0       	rjmp	.+158    	; 0x1dbc <pcint20ActivateInterrupt+0xd6>
    1d1e:	4c c0       	rjmp	.+152    	; 0x1db8 <pcint20ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
    1d20:	8b e2       	ldi	r24, 0x2B	; 43
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	2b e2       	ldi	r18, 0x2B	; 43
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	f9 01       	movw	r30, r18
    1d2a:	20 81       	ld	r18, Z
    1d2c:	2f 7e       	andi	r18, 0xEF	; 239
    1d2e:	fc 01       	movw	r30, r24
    1d30:	20 83       	st	Z, r18
    1d32:	8a e2       	ldi	r24, 0x2A	; 42
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	2a e2       	ldi	r18, 0x2A	; 42
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	f9 01       	movw	r30, r18
    1d3c:	20 81       	ld	r18, Z
    1d3e:	20 61       	ori	r18, 0x10	; 16
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
    1d44:	3c c0       	rjmp	.+120    	; 0x1dbe <pcint20ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
    1d46:	8b e2       	ldi	r24, 0x2B	; 43
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	2b e2       	ldi	r18, 0x2B	; 43
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	f9 01       	movw	r30, r18
    1d50:	20 81       	ld	r18, Z
    1d52:	20 61       	ori	r18, 0x10	; 16
    1d54:	fc 01       	movw	r30, r24
    1d56:	20 83       	st	Z, r18
    1d58:	8a e2       	ldi	r24, 0x2A	; 42
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	2a e2       	ldi	r18, 0x2A	; 42
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	f9 01       	movw	r30, r18
    1d62:	20 81       	ld	r18, Z
    1d64:	20 61       	ori	r18, 0x10	; 16
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 83       	st	Z, r18
    1d6a:	29 c0       	rjmp	.+82     	; 0x1dbe <pcint20ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
    1d6c:	8b e2       	ldi	r24, 0x2B	; 43
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	2b e2       	ldi	r18, 0x2B	; 43
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	f9 01       	movw	r30, r18
    1d76:	20 81       	ld	r18, Z
    1d78:	2f 7e       	andi	r18, 0xEF	; 239
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	20 83       	st	Z, r18
    1d7e:	8a e2       	ldi	r24, 0x2A	; 42
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	2a e2       	ldi	r18, 0x2A	; 42
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	f9 01       	movw	r30, r18
    1d88:	20 81       	ld	r18, Z
    1d8a:	2f 7e       	andi	r18, 0xEF	; 239
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	20 83       	st	Z, r18
    1d90:	16 c0       	rjmp	.+44     	; 0x1dbe <pcint20ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
    1d92:	8b e2       	ldi	r24, 0x2B	; 43
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	2b e2       	ldi	r18, 0x2B	; 43
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	f9 01       	movw	r30, r18
    1d9c:	20 81       	ld	r18, Z
    1d9e:	20 61       	ori	r18, 0x10	; 16
    1da0:	fc 01       	movw	r30, r24
    1da2:	20 83       	st	Z, r18
    1da4:	8a e2       	ldi	r24, 0x2A	; 42
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	2a e2       	ldi	r18, 0x2A	; 42
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	f9 01       	movw	r30, r18
    1dae:	20 81       	ld	r18, Z
    1db0:	2f 7e       	andi	r18, 0xEF	; 239
    1db2:	fc 01       	movw	r30, r24
    1db4:	20 83       	st	Z, r18
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <pcint20ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	0b c0       	rjmp	.+22     	; 0x1dd2 <pcint20ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1dbc:	00 00       	nop
	}
	setBit(PCMSK2, PCINT20);
    1dbe:	8d e6       	ldi	r24, 0x6D	; 109
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	2d e6       	ldi	r18, 0x6D	; 109
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	f9 01       	movw	r30, r18
    1dc8:	20 81       	ld	r18, Z
    1dca:	20 61       	ori	r18, 0x10	; 16
    1dcc:	fc 01       	movw	r30, r24
    1dce:	20 83       	st	Z, r18
	return RESULT_OK;
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
}
    1dd2:	0f 90       	pop	r0
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret

00001dda <pcint20DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint20 in PD4
 * -------------------------------------------------------------------------- */

void pcint20DeactivateInterrupt(void)
{
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK2, PCINT20);
    1de2:	8d e6       	ldi	r24, 0x6D	; 109
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	2d e6       	ldi	r18, 0x6D	; 109
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	f9 01       	movw	r30, r18
    1dec:	20 81       	ld	r18, Z
    1dee:	2f 7e       	andi	r18, 0xEF	; 239
    1df0:	fc 01       	movw	r30, r24
    1df2:	20 83       	st	Z, r18
	return;
    1df4:	00 00       	nop
}
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <pcint21ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	1f 92       	push	r1
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	91 05       	cpc	r25, r1
    1e12:	b9 f1       	breq	.+110    	; 0x1e82 <pcint21ActivateInterrupt+0x86>
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	91 05       	cpc	r25, r1
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <pcint21ActivateInterrupt+0x28>
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	61 f0       	breq	.+24     	; 0x1e36 <pcint21ActivateInterrupt+0x3a>
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	e9 f0       	breq	.+58     	; 0x1e5c <pcint21ActivateInterrupt+0x60>
    1e22:	55 c0       	rjmp	.+170    	; 0x1ece <pcint21ActivateInterrupt+0xd2>
    1e24:	83 30       	cpi	r24, 0x03	; 3
    1e26:	91 05       	cpc	r25, r1
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <pcint21ActivateInterrupt+0x30>
    1e2a:	3e c0       	rjmp	.+124    	; 0x1ea8 <pcint21ActivateInterrupt+0xac>
    1e2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e2e:	91 05       	cpc	r25, r1
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <pcint21ActivateInterrupt+0x38>
    1e32:	4f c0       	rjmp	.+158    	; 0x1ed2 <pcint21ActivateInterrupt+0xd6>
    1e34:	4c c0       	rjmp	.+152    	; 0x1ece <pcint21ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
    1e36:	8b e2       	ldi	r24, 0x2B	; 43
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	2b e2       	ldi	r18, 0x2B	; 43
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	f9 01       	movw	r30, r18
    1e40:	20 81       	ld	r18, Z
    1e42:	2f 7d       	andi	r18, 0xDF	; 223
    1e44:	fc 01       	movw	r30, r24
    1e46:	20 83       	st	Z, r18
    1e48:	8a e2       	ldi	r24, 0x2A	; 42
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	2a e2       	ldi	r18, 0x2A	; 42
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	f9 01       	movw	r30, r18
    1e52:	20 81       	ld	r18, Z
    1e54:	20 62       	ori	r18, 0x20	; 32
    1e56:	fc 01       	movw	r30, r24
    1e58:	20 83       	st	Z, r18
    1e5a:	3c c0       	rjmp	.+120    	; 0x1ed4 <pcint21ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
    1e5c:	8b e2       	ldi	r24, 0x2B	; 43
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	2b e2       	ldi	r18, 0x2B	; 43
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	f9 01       	movw	r30, r18
    1e66:	20 81       	ld	r18, Z
    1e68:	20 62       	ori	r18, 0x20	; 32
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	20 83       	st	Z, r18
    1e6e:	8a e2       	ldi	r24, 0x2A	; 42
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	2a e2       	ldi	r18, 0x2A	; 42
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	f9 01       	movw	r30, r18
    1e78:	20 81       	ld	r18, Z
    1e7a:	20 62       	ori	r18, 0x20	; 32
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	20 83       	st	Z, r18
    1e80:	29 c0       	rjmp	.+82     	; 0x1ed4 <pcint21ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
    1e82:	8b e2       	ldi	r24, 0x2B	; 43
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	2b e2       	ldi	r18, 0x2B	; 43
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	f9 01       	movw	r30, r18
    1e8c:	20 81       	ld	r18, Z
    1e8e:	2f 7d       	andi	r18, 0xDF	; 223
    1e90:	fc 01       	movw	r30, r24
    1e92:	20 83       	st	Z, r18
    1e94:	8a e2       	ldi	r24, 0x2A	; 42
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	2a e2       	ldi	r18, 0x2A	; 42
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	f9 01       	movw	r30, r18
    1e9e:	20 81       	ld	r18, Z
    1ea0:	2f 7d       	andi	r18, 0xDF	; 223
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 83       	st	Z, r18
    1ea6:	16 c0       	rjmp	.+44     	; 0x1ed4 <pcint21ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
    1ea8:	8b e2       	ldi	r24, 0x2B	; 43
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	2b e2       	ldi	r18, 0x2B	; 43
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	f9 01       	movw	r30, r18
    1eb2:	20 81       	ld	r18, Z
    1eb4:	20 62       	ori	r18, 0x20	; 32
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	20 83       	st	Z, r18
    1eba:	8a e2       	ldi	r24, 0x2A	; 42
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	2a e2       	ldi	r18, 0x2A	; 42
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	f9 01       	movw	r30, r18
    1ec4:	20 81       	ld	r18, Z
    1ec6:	2f 7d       	andi	r18, 0xDF	; 223
    1ec8:	fc 01       	movw	r30, r24
    1eca:	20 83       	st	Z, r18
    1ecc:	03 c0       	rjmp	.+6      	; 0x1ed4 <pcint21ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	0b c0       	rjmp	.+22     	; 0x1ee8 <pcint21ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1ed2:	00 00       	nop
	}
	setBit(PCMSK2, PCINT21);
    1ed4:	8d e6       	ldi	r24, 0x6D	; 109
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	2d e6       	ldi	r18, 0x6D	; 109
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	f9 01       	movw	r30, r18
    1ede:	20 81       	ld	r18, Z
    1ee0:	20 62       	ori	r18, 0x20	; 32
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	20 83       	st	Z, r18
	return RESULT_OK;
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ee8:	0f 90       	pop	r0
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <pcint21DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint21 in PD5
 * -------------------------------------------------------------------------- */

void pcint21DeactivateInterrupt(void)
{
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK2, PCINT21);
    1ef8:	8d e6       	ldi	r24, 0x6D	; 109
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	2d e6       	ldi	r18, 0x6D	; 109
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	f9 01       	movw	r30, r18
    1f02:	20 81       	ld	r18, Z
    1f04:	2f 7d       	andi	r18, 0xDF	; 223
    1f06:	fc 01       	movw	r30, r24
    1f08:	20 83       	st	Z, r18
	return;
    1f0a:	00 00       	nop
}
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <pcint22ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	1f 92       	push	r1
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	88 2f       	mov	r24, r24
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	91 05       	cpc	r25, r1
    1f28:	b9 f1       	breq	.+110    	; 0x1f98 <pcint22ActivateInterrupt+0x86>
    1f2a:	83 30       	cpi	r24, 0x03	; 3
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <pcint22ActivateInterrupt+0x28>
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <pcint22ActivateInterrupt+0x3a>
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	e9 f0       	breq	.+58     	; 0x1f72 <pcint22ActivateInterrupt+0x60>
    1f38:	55 c0       	rjmp	.+170    	; 0x1fe4 <pcint22ActivateInterrupt+0xd2>
    1f3a:	83 30       	cpi	r24, 0x03	; 3
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <pcint22ActivateInterrupt+0x30>
    1f40:	3e c0       	rjmp	.+124    	; 0x1fbe <pcint22ActivateInterrupt+0xac>
    1f42:	8f 3f       	cpi	r24, 0xFF	; 255
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <pcint22ActivateInterrupt+0x38>
    1f48:	4f c0       	rjmp	.+158    	; 0x1fe8 <pcint22ActivateInterrupt+0xd6>
    1f4a:	4c c0       	rjmp	.+152    	; 0x1fe4 <pcint22ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
    1f4c:	8b e2       	ldi	r24, 0x2B	; 43
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	2b e2       	ldi	r18, 0x2B	; 43
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	f9 01       	movw	r30, r18
    1f56:	20 81       	ld	r18, Z
    1f58:	2f 7b       	andi	r18, 0xBF	; 191
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	20 83       	st	Z, r18
    1f5e:	8a e2       	ldi	r24, 0x2A	; 42
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	2a e2       	ldi	r18, 0x2A	; 42
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	f9 01       	movw	r30, r18
    1f68:	20 81       	ld	r18, Z
    1f6a:	20 64       	ori	r18, 0x40	; 64
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	20 83       	st	Z, r18
    1f70:	3c c0       	rjmp	.+120    	; 0x1fea <pcint22ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
    1f72:	8b e2       	ldi	r24, 0x2B	; 43
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	2b e2       	ldi	r18, 0x2B	; 43
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	20 81       	ld	r18, Z
    1f7e:	20 64       	ori	r18, 0x40	; 64
    1f80:	fc 01       	movw	r30, r24
    1f82:	20 83       	st	Z, r18
    1f84:	8a e2       	ldi	r24, 0x2A	; 42
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	2a e2       	ldi	r18, 0x2A	; 42
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	20 81       	ld	r18, Z
    1f90:	20 64       	ori	r18, 0x40	; 64
    1f92:	fc 01       	movw	r30, r24
    1f94:	20 83       	st	Z, r18
    1f96:	29 c0       	rjmp	.+82     	; 0x1fea <pcint22ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
    1f98:	8b e2       	ldi	r24, 0x2B	; 43
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	2b e2       	ldi	r18, 0x2B	; 43
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	f9 01       	movw	r30, r18
    1fa2:	20 81       	ld	r18, Z
    1fa4:	2f 7b       	andi	r18, 0xBF	; 191
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	20 83       	st	Z, r18
    1faa:	8a e2       	ldi	r24, 0x2A	; 42
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	2a e2       	ldi	r18, 0x2A	; 42
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	f9 01       	movw	r30, r18
    1fb4:	20 81       	ld	r18, Z
    1fb6:	2f 7b       	andi	r18, 0xBF	; 191
    1fb8:	fc 01       	movw	r30, r24
    1fba:	20 83       	st	Z, r18
    1fbc:	16 c0       	rjmp	.+44     	; 0x1fea <pcint22ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
    1fbe:	8b e2       	ldi	r24, 0x2B	; 43
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	2b e2       	ldi	r18, 0x2B	; 43
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	f9 01       	movw	r30, r18
    1fc8:	20 81       	ld	r18, Z
    1fca:	20 64       	ori	r18, 0x40	; 64
    1fcc:	fc 01       	movw	r30, r24
    1fce:	20 83       	st	Z, r18
    1fd0:	8a e2       	ldi	r24, 0x2A	; 42
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	2a e2       	ldi	r18, 0x2A	; 42
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	f9 01       	movw	r30, r18
    1fda:	20 81       	ld	r18, Z
    1fdc:	2f 7b       	andi	r18, 0xBF	; 191
    1fde:	fc 01       	movw	r30, r24
    1fe0:	20 83       	st	Z, r18
    1fe2:	03 c0       	rjmp	.+6      	; 0x1fea <pcint22ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	0b c0       	rjmp	.+22     	; 0x1ffe <pcint22ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    1fe8:	00 00       	nop
	}
	setBit(PCMSK2, PCINT22);
    1fea:	8d e6       	ldi	r24, 0x6D	; 109
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	2d e6       	ldi	r18, 0x6D	; 109
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	20 81       	ld	r18, Z
    1ff6:	20 64       	ori	r18, 0x40	; 64
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	20 83       	st	Z, r18
	return RESULT_OK;
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
}
    1ffe:	0f 90       	pop	r0
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	08 95       	ret

00002006 <pcint22DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint22 in PD6
 * -------------------------------------------------------------------------- */

void pcint22DeactivateInterrupt(void)
{
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK2, PCINT22);
    200e:	8d e6       	ldi	r24, 0x6D	; 109
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	2d e6       	ldi	r18, 0x6D	; 109
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	f9 01       	movw	r30, r18
    2018:	20 81       	ld	r18, Z
    201a:	2f 7b       	andi	r18, 0xBF	; 191
    201c:	fc 01       	movw	r30, r24
    201e:	20 83       	st	Z, r18
	return;
    2020:	00 00       	nop
}
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <pcint23ActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	1f 92       	push	r1
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	91 05       	cpc	r25, r1
    203e:	b9 f1       	breq	.+110    	; 0x20ae <pcint23ActivateInterrupt+0x86>
    2040:	83 30       	cpi	r24, 0x03	; 3
    2042:	91 05       	cpc	r25, r1
    2044:	2c f4       	brge	.+10     	; 0x2050 <pcint23ActivateInterrupt+0x28>
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	61 f0       	breq	.+24     	; 0x2062 <pcint23ActivateInterrupt+0x3a>
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	e9 f0       	breq	.+58     	; 0x2088 <pcint23ActivateInterrupt+0x60>
    204e:	55 c0       	rjmp	.+170    	; 0x20fa <pcint23ActivateInterrupt+0xd2>
    2050:	83 30       	cpi	r24, 0x03	; 3
    2052:	91 05       	cpc	r25, r1
    2054:	09 f4       	brne	.+2      	; 0x2058 <pcint23ActivateInterrupt+0x30>
    2056:	3e c0       	rjmp	.+124    	; 0x20d4 <pcint23ActivateInterrupt+0xac>
    2058:	8f 3f       	cpi	r24, 0xFF	; 255
    205a:	91 05       	cpc	r25, r1
    205c:	09 f4       	brne	.+2      	; 0x2060 <pcint23ActivateInterrupt+0x38>
    205e:	4f c0       	rjmp	.+158    	; 0x20fe <pcint23ActivateInterrupt+0xd6>
    2060:	4c c0       	rjmp	.+152    	; 0x20fa <pcint23ActivateInterrupt+0xd2>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
    2062:	8b e2       	ldi	r24, 0x2B	; 43
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	2b e2       	ldi	r18, 0x2B	; 43
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	f9 01       	movw	r30, r18
    206c:	20 81       	ld	r18, Z
    206e:	2f 77       	andi	r18, 0x7F	; 127
    2070:	fc 01       	movw	r30, r24
    2072:	20 83       	st	Z, r18
    2074:	8a e2       	ldi	r24, 0x2A	; 42
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	2a e2       	ldi	r18, 0x2A	; 42
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	f9 01       	movw	r30, r18
    207e:	20 81       	ld	r18, Z
    2080:	20 68       	ori	r18, 0x80	; 128
    2082:	fc 01       	movw	r30, r24
    2084:	20 83       	st	Z, r18
    2086:	3c c0       	rjmp	.+120    	; 0x2100 <pcint23ActivateInterrupt+0xd8>
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
    2088:	8b e2       	ldi	r24, 0x2B	; 43
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	2b e2       	ldi	r18, 0x2B	; 43
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	f9 01       	movw	r30, r18
    2092:	20 81       	ld	r18, Z
    2094:	20 68       	ori	r18, 0x80	; 128
    2096:	fc 01       	movw	r30, r24
    2098:	20 83       	st	Z, r18
    209a:	8a e2       	ldi	r24, 0x2A	; 42
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	2a e2       	ldi	r18, 0x2A	; 42
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	f9 01       	movw	r30, r18
    20a4:	20 81       	ld	r18, Z
    20a6:	20 68       	ori	r18, 0x80	; 128
    20a8:	fc 01       	movw	r30, r24
    20aa:	20 83       	st	Z, r18
    20ac:	29 c0       	rjmp	.+82     	; 0x2100 <pcint23ActivateInterrupt+0xd8>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
    20ae:	8b e2       	ldi	r24, 0x2B	; 43
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	2b e2       	ldi	r18, 0x2B	; 43
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	f9 01       	movw	r30, r18
    20b8:	20 81       	ld	r18, Z
    20ba:	2f 77       	andi	r18, 0x7F	; 127
    20bc:	fc 01       	movw	r30, r24
    20be:	20 83       	st	Z, r18
    20c0:	8a e2       	ldi	r24, 0x2A	; 42
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	2a e2       	ldi	r18, 0x2A	; 42
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	f9 01       	movw	r30, r18
    20ca:	20 81       	ld	r18, Z
    20cc:	2f 77       	andi	r18, 0x7F	; 127
    20ce:	fc 01       	movw	r30, r24
    20d0:	20 83       	st	Z, r18
    20d2:	16 c0       	rjmp	.+44     	; 0x2100 <pcint23ActivateInterrupt+0xd8>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
    20d4:	8b e2       	ldi	r24, 0x2B	; 43
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	2b e2       	ldi	r18, 0x2B	; 43
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	f9 01       	movw	r30, r18
    20de:	20 81       	ld	r18, Z
    20e0:	20 68       	ori	r18, 0x80	; 128
    20e2:	fc 01       	movw	r30, r24
    20e4:	20 83       	st	Z, r18
    20e6:	8a e2       	ldi	r24, 0x2A	; 42
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	2a e2       	ldi	r18, 0x2A	; 42
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	f9 01       	movw	r30, r18
    20f0:	20 81       	ld	r18, Z
    20f2:	2f 77       	andi	r18, 0x7F	; 127
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 83       	st	Z, r18
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <pcint23ActivateInterrupt+0xd8>
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	0b c0       	rjmp	.+22     	; 0x2114 <pcint23ActivateInterrupt+0xec>
		case PORT_NO_CHANGE:		break;
    20fe:	00 00       	nop
	}
	setBit(PCMSK2, PCINT23);
    2100:	8d e6       	ldi	r24, 0x6D	; 109
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	2d e6       	ldi	r18, 0x6D	; 109
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	f9 01       	movw	r30, r18
    210a:	20 81       	ld	r18, Z
    210c:	20 68       	ori	r18, 0x80	; 128
    210e:	fc 01       	movw	r30, r24
    2110:	20 83       	st	Z, r18
	return RESULT_OK;
    2112:	80 e0       	ldi	r24, 0x00	; 0
}
    2114:	0f 90       	pop	r0
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	08 95       	ret

0000211c <pcint23DeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the external interrupt pcint23 in PD7
 * -------------------------------------------------------------------------- */

void pcint23DeactivateInterrupt(void)
{
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
	clrBit(PCMSK2, PCINT23);
    2124:	8d e6       	ldi	r24, 0x6D	; 109
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	2d e6       	ldi	r18, 0x6D	; 109
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	f9 01       	movw	r30, r18
    212e:	20 81       	ld	r18, Z
    2130:	2f 77       	andi	r18, 0x7F	; 127
    2132:	fc 01       	movw	r30, r24
    2134:	20 83       	st	Z, r18
	return;
    2136:	00 00       	nop
}
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <timer0Config>:
/* -----------------------------------------------------------------------------
 * Configures the timer0 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer0Config(timerModeA_t mode, timerPrescalerValueA_t prescaler)
{
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	00 d0       	rcall	.+0      	; 0x2144 <timer0Config+0x6>
    2144:	00 d0       	rcall	.+0      	; 0x2146 <timer0Config+0x8>
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	8b 83       	std	Y+3, r24	; 0x03
    214c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 regA = TCCR0A;
    214e:	84 e4       	ldi	r24, 0x44	; 68
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	fc 01       	movw	r30, r24
    2154:	80 81       	ld	r24, Z
    2156:	89 83       	std	Y+1, r24	; 0x01
	uint8 regB = TCCR0B;
    2158:	85 e4       	ldi	r24, 0x45	; 69
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	fc 01       	movw	r30, r24
    215e:	80 81       	ld	r24, Z
    2160:	8a 83       	std	Y+2, r24	; 0x02

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
    2162:	8c 81       	ldd	r24, Y+4	; 0x04
    2164:	8f 3f       	cpi	r24, 0xFF	; 255
    2166:	09 f4       	brne	.+2      	; 0x216a <timer0Config+0x2c>
    2168:	49 c0       	rjmp	.+146    	; 0x21fc <timer0Config+0xbe>
		regB &= ~(0x07 << CS00);
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	88 7f       	andi	r24, 0xF8	; 248
    216e:	8a 83       	std	Y+2, r24	; 0x02
		switch(prescaler){
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	84 30       	cpi	r24, 0x04	; 4
    2178:	91 05       	cpc	r25, r1
    217a:	59 f1       	breq	.+86     	; 0x21d2 <timer0Config+0x94>
    217c:	85 30       	cpi	r24, 0x05	; 5
    217e:	91 05       	cpc	r25, r1
    2180:	7c f4       	brge	.+30     	; 0x21a0 <timer0Config+0x62>
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	91 05       	cpc	r25, r1
    2186:	c9 f0       	breq	.+50     	; 0x21ba <timer0Config+0x7c>
    2188:	82 30       	cpi	r24, 0x02	; 2
    218a:	91 05       	cpc	r25, r1
    218c:	1c f4       	brge	.+6      	; 0x2194 <timer0Config+0x56>
    218e:	89 2b       	or	r24, r25
    2190:	91 f1       	breq	.+100    	; 0x21f6 <timer0Config+0xb8>
    2192:	2f c0       	rjmp	.+94     	; 0x21f2 <timer0Config+0xb4>
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	91 05       	cpc	r25, r1
    2198:	a1 f0       	breq	.+40     	; 0x21c2 <timer0Config+0x84>
    219a:	03 97       	sbiw	r24, 0x03	; 3
    219c:	b1 f0       	breq	.+44     	; 0x21ca <timer0Config+0x8c>
    219e:	29 c0       	rjmp	.+82     	; 0x21f2 <timer0Config+0xb4>
    21a0:	86 30       	cpi	r24, 0x06	; 6
    21a2:	91 05       	cpc	r25, r1
    21a4:	f1 f0       	breq	.+60     	; 0x21e2 <timer0Config+0xa4>
    21a6:	86 30       	cpi	r24, 0x06	; 6
    21a8:	91 05       	cpc	r25, r1
    21aa:	bc f0       	brlt	.+46     	; 0x21da <timer0Config+0x9c>
    21ac:	87 30       	cpi	r24, 0x07	; 7
    21ae:	91 05       	cpc	r25, r1
    21b0:	e1 f0       	breq	.+56     	; 0x21ea <timer0Config+0xac>
    21b2:	8f 3f       	cpi	r24, 0xFF	; 255
    21b4:	91 05       	cpc	r25, r1
    21b6:	09 f1       	breq	.+66     	; 0x21fa <timer0Config+0xbc>
    21b8:	1c c0       	rjmp	.+56     	; 0x21f2 <timer0Config+0xb4>
			case TIMER_A_CLOCK_DISABLE:					break;
			case TIMER_A_PRESCALER_OFF:					regB |= (1 << CS00);	break;
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	81 60       	ori	r24, 0x01	; 1
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	1d c0       	rjmp	.+58     	; 0x21fc <timer0Config+0xbe>
			case TIMER_A_PRESCALER_8:					regB |= (2 << CS00);	break;
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	82 60       	ori	r24, 0x02	; 2
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	19 c0       	rjmp	.+50     	; 0x21fc <timer0Config+0xbe>
			case TIMER_A_PRESCALER_64:					regB |= (3 << CS00);	break;
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	83 60       	ori	r24, 0x03	; 3
    21ce:	8a 83       	std	Y+2, r24	; 0x02
    21d0:	15 c0       	rjmp	.+42     	; 0x21fc <timer0Config+0xbe>
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	84 60       	ori	r24, 0x04	; 4
    21d6:	8a 83       	std	Y+2, r24	; 0x02
    21d8:	11 c0       	rjmp	.+34     	; 0x21fc <timer0Config+0xbe>
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	85 60       	ori	r24, 0x05	; 5
    21de:	8a 83       	std	Y+2, r24	; 0x02
    21e0:	0d c0       	rjmp	.+26     	; 0x21fc <timer0Config+0xbe>
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	86 60       	ori	r24, 0x06	; 6
    21e6:	8a 83       	std	Y+2, r24	; 0x02
    21e8:	09 c0       	rjmp	.+18     	; 0x21fc <timer0Config+0xbe>
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	87 60       	ori	r24, 0x07	; 7
    21ee:	8a 83       	std	Y+2, r24	; 0x02
    21f0:	05 c0       	rjmp	.+10     	; 0x21fc <timer0Config+0xbe>
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
    21f2:	83 e0       	ldi	r24, 0x03	; 3
    21f4:	52 c0       	rjmp	.+164    	; 0x229a <timer0Config+0x15c>
			case TIMER_A_CLOCK_DISABLE:					break;
    21f6:	00 00       	nop
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <timer0Config+0xbe>
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
    21fa:	00 00       	nop
		}
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2200:	09 f4       	brne	.+2      	; 0x2204 <timer0Config+0xc6>
    2202:	40 c0       	rjmp	.+128    	; 0x2284 <timer0Config+0x146>
		regA &= ~(0x03 << WGM00);
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	8c 7f       	andi	r24, 0xFC	; 252
    2208:	89 83       	std	Y+1, r24	; 0x01
		clrBit(regB, WGM02);
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	87 7f       	andi	r24, 0xF7	; 247
    220e:	8a 83       	std	Y+2, r24	; 0x02
		switch(mode){
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	83 30       	cpi	r24, 0x03	; 3
    2218:	91 05       	cpc	r25, r1
    221a:	e9 f0       	breq	.+58     	; 0x2256 <timer0Config+0x118>
    221c:	84 30       	cpi	r24, 0x04	; 4
    221e:	91 05       	cpc	r25, r1
    2220:	4c f4       	brge	.+18     	; 0x2234 <timer0Config+0xf6>
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	91 05       	cpc	r25, r1
    2226:	79 f0       	breq	.+30     	; 0x2246 <timer0Config+0x108>
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	91 05       	cpc	r25, r1
    222c:	84 f4       	brge	.+32     	; 0x224e <timer0Config+0x110>
    222e:	89 2b       	or	r24, r25
    2230:	31 f1       	breq	.+76     	; 0x227e <timer0Config+0x140>
    2232:	23 c0       	rjmp	.+70     	; 0x227a <timer0Config+0x13c>
    2234:	87 30       	cpi	r24, 0x07	; 7
    2236:	91 05       	cpc	r25, r1
    2238:	c9 f0       	breq	.+50     	; 0x226c <timer0Config+0x12e>
    223a:	8f 3f       	cpi	r24, 0xFF	; 255
    223c:	91 05       	cpc	r25, r1
    223e:	09 f1       	breq	.+66     	; 0x2282 <timer0Config+0x144>
    2240:	05 97       	sbiw	r24, 0x05	; 5
    2242:	69 f0       	breq	.+26     	; 0x225e <timer0Config+0x120>
    2244:	1a c0       	rjmp	.+52     	; 0x227a <timer0Config+0x13c>
			case TIMER_A_MODE_NORMAL:						break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_MAX:		regA |= (1 << WGM00);	break;
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	81 60       	ori	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	1b c0       	rjmp	.+54     	; 0x2284 <timer0Config+0x146>
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	82 60       	ori	r24, 0x02	; 2
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	17 c0       	rjmp	.+46     	; 0x2284 <timer0Config+0x146>
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	83 60       	ori	r24, 0x03	; 3
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	13 c0       	rjmp	.+38     	; 0x2284 <timer0Config+0x146>
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	88 60       	ori	r24, 0x08	; 8
    2262:	8a 83       	std	Y+2, r24	; 0x02
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	81 60       	ori	r24, 0x01	; 1
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	0c c0       	rjmp	.+24     	; 0x2284 <timer0Config+0x146>
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	88 60       	ori	r24, 0x08	; 8
    2270:	8a 83       	std	Y+2, r24	; 0x02
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	83 60       	ori	r24, 0x03	; 3
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	05 c0       	rjmp	.+10     	; 0x2284 <timer0Config+0x146>
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
    227a:	84 e0       	ldi	r24, 0x04	; 4
    227c:	0e c0       	rjmp	.+28     	; 0x229a <timer0Config+0x15c>
			case TIMER_A_MODE_NORMAL:						break;
    227e:	00 00       	nop
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <timer0Config+0x146>
			case TIMER_A_MODE_NO_CHANGE:					break;
    2282:	00 00       	nop
		}
	}
	TCCR0A = regA;
    2284:	84 e4       	ldi	r24, 0x44	; 68
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	29 81       	ldd	r18, Y+1	; 0x01
    228a:	fc 01       	movw	r30, r24
    228c:	20 83       	st	Z, r18
	TCCR0B = regB;
    228e:	85 e4       	ldi	r24, 0x45	; 69
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	2a 81       	ldd	r18, Y+2	; 0x02
    2294:	fc 01       	movw	r30, r24
    2296:	20 83       	st	Z, r18

	return RESULT_OK;
    2298:	80 e0       	ldi	r24, 0x00	; 0
}
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <timer0OutputConfig>:
/* -----------------------------------------------------------------------------
 * Configures the timer0 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer0OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <timer0OutputConfig+0x6>
    22ae:	1f 92       	push	r1
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	8a 83       	std	Y+2, r24	; 0x02
    22b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 reg = TCCR0A;
    22b8:	84 e4       	ldi	r24, 0x44	; 68
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	fc 01       	movw	r30, r24
    22be:	80 81       	ld	r24, Z
    22c0:	89 83       	std	Y+1, r24	; 0x01

	if(compA != TIMER_PORT_NO_CHANGE){
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	8f 3f       	cpi	r24, 0xFF	; 255
    22c6:	49 f1       	breq	.+82     	; 0x231a <timer0OutputConfig+0x72>
		reg &= ~(0x03 << COM0A0);
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	8f 73       	andi	r24, 0x3F	; 63
    22cc:	89 83       	std	Y+1, r24	; 0x01
		switch(compA){
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	82 30       	cpi	r24, 0x02	; 2
    22d6:	91 05       	cpc	r25, r1
    22d8:	99 f0       	breq	.+38     	; 0x2300 <timer0OutputConfig+0x58>
    22da:	83 30       	cpi	r24, 0x03	; 3
    22dc:	91 05       	cpc	r25, r1
    22de:	2c f4       	brge	.+10     	; 0x22ea <timer0OutputConfig+0x42>
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	c1 f0       	breq	.+48     	; 0x2314 <timer0OutputConfig+0x6c>
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	41 f0       	breq	.+16     	; 0x22f8 <timer0OutputConfig+0x50>
    22e8:	13 c0       	rjmp	.+38     	; 0x2310 <timer0OutputConfig+0x68>
    22ea:	83 30       	cpi	r24, 0x03	; 3
    22ec:	91 05       	cpc	r25, r1
    22ee:	61 f0       	breq	.+24     	; 0x2308 <timer0OutputConfig+0x60>
    22f0:	8f 3f       	cpi	r24, 0xFF	; 255
    22f2:	91 05       	cpc	r25, r1
    22f4:	89 f0       	breq	.+34     	; 0x2318 <timer0OutputConfig+0x70>
    22f6:	0c c0       	rjmp	.+24     	; 0x2310 <timer0OutputConfig+0x68>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	80 64       	ori	r24, 0x40	; 64
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	0d c0       	rjmp	.+26     	; 0x231a <timer0OutputConfig+0x72>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	80 68       	ori	r24, 0x80	; 128
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	09 c0       	rjmp	.+18     	; 0x231a <timer0OutputConfig+0x72>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	80 6c       	ori	r24, 0xC0	; 192
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	05 c0       	rjmp	.+10     	; 0x231a <timer0OutputConfig+0x72>
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	35 c0       	rjmp	.+106    	; 0x237e <timer0OutputConfig+0xd6>
			case TIMER_PORT_NORMAL:				break;
    2314:	00 00       	nop
    2316:	01 c0       	rjmp	.+2      	; 0x231a <timer0OutputConfig+0x72>
			case TIMER_PORT_NO_CHANGE:			break;
    2318:	00 00       	nop
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	8f 3f       	cpi	r24, 0xFF	; 255
    231e:	49 f1       	breq	.+82     	; 0x2372 <timer0OutputConfig+0xca>
		reg &= ~(0x03 << COM0B0);
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	8f 7c       	andi	r24, 0xCF	; 207
    2324:	89 83       	std	Y+1, r24	; 0x01
		switch(compA){
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	82 30       	cpi	r24, 0x02	; 2
    232e:	91 05       	cpc	r25, r1
    2330:	99 f0       	breq	.+38     	; 0x2358 <timer0OutputConfig+0xb0>
    2332:	83 30       	cpi	r24, 0x03	; 3
    2334:	91 05       	cpc	r25, r1
    2336:	2c f4       	brge	.+10     	; 0x2342 <timer0OutputConfig+0x9a>
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	c1 f0       	breq	.+48     	; 0x236c <timer0OutputConfig+0xc4>
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	41 f0       	breq	.+16     	; 0x2350 <timer0OutputConfig+0xa8>
    2340:	13 c0       	rjmp	.+38     	; 0x2368 <timer0OutputConfig+0xc0>
    2342:	83 30       	cpi	r24, 0x03	; 3
    2344:	91 05       	cpc	r25, r1
    2346:	61 f0       	breq	.+24     	; 0x2360 <timer0OutputConfig+0xb8>
    2348:	8f 3f       	cpi	r24, 0xFF	; 255
    234a:	91 05       	cpc	r25, r1
    234c:	89 f0       	breq	.+34     	; 0x2370 <timer0OutputConfig+0xc8>
    234e:	0c c0       	rjmp	.+24     	; 0x2368 <timer0OutputConfig+0xc0>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	80 61       	ori	r24, 0x10	; 16
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	0d c0       	rjmp	.+26     	; 0x2372 <timer0OutputConfig+0xca>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	80 62       	ori	r24, 0x20	; 32
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	09 c0       	rjmp	.+18     	; 0x2372 <timer0OutputConfig+0xca>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	80 63       	ori	r24, 0x30	; 48
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <timer0OutputConfig+0xca>
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	09 c0       	rjmp	.+18     	; 0x237e <timer0OutputConfig+0xd6>
			case TIMER_PORT_NORMAL:				break;
    236c:	00 00       	nop
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <timer0OutputConfig+0xca>
			case TIMER_PORT_NO_CHANGE:			break;
    2370:	00 00       	nop
		}
	}
	TCCR0A = reg;
    2372:	84 e4       	ldi	r24, 0x44	; 68
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	29 81       	ldd	r18, Y+1	; 0x01
    2378:	fc 01       	movw	r30, r24
    237a:	20 83       	st	Z, r18
	return RESULT_OK;
    237c:	80 e0       	ldi	r24, 0x00	; 0
}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	08 95       	ret

0000238a <timer0ActivateOverflowInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateOverflowInterrupt(void)
{
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK0, TOIE0);
    2392:	8e e6       	ldi	r24, 0x6E	; 110
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	2e e6       	ldi	r18, 0x6E	; 110
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	f9 01       	movw	r30, r18
    239c:	20 81       	ld	r18, Z
    239e:	21 60       	ori	r18, 0x01	; 1
    23a0:	fc 01       	movw	r30, r24
    23a2:	20 83       	st	Z, r18
	return;
    23a4:	00 00       	nop
}
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	08 95       	ret

000023ac <timer0DeactivateOverflowInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateOverflowInterrupt(void)
{
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK0, TOIE0);
    23b4:	8e e6       	ldi	r24, 0x6E	; 110
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	2e e6       	ldi	r18, 0x6E	; 110
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	f9 01       	movw	r30, r18
    23be:	20 81       	ld	r18, Z
    23c0:	2e 7f       	andi	r18, 0xFE	; 254
    23c2:	fc 01       	movw	r30, r24
    23c4:	20 83       	st	Z, r18
	return;
    23c6:	00 00       	nop
}
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	08 95       	ret

000023ce <timer0ClearOverflowInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer0 overflow interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearOverflowInterruptRequest(void)
{
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR0, TOV0);
    23d6:	85 e3       	ldi	r24, 0x35	; 53
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	25 e3       	ldi	r18, 0x35	; 53
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	f9 01       	movw	r30, r18
    23e0:	20 81       	ld	r18, Z
    23e2:	21 60       	ori	r18, 0x01	; 1
    23e4:	fc 01       	movw	r30, r24
    23e6:	20 83       	st	Z, r18
	return;
    23e8:	00 00       	nop
}
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	08 95       	ret

000023f0 <timer0ActivateCompareAInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareAInterrupt(void)
{
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK0, OCIE0A);
    23f8:	8e e6       	ldi	r24, 0x6E	; 110
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	2e e6       	ldi	r18, 0x6E	; 110
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	f9 01       	movw	r30, r18
    2402:	20 81       	ld	r18, Z
    2404:	22 60       	ori	r18, 0x02	; 2
    2406:	fc 01       	movw	r30, r24
    2408:	20 83       	st	Z, r18
	return;
    240a:	00 00       	nop
}
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <timer0DeactivateCompareAInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareAInterrupt(void)
{
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK0, OCIE0A);
    241a:	8e e6       	ldi	r24, 0x6E	; 110
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	2e e6       	ldi	r18, 0x6E	; 110
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	f9 01       	movw	r30, r18
    2424:	20 81       	ld	r18, Z
    2426:	2d 7f       	andi	r18, 0xFD	; 253
    2428:	fc 01       	movw	r30, r24
    242a:	20 83       	st	Z, r18
	return;
    242c:	00 00       	nop
}
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	08 95       	ret

00002434 <timer0ClearCompareAInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer0 compare A interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareAInterruptRequest(void)
{
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR0, OCF0A);
    243c:	85 e3       	ldi	r24, 0x35	; 53
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	25 e3       	ldi	r18, 0x35	; 53
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	f9 01       	movw	r30, r18
    2446:	20 81       	ld	r18, Z
    2448:	22 60       	ori	r18, 0x02	; 2
    244a:	fc 01       	movw	r30, r24
    244c:	20 83       	st	Z, r18
	return;
    244e:	00 00       	nop
}
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <timer0ActivateCompareBInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareBInterrupt(void)
{
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK0, OCIE0B);
    245e:	8e e6       	ldi	r24, 0x6E	; 110
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	2e e6       	ldi	r18, 0x6E	; 110
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	f9 01       	movw	r30, r18
    2468:	20 81       	ld	r18, Z
    246a:	24 60       	ori	r18, 0x04	; 4
    246c:	fc 01       	movw	r30, r24
    246e:	20 83       	st	Z, r18
	return;
    2470:	00 00       	nop
}
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	08 95       	ret

00002478 <timer0DeactivateCompareBInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareBInterrupt(void)
{
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK0, OCIE0B);
    2480:	8e e6       	ldi	r24, 0x6E	; 110
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	2e e6       	ldi	r18, 0x6E	; 110
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	f9 01       	movw	r30, r18
    248a:	20 81       	ld	r18, Z
    248c:	2b 7f       	andi	r18, 0xFB	; 251
    248e:	fc 01       	movw	r30, r24
    2490:	20 83       	st	Z, r18
	return;
    2492:	00 00       	nop
}
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	08 95       	ret

0000249a <timer0ClearCompareBInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer0 compare B interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareBInterruptRequest(void)
{
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR0, OCF0B);
    24a2:	85 e3       	ldi	r24, 0x35	; 53
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	25 e3       	ldi	r18, 0x35	; 53
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	f9 01       	movw	r30, r18
    24ac:	20 81       	ld	r18, Z
    24ae:	24 60       	ori	r18, 0x04	; 4
    24b0:	fc 01       	movw	r30, r24
    24b2:	20 83       	st	Z, r18
	return;
    24b4:	00 00       	nop
}
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	08 95       	ret

000024bc <timer0ForceCompareA>:
/* -----------------------------------------------------------------------------
 * Forces a comparison on the output compare A of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareA(void)
{
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
	setBit(TCCR0B, FOC0A);
    24c4:	85 e4       	ldi	r24, 0x45	; 69
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	25 e4       	ldi	r18, 0x45	; 69
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	f9 01       	movw	r30, r18
    24ce:	20 81       	ld	r18, Z
    24d0:	20 68       	ori	r18, 0x80	; 128
    24d2:	fc 01       	movw	r30, r24
    24d4:	20 83       	st	Z, r18
	return;
    24d6:	00 00       	nop
}
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	08 95       	ret

000024de <timer0ForceCompareB>:
/* -----------------------------------------------------------------------------
 * Forces a comparison on the output compare B of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareB(void)
{
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
	setBit(TCCR0B, FOC0B);
    24e6:	85 e4       	ldi	r24, 0x45	; 69
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	25 e4       	ldi	r18, 0x45	; 69
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	f9 01       	movw	r30, r18
    24f0:	20 81       	ld	r18, Z
    24f2:	20 64       	ori	r18, 0x40	; 64
    24f4:	fc 01       	movw	r30, r24
    24f6:	20 83       	st	Z, r18
	return;
    24f8:	00 00       	nop
}
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	08 95       	ret

00002500 <timer0SetCounterValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer0 counter value
 * -------------------------------------------------------------------------- */

void timer0SetCounterValue(uint8 value)
{
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	1f 92       	push	r1
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    250c:	86 e4       	ldi	r24, 0x46	; 70
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	29 81       	ldd	r18, Y+1	; 0x01
    2512:	fc 01       	movw	r30, r24
    2514:	20 83       	st	Z, r18
	return;
    2516:	00 00       	nop
}
    2518:	0f 90       	pop	r0
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	08 95       	ret

00002520 <timer0GetCounterValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer0 counter value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCounterValue(void)
{
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    2528:	86 e4       	ldi	r24, 0x46	; 70
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	fc 01       	movw	r30, r24
    252e:	80 81       	ld	r24, Z
}
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	08 95       	ret

00002536 <timer0SetCompareAValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer0 compare A value
 * -------------------------------------------------------------------------- */

void timer0SetCompareAValue(uint8 value)
{
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	1f 92       	push	r1
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = value;
    2542:	87 e4       	ldi	r24, 0x47	; 71
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	29 81       	ldd	r18, Y+1	; 0x01
    2548:	fc 01       	movw	r30, r24
    254a:	20 83       	st	Z, r18
	return;
    254c:	00 00       	nop
}
    254e:	0f 90       	pop	r0
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	08 95       	ret

00002556 <timer0GetCompareAValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer0 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareAValue(void)
{
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
	return OCR0A;
    255e:	87 e4       	ldi	r24, 0x47	; 71
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	fc 01       	movw	r30, r24
    2564:	80 81       	ld	r24, Z
}
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	08 95       	ret

0000256c <timer0SetCompareBValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer0 compare B value
 * -------------------------------------------------------------------------- */

void timer0SetCompareBValue(uint8 value)
{
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	1f 92       	push	r1
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	89 83       	std	Y+1, r24	; 0x01
	OCR0B = value;
    2578:	88 e4       	ldi	r24, 0x48	; 72
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	29 81       	ldd	r18, Y+1	; 0x01
    257e:	fc 01       	movw	r30, r24
    2580:	20 83       	st	Z, r18
	return;
    2582:	00 00       	nop
}
    2584:	0f 90       	pop	r0
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	08 95       	ret

0000258c <timer0GetCompareBValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer0 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareBValue(void)
{
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
	return OCR0B;
    2594:	88 e4       	ldi	r24, 0x48	; 72
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	fc 01       	movw	r30, r24
    259a:	80 81       	ld	r24, Z
}
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	08 95       	ret

000025a2 <timer1Config>:
/* -----------------------------------------------------------------------------
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <timer1Config+0x6>
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <timer1Config+0x8>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	8b 83       	std	Y+3, r24	; 0x03
    25b0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 reg1 = TCCR1A;
    25b2:	80 e8       	ldi	r24, 0x80	; 128
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	fc 01       	movw	r30, r24
    25b8:	80 81       	ld	r24, Z
    25ba:	89 83       	std	Y+1, r24	; 0x01
	uint8 reg2 = TCCR1B;
    25bc:	81 e8       	ldi	r24, 0x81	; 129
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	fc 01       	movw	r30, r24
    25c2:	80 81       	ld	r24, Z
    25c4:	8a 83       	std	Y+2, r24	; 0x02

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
    25c6:	8c 81       	ldd	r24, Y+4	; 0x04
    25c8:	8f 3f       	cpi	r24, 0xFF	; 255
    25ca:	39 f0       	breq	.+14     	; 0x25da <timer1Config+0x38>
		reg2 &= ~(0x07 << CS10);
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	88 7f       	andi	r24, 0xF8	; 248
    25d0:	8a 83       	std	Y+2, r24	; 0x02
		reg2 |= prescaler;
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	89 2b       	or	r24, r25
    25d8:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	8f 3f       	cpi	r24, 0xFF	; 255
    25de:	51 f1       	breq	.+84     	; 0x2634 <timer1Config+0x92>
		if(isBitSet(mode, 3))
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	86 95       	lsr	r24
    25e4:	86 95       	lsr	r24
    25e6:	86 95       	lsr	r24
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	81 70       	andi	r24, 0x01	; 1
    25ee:	99 27       	eor	r25, r25
    25f0:	89 2b       	or	r24, r25
    25f2:	21 f0       	breq	.+8      	; 0x25fc <timer1Config+0x5a>
			setBit(reg2, WGM13);
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	80 61       	ori	r24, 0x10	; 16
    25f8:	8a 83       	std	Y+2, r24	; 0x02
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <timer1Config+0x60>
		else
			clrBit(reg2, WGM13);
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	8f 7e       	andi	r24, 0xEF	; 239
    2600:	8a 83       	std	Y+2, r24	; 0x02
		if(isBitSet(mode, 2))
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	86 95       	lsr	r24
    2606:	86 95       	lsr	r24
    2608:	88 2f       	mov	r24, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	81 70       	andi	r24, 0x01	; 1
    260e:	99 27       	eor	r25, r25
    2610:	89 2b       	or	r24, r25
    2612:	21 f0       	breq	.+8      	; 0x261c <timer1Config+0x7a>
			setBit(reg2, WGM12);
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	88 60       	ori	r24, 0x08	; 8
    2618:	8a 83       	std	Y+2, r24	; 0x02
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <timer1Config+0x80>
		else
			clrBit(reg2, WGM12);
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	87 7f       	andi	r24, 0xF7	; 247
    2620:	8a 83       	std	Y+2, r24	; 0x02
		reg1 &= ~(0x03 << WGM10);
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	8c 7f       	andi	r24, 0xFC	; 252
    2626:	89 83       	std	Y+1, r24	; 0x01
		reg1 |= (mode & 0x03);
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	98 2f       	mov	r25, r24
    262c:	93 70       	andi	r25, 0x03	; 3
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	89 2b       	or	r24, r25
    2632:	89 83       	std	Y+1, r24	; 0x01
	}
	TCCR1A = reg1;
    2634:	80 e8       	ldi	r24, 0x80	; 128
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	29 81       	ldd	r18, Y+1	; 0x01
    263a:	fc 01       	movw	r30, r24
    263c:	20 83       	st	Z, r18
	TCCR1B = reg2;
    263e:	81 e8       	ldi	r24, 0x81	; 129
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	2a 81       	ldd	r18, Y+2	; 0x02
    2644:	fc 01       	movw	r30, r24
    2646:	20 83       	st	Z, r18

	return RESULT_OK;
    2648:	80 e0       	ldi	r24, 0x00	; 0
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <timer1OutputConfig>:
/* -----------------------------------------------------------------------------
 * Configures the timer1 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	00 d0       	rcall	.+0      	; 0x265e <timer1OutputConfig+0x6>
    265e:	1f 92       	push	r1
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	8a 83       	std	Y+2, r24	; 0x02
    2666:	6b 83       	std	Y+3, r22	; 0x03
	uint8 aux8 = TCCR1A;
    2668:	80 e8       	ldi	r24, 0x80	; 128
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	fc 01       	movw	r30, r24
    266e:	80 81       	ld	r24, Z
    2670:	89 83       	std	Y+1, r24	; 0x01

	if(compA != TIMER_PORT_NO_CHANGE){
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	8f 3f       	cpi	r24, 0xFF	; 255
    2676:	91 f0       	breq	.+36     	; 0x269c <timer1OutputConfig+0x44>
		aux8 &= ~(0x03 << COM1A0);
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	8f 73       	andi	r24, 0x3F	; 63
    267c:	89 83       	std	Y+1, r24	; 0x01
		aux8 |= (compA << COM1A0); 
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	88 2f       	mov	r24, r24
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	38 2f       	mov	r19, r24
    2686:	35 95       	asr	r19
    2688:	35 95       	asr	r19
    268a:	28 2f       	mov	r18, r24
    268c:	22 95       	swap	r18
    268e:	22 0f       	add	r18, r18
    2690:	22 0f       	add	r18, r18
    2692:	20 7c       	andi	r18, 0xC0	; 192
    2694:	92 2f       	mov	r25, r18
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	89 2b       	or	r24, r25
    269a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(compB != TIMER_PORT_NO_CHANGE){
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	8f 3f       	cpi	r24, 0xFF	; 255
    26a0:	81 f0       	breq	.+32     	; 0x26c2 <timer1OutputConfig+0x6a>
		aux8 &= ~(0x03 << COM1B0);
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	8f 7c       	andi	r24, 0xCF	; 207
    26a6:	89 83       	std	Y+1, r24	; 0x01
		aux8 |= (compB << COM1B0); 
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	82 95       	swap	r24
    26b0:	92 95       	swap	r25
    26b2:	90 7f       	andi	r25, 0xF0	; 240
    26b4:	98 27       	eor	r25, r24
    26b6:	80 7f       	andi	r24, 0xF0	; 240
    26b8:	98 27       	eor	r25, r24
    26ba:	98 2f       	mov	r25, r24
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	89 2b       	or	r24, r25
    26c0:	89 83       	std	Y+1, r24	; 0x01
	}
	TCCR1A = aux8;
    26c2:	80 e8       	ldi	r24, 0x80	; 128
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	29 81       	ldd	r18, Y+1	; 0x01
    26c8:	fc 01       	movw	r30, r24
    26ca:	20 83       	st	Z, r18
	return RESULT_OK;
    26cc:	80 e0       	ldi	r24, 0x00	; 0
}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	08 95       	ret

000026da <timer1InputCaptureNoiseCancelerConfig>:
/* -----------------------------------------------------------------------------
 * Configures the noise canceler of input capture of timer1
 * -------------------------------------------------------------------------- */

resultValue_t	timer1InputCaptureNoiseCancelerConfig(timerInputCaptureNoiseCanceler_t mode)
{
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <timer1InputCaptureNoiseCancelerConfig+0x6>
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 aux8 = TCCR1B;
    26e6:	81 e8       	ldi	r24, 0x81	; 129
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	fc 01       	movw	r30, r24
    26ec:	80 81       	ld	r24, Z
    26ee:	89 83       	std	Y+1, r24	; 0x01

	aux8 &= ~(0x03 << ICES1);
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	8f 73       	andi	r24, 0x3F	; 63
    26f4:	89 83       	std	Y+1, r24	; 0x01
	aux8 |= mode;
    26f6:	99 81       	ldd	r25, Y+1	; 0x01
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	89 2b       	or	r24, r25
    26fc:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B = aux8;
    26fe:	81 e8       	ldi	r24, 0x81	; 129
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	29 81       	ldd	r18, Y+1	; 0x01
    2704:	fc 01       	movw	r30, r24
    2706:	20 83       	st	Z, r18
	return RESULT_OK;
    2708:	80 e0       	ldi	r24, 0x00	; 0
}
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	08 95       	ret

00002714 <timer1ActivateOverflowInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateOverflowInterrupt(void)
{
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK1, TOIE1);
    271c:	8f e6       	ldi	r24, 0x6F	; 111
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	2f e6       	ldi	r18, 0x6F	; 111
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	f9 01       	movw	r30, r18
    2726:	20 81       	ld	r18, Z
    2728:	21 60       	ori	r18, 0x01	; 1
    272a:	fc 01       	movw	r30, r24
    272c:	20 83       	st	Z, r18
	return RESULT_OK;
    272e:	80 e0       	ldi	r24, 0x00	; 0
}
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	08 95       	ret

00002736 <timer1DeactivateOverflowInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateOverflowInterrupt(void)
{
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK1, TOIE1);
    273e:	8f e6       	ldi	r24, 0x6F	; 111
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	2f e6       	ldi	r18, 0x6F	; 111
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	f9 01       	movw	r30, r18
    2748:	20 81       	ld	r18, Z
    274a:	2e 7f       	andi	r18, 0xFE	; 254
    274c:	fc 01       	movw	r30, r24
    274e:	20 83       	st	Z, r18
	return RESULT_OK;
    2750:	80 e0       	ldi	r24, 0x00	; 0
}
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	08 95       	ret

00002758 <timer1ClearOverflowInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer1 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearOverflowInterruptRequest(void)
{
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR1, TOV1);
    2760:	86 e3       	ldi	r24, 0x36	; 54
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	26 e3       	ldi	r18, 0x36	; 54
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	f9 01       	movw	r30, r18
    276a:	20 81       	ld	r18, Z
    276c:	21 60       	ori	r18, 0x01	; 1
    276e:	fc 01       	movw	r30, r24
    2770:	20 83       	st	Z, r18
	return RESULT_OK;
    2772:	80 e0       	ldi	r24, 0x00	; 0
}
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <timer1ActivateCompareAInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareAInterrupt(void)
{
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK1, OCIE1A);
    2782:	8f e6       	ldi	r24, 0x6F	; 111
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	2f e6       	ldi	r18, 0x6F	; 111
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	f9 01       	movw	r30, r18
    278c:	20 81       	ld	r18, Z
    278e:	22 60       	ori	r18, 0x02	; 2
    2790:	fc 01       	movw	r30, r24
    2792:	20 83       	st	Z, r18
	return RESULT_OK;
    2794:	80 e0       	ldi	r24, 0x00	; 0
}
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	08 95       	ret

0000279c <timer1DeactivateCompareAInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareAInterrupt(void)
{
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK1, OCIE1A);
    27a4:	8f e6       	ldi	r24, 0x6F	; 111
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	2f e6       	ldi	r18, 0x6F	; 111
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	f9 01       	movw	r30, r18
    27ae:	20 81       	ld	r18, Z
    27b0:	2d 7f       	andi	r18, 0xFD	; 253
    27b2:	fc 01       	movw	r30, r24
    27b4:	20 83       	st	Z, r18
	return RESULT_OK;
    27b6:	80 e0       	ldi	r24, 0x00	; 0
}
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	08 95       	ret

000027be <timer1ClearCompareAInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR1, OCF1A);
    27c6:	86 e3       	ldi	r24, 0x36	; 54
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	26 e3       	ldi	r18, 0x36	; 54
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	f9 01       	movw	r30, r18
    27d0:	20 81       	ld	r18, Z
    27d2:	22 60       	ori	r18, 0x02	; 2
    27d4:	fc 01       	movw	r30, r24
    27d6:	20 83       	st	Z, r18
	return RESULT_OK;
    27d8:	80 e0       	ldi	r24, 0x00	; 0
}
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <timer1ActivateCompareBInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareBInterrupt(void)
{
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK1, OCIE1B);
    27e8:	8f e6       	ldi	r24, 0x6F	; 111
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	2f e6       	ldi	r18, 0x6F	; 111
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	f9 01       	movw	r30, r18
    27f2:	20 81       	ld	r18, Z
    27f4:	24 60       	ori	r18, 0x04	; 4
    27f6:	fc 01       	movw	r30, r24
    27f8:	20 83       	st	Z, r18
	return RESULT_OK;
    27fa:	80 e0       	ldi	r24, 0x00	; 0
}
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	08 95       	ret

00002802 <timer1DeactivateCompareBInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareBInterrupt(void)
{
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK1, OCIE1B);
    280a:	8f e6       	ldi	r24, 0x6F	; 111
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	2f e6       	ldi	r18, 0x6F	; 111
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	f9 01       	movw	r30, r18
    2814:	20 81       	ld	r18, Z
    2816:	2b 7f       	andi	r18, 0xFB	; 251
    2818:	fc 01       	movw	r30, r24
    281a:	20 83       	st	Z, r18
	return RESULT_OK;
    281c:	80 e0       	ldi	r24, 0x00	; 0
}
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	08 95       	ret

00002824 <timer1ClearCompareBInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR1, OCF1B);
    282c:	86 e3       	ldi	r24, 0x36	; 54
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	26 e3       	ldi	r18, 0x36	; 54
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	f9 01       	movw	r30, r18
    2836:	20 81       	ld	r18, Z
    2838:	24 60       	ori	r18, 0x04	; 4
    283a:	fc 01       	movw	r30, r24
    283c:	20 83       	st	Z, r18
	return RESULT_OK;
    283e:	80 e0       	ldi	r24, 0x00	; 0
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <timer1ActivateInputCaptureInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateInputCaptureInterrupt(void)
{
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK1, ICIE1);
    284e:	8f e6       	ldi	r24, 0x6F	; 111
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	2f e6       	ldi	r18, 0x6F	; 111
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	f9 01       	movw	r30, r18
    2858:	20 81       	ld	r18, Z
    285a:	20 62       	ori	r18, 0x20	; 32
    285c:	fc 01       	movw	r30, r24
    285e:	20 83       	st	Z, r18
	return RESULT_OK;
    2860:	80 e0       	ldi	r24, 0x00	; 0
}
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	08 95       	ret

00002868 <timer1DeactivateInputCaptureInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateInputCaptureInterrupt(void)
{
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK1, ICIE1);
    2870:	8f e6       	ldi	r24, 0x6F	; 111
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	2f e6       	ldi	r18, 0x6F	; 111
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	f9 01       	movw	r30, r18
    287a:	20 81       	ld	r18, Z
    287c:	2f 7d       	andi	r18, 0xDF	; 223
    287e:	fc 01       	movw	r30, r24
    2880:	20 83       	st	Z, r18
	return RESULT_OK;
    2882:	80 e0       	ldi	r24, 0x00	; 0
}
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	08 95       	ret

0000288a <timer1ClearInputCaptureInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer1 input capture interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearInputCaptureInterruptRequest(void)
{
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR1, ICF1);
    2892:	86 e3       	ldi	r24, 0x36	; 54
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	26 e3       	ldi	r18, 0x36	; 54
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	f9 01       	movw	r30, r18
    289c:	20 81       	ld	r18, Z
    289e:	20 62       	ori	r18, 0x20	; 32
    28a0:	fc 01       	movw	r30, r24
    28a2:	20 83       	st	Z, r18
	return RESULT_OK;
    28a4:	80 e0       	ldi	r24, 0x00	; 0
}
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	08 95       	ret

000028ac <timer1ForceCompareA>:
/* -----------------------------------------------------------------------------
 * Forces a comparison on the output compare A of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareA(void)
{
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
	setBit(TCCR1C, FOC1A);
    28b4:	82 e8       	ldi	r24, 0x82	; 130
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	22 e8       	ldi	r18, 0x82	; 130
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	f9 01       	movw	r30, r18
    28be:	20 81       	ld	r18, Z
    28c0:	20 68       	ori	r18, 0x80	; 128
    28c2:	fc 01       	movw	r30, r24
    28c4:	20 83       	st	Z, r18
	return RESULT_OK;
    28c6:	80 e0       	ldi	r24, 0x00	; 0
}
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	08 95       	ret

000028ce <timer1ForceCompareB>:
/* -----------------------------------------------------------------------------
 * Forces a comparison on the output compare B of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareB(void)
{
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
	setBit(TCCR1C, FOC1B);
    28d6:	82 e8       	ldi	r24, 0x82	; 130
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	22 e8       	ldi	r18, 0x82	; 130
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	f9 01       	movw	r30, r18
    28e0:	20 81       	ld	r18, Z
    28e2:	20 64       	ori	r18, 0x40	; 64
    28e4:	fc 01       	movw	r30, r24
    28e6:	20 83       	st	Z, r18
	return RESULT_OK;
    28e8:	80 e0       	ldi	r24, 0x00	; 0
}
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	08 95       	ret

000028f0 <timer1SetCounterValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer1 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCounterValue(uint16 value)
{
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <timer1SetCounterValue+0x6>
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <timer1SetCounterValue+0x8>
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	9c 83       	std	Y+4, r25	; 0x04
    28fe:	8b 83       	std	Y+3, r24	; 0x03
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2900:	8f e5       	ldi	r24, 0x5F	; 95
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	fc 01       	movw	r30, r24
    2906:	80 81       	ld	r24, Z
    2908:	8a 83       	std	Y+2, r24	; 0x02
    290a:	0e 94 53 00 	call	0xa6	; 0xa6 <__iCliRetVal>
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	08 c0       	rjmp	.+16     	; 0x2922 <timer1SetCounterValue+0x32>
		TCNT1 = value;
    2912:	84 e8       	ldi	r24, 0x84	; 132
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	2b 81       	ldd	r18, Y+3	; 0x03
    2918:	3c 81       	ldd	r19, Y+4	; 0x04
    291a:	fc 01       	movw	r30, r24
    291c:	31 83       	std	Z+1, r19	; 0x01
    291e:	20 83       	st	Z, r18
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2920:	19 82       	std	Y+1, r1	; 0x01
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	88 23       	and	r24, r24
    2926:	a9 f7       	brne	.-22     	; 0x2912 <timer1SetCounterValue+0x22>
    2928:	ce 01       	movw	r24, r28
    292a:	02 96       	adiw	r24, 0x02	; 2
    292c:	0e 94 5c 00 	call	0xb8	; 0xb8 <__iRestore>
	}
	return RESULT_OK;
    2930:	80 e0       	ldi	r24, 0x00	; 0
}
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <timer1GetCounterValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer1 counter value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCounterValue(void)
{
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2948:	84 e8       	ldi	r24, 0x84	; 132
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	fc 01       	movw	r30, r24
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
}
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	08 95       	ret

00002958 <timer1SetCompareAValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	00 d0       	rcall	.+0      	; 0x295e <timer1SetCompareAValue+0x6>
    295e:	00 d0       	rcall	.+0      	; 0x2960 <timer1SetCompareAValue+0x8>
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	9c 83       	std	Y+4, r25	; 0x04
    2966:	8b 83       	std	Y+3, r24	; 0x03
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2968:	8f e5       	ldi	r24, 0x5F	; 95
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	fc 01       	movw	r30, r24
    296e:	80 81       	ld	r24, Z
    2970:	8a 83       	std	Y+2, r24	; 0x02
    2972:	0e 94 53 00 	call	0xa6	; 0xa6 <__iCliRetVal>
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	08 c0       	rjmp	.+16     	; 0x298a <timer1SetCompareAValue+0x32>
		OCR1A = value;
    297a:	88 e8       	ldi	r24, 0x88	; 136
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	2b 81       	ldd	r18, Y+3	; 0x03
    2980:	3c 81       	ldd	r19, Y+4	; 0x04
    2982:	fc 01       	movw	r30, r24
    2984:	31 83       	std	Z+1, r19	; 0x01
    2986:	20 83       	st	Z, r18
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2988:	19 82       	std	Y+1, r1	; 0x01
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	88 23       	and	r24, r24
    298e:	a9 f7       	brne	.-22     	; 0x297a <timer1SetCompareAValue+0x22>
    2990:	ce 01       	movw	r24, r28
    2992:	02 96       	adiw	r24, 0x02	; 2
    2994:	0e 94 5c 00 	call	0xb8	; 0xb8 <__iRestore>
	}
	return RESULT_OK;
    2998:	80 e0       	ldi	r24, 0x00	; 0
}
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	08 95       	ret

000029a8 <timer1GetCompareAValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer1 compare A value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareAValue(void)
{
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
	return OCR1A;
    29b0:	88 e8       	ldi	r24, 0x88	; 136
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	fc 01       	movw	r30, r24
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
}
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <timer1SetCompareBValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <timer1SetCompareBValue+0x6>
    29c6:	00 d0       	rcall	.+0      	; 0x29c8 <timer1SetCompareBValue+0x8>
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    29d0:	8f e5       	ldi	r24, 0x5F	; 95
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	fc 01       	movw	r30, r24
    29d6:	80 81       	ld	r24, Z
    29d8:	8a 83       	std	Y+2, r24	; 0x02
    29da:	0e 94 53 00 	call	0xa6	; 0xa6 <__iCliRetVal>
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	08 c0       	rjmp	.+16     	; 0x29f2 <timer1SetCompareBValue+0x32>
		OCR1B = value;
    29e2:	8a e8       	ldi	r24, 0x8A	; 138
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	2b 81       	ldd	r18, Y+3	; 0x03
    29e8:	3c 81       	ldd	r19, Y+4	; 0x04
    29ea:	fc 01       	movw	r30, r24
    29ec:	31 83       	std	Z+1, r19	; 0x01
    29ee:	20 83       	st	Z, r18
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    29f0:	19 82       	std	Y+1, r1	; 0x01
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	88 23       	and	r24, r24
    29f6:	a9 f7       	brne	.-22     	; 0x29e2 <timer1SetCompareBValue+0x22>
    29f8:	ce 01       	movw	r24, r28
    29fa:	02 96       	adiw	r24, 0x02	; 2
    29fc:	0e 94 5c 00 	call	0xb8	; 0xb8 <__iRestore>
	}
	return RESULT_OK;
    2a00:	80 e0       	ldi	r24, 0x00	; 0
}
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	df 91       	pop	r29
    2a0c:	cf 91       	pop	r28
    2a0e:	08 95       	ret

00002a10 <timer1GetCompareBValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer1 compare B value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareBValue(void)
{
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
	return OCR1B;
    2a18:	8a e8       	ldi	r24, 0x8A	; 138
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
}
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	08 95       	ret

00002a28 <timer1SetInputCaptureValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <timer1SetInputCaptureValue+0x6>
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <timer1SetInputCaptureValue+0x8>
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2a38:	8f e5       	ldi	r24, 0x5F	; 95
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	80 81       	ld	r24, Z
    2a40:	8a 83       	std	Y+2, r24	; 0x02
    2a42:	0e 94 53 00 	call	0xa6	; 0xa6 <__iCliRetVal>
    2a46:	89 83       	std	Y+1, r24	; 0x01
    2a48:	08 c0       	rjmp	.+16     	; 0x2a5a <timer1SetInputCaptureValue+0x32>
		ICR1 = value;
    2a4a:	86 e8       	ldi	r24, 0x86	; 134
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a50:	3c 81       	ldd	r19, Y+4	; 0x04
    2a52:	fc 01       	movw	r30, r24
    2a54:	31 83       	std	Z+1, r19	; 0x01
    2a56:	20 83       	st	Z, r18
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2a58:	19 82       	std	Y+1, r1	; 0x01
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	88 23       	and	r24, r24
    2a5e:	a9 f7       	brne	.-22     	; 0x2a4a <timer1SetInputCaptureValue+0x22>
    2a60:	ce 01       	movw	r24, r28
    2a62:	02 96       	adiw	r24, 0x02	; 2
    2a64:	0e 94 5c 00 	call	0xb8	; 0xb8 <__iRestore>
	}
	return RESULT_OK;
    2a68:	80 e0       	ldi	r24, 0x00	; 0
}
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	08 95       	ret

00002a78 <timer1GetInputCaptureValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer1 input capture value
 * -------------------------------------------------------------------------- */

uint16 timer1GetInputCaptureValue(void)
{
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2a80:	86 e8       	ldi	r24, 0x86	; 134
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	fc 01       	movw	r30, r24
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
}
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	08 95       	ret

00002a90 <timer2Config>:
/* -----------------------------------------------------------------------------
 * Configures the timer2 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer2Config(timerModeA_t mode, timerPrescalerValueB_t prescaler)
{
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <timer2Config+0x6>
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <timer2Config+0x8>
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	8b 83       	std	Y+3, r24	; 0x03
    2a9e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 reg1 = TCCR2A;
    2aa0:	80 eb       	ldi	r24, 0xB0	; 176
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	80 81       	ld	r24, Z
    2aa8:	89 83       	std	Y+1, r24	; 0x01
	uint8 reg2 = TCCR2B;
    2aaa:	81 eb       	ldi	r24, 0xB1	; 177
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	fc 01       	movw	r30, r24
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8a 83       	std	Y+2, r24	; 0x02

	if(prescaler != TIMER_B_PRESCALER_NO_CHANGE){
    2ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab8:	39 f0       	breq	.+14     	; 0x2ac8 <timer2Config+0x38>
		reg2 &= ~(0x07 << CS20);
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	88 7f       	andi	r24, 0xF8	; 248
    2abe:	8a 83       	std	Y+2, r24	; 0x02
		reg2 |= prescaler;
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	89 2b       	or	r24, r25
    2ac6:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	8f 3f       	cpi	r24, 0xFF	; 255
    2acc:	c9 f0       	breq	.+50     	; 0x2b00 <timer2Config+0x70>
		if(isBitSet(mode, 2))
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	86 95       	lsr	r24
    2ad2:	86 95       	lsr	r24
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	81 70       	andi	r24, 0x01	; 1
    2ada:	99 27       	eor	r25, r25
    2adc:	89 2b       	or	r24, r25
    2ade:	21 f0       	breq	.+8      	; 0x2ae8 <timer2Config+0x58>
			setBit(reg2, WGM22);
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	88 60       	ori	r24, 0x08	; 8
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
    2ae6:	03 c0       	rjmp	.+6      	; 0x2aee <timer2Config+0x5e>
		else
			clrBit(reg2, WGM22);
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	87 7f       	andi	r24, 0xF7	; 247
    2aec:	8a 83       	std	Y+2, r24	; 0x02
		reg1 &= ~(0x03 << WGM20);
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	8c 7f       	andi	r24, 0xFC	; 252
    2af2:	89 83       	std	Y+1, r24	; 0x01
		reg1 |= (mode & 0x03);
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	98 2f       	mov	r25, r24
    2af8:	93 70       	andi	r25, 0x03	; 3
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	89 2b       	or	r24, r25
    2afe:	89 83       	std	Y+1, r24	; 0x01
	}
	TCCR2A = reg1;
    2b00:	80 eb       	ldi	r24, 0xB0	; 176
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	29 81       	ldd	r18, Y+1	; 0x01
    2b06:	fc 01       	movw	r30, r24
    2b08:	20 83       	st	Z, r18
	TCCR2B = reg2;
    2b0a:	81 eb       	ldi	r24, 0xB1	; 177
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b10:	fc 01       	movw	r30, r24
    2b12:	20 83       	st	Z, r18

	return RESULT_OK;
    2b14:	80 e0       	ldi	r24, 0x00	; 0
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	08 95       	ret

00002b24 <timer2OutputConfig>:
/* -----------------------------------------------------------------------------
 * Configures the timer2 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <timer2OutputConfig+0x6>
    2b2a:	1f 92       	push	r1
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	8a 83       	std	Y+2, r24	; 0x02
    2b32:	6b 83       	std	Y+3, r22	; 0x03
	uint8 aux8 = TCCR2A;
    2b34:	80 eb       	ldi	r24, 0xB0	; 176
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	fc 01       	movw	r30, r24
    2b3a:	80 81       	ld	r24, Z
    2b3c:	89 83       	std	Y+1, r24	; 0x01

	if(compA != TIMER_PORT_NO_CHANGE){
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	8f 3f       	cpi	r24, 0xFF	; 255
    2b42:	91 f0       	breq	.+36     	; 0x2b68 <timer2OutputConfig+0x44>
		aux8 &= ~(0x03 << COM2A0);
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	8f 73       	andi	r24, 0x3F	; 63
    2b48:	89 83       	std	Y+1, r24	; 0x01
		aux8 |= (compA << COM2A0); 
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	88 2f       	mov	r24, r24
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	38 2f       	mov	r19, r24
    2b52:	35 95       	asr	r19
    2b54:	35 95       	asr	r19
    2b56:	28 2f       	mov	r18, r24
    2b58:	22 95       	swap	r18
    2b5a:	22 0f       	add	r18, r18
    2b5c:	22 0f       	add	r18, r18
    2b5e:	20 7c       	andi	r18, 0xC0	; 192
    2b60:	92 2f       	mov	r25, r18
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	89 2b       	or	r24, r25
    2b66:	89 83       	std	Y+1, r24	; 0x01
	}
	if(compB != TIMER_PORT_NO_CHANGE){
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b6c:	81 f0       	breq	.+32     	; 0x2b8e <timer2OutputConfig+0x6a>
		aux8 &= ~(0x03 << COM2B0);
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	8f 7c       	andi	r24, 0xCF	; 207
    2b72:	89 83       	std	Y+1, r24	; 0x01
		aux8 |= (compB << COM2B0); 
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	88 2f       	mov	r24, r24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	82 95       	swap	r24
    2b7c:	92 95       	swap	r25
    2b7e:	90 7f       	andi	r25, 0xF0	; 240
    2b80:	98 27       	eor	r25, r24
    2b82:	80 7f       	andi	r24, 0xF0	; 240
    2b84:	98 27       	eor	r25, r24
    2b86:	98 2f       	mov	r25, r24
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	89 2b       	or	r24, r25
    2b8c:	89 83       	std	Y+1, r24	; 0x01
	}
	TCCR2A = aux8;
    2b8e:	80 eb       	ldi	r24, 0xB0	; 176
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	29 81       	ldd	r18, Y+1	; 0x01
    2b94:	fc 01       	movw	r30, r24
    2b96:	20 83       	st	Z, r18
	return RESULT_OK;
    2b98:	80 e0       	ldi	r24, 0x00	; 0
}
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	08 95       	ret

00002ba6 <timer2ActivateOverflowInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateOverflowInterrupt(void)
{
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK2, TOIE2);
    2bae:	80 e7       	ldi	r24, 0x70	; 112
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	20 e7       	ldi	r18, 0x70	; 112
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	f9 01       	movw	r30, r18
    2bb8:	20 81       	ld	r18, Z
    2bba:	21 60       	ori	r18, 0x01	; 1
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	20 83       	st	Z, r18
	return RESULT_OK;
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
}
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <timer2DeactivateOverflowInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateOverflowInterrupt(void)
{
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK2, TOIE2);
    2bd0:	80 e7       	ldi	r24, 0x70	; 112
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	20 e7       	ldi	r18, 0x70	; 112
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	f9 01       	movw	r30, r18
    2bda:	20 81       	ld	r18, Z
    2bdc:	2e 7f       	andi	r18, 0xFE	; 254
    2bde:	fc 01       	movw	r30, r24
    2be0:	20 83       	st	Z, r18
	return RESULT_OK;
    2be2:	80 e0       	ldi	r24, 0x00	; 0
}
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	08 95       	ret

00002bea <timer2ClearOverflowInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer2 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearOverflowInterruptRequest(void)
{
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR2, TOV2);
    2bf2:	87 e3       	ldi	r24, 0x37	; 55
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	27 e3       	ldi	r18, 0x37	; 55
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	20 81       	ld	r18, Z
    2bfe:	21 60       	ori	r18, 0x01	; 1
    2c00:	fc 01       	movw	r30, r24
    2c02:	20 83       	st	Z, r18
	return RESULT_OK;
    2c04:	80 e0       	ldi	r24, 0x00	; 0
}
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	08 95       	ret

00002c0c <timer2ActivateCompareAInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareAInterrupt(void)
{
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK2, OCIE2A);
    2c14:	80 e7       	ldi	r24, 0x70	; 112
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	20 e7       	ldi	r18, 0x70	; 112
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	f9 01       	movw	r30, r18
    2c1e:	20 81       	ld	r18, Z
    2c20:	22 60       	ori	r18, 0x02	; 2
    2c22:	fc 01       	movw	r30, r24
    2c24:	20 83       	st	Z, r18
	return RESULT_OK;
    2c26:	80 e0       	ldi	r24, 0x00	; 0
}
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	08 95       	ret

00002c2e <timer2DeactivateCompareAInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareAInterrupt(void)
{
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK2, OCIE2A);
    2c36:	80 e7       	ldi	r24, 0x70	; 112
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	20 e7       	ldi	r18, 0x70	; 112
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	f9 01       	movw	r30, r18
    2c40:	20 81       	ld	r18, Z
    2c42:	2d 7f       	andi	r18, 0xFD	; 253
    2c44:	fc 01       	movw	r30, r24
    2c46:	20 83       	st	Z, r18
	return RESULT_OK;
    2c48:	80 e0       	ldi	r24, 0x00	; 0
}
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	08 95       	ret

00002c50 <timer2ClearCompareAInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer2 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareAInterruptRequest(void)
{
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR2, OCF2A);
    2c58:	87 e3       	ldi	r24, 0x37	; 55
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	27 e3       	ldi	r18, 0x37	; 55
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	f9 01       	movw	r30, r18
    2c62:	20 81       	ld	r18, Z
    2c64:	22 60       	ori	r18, 0x02	; 2
    2c66:	fc 01       	movw	r30, r24
    2c68:	20 83       	st	Z, r18
	return RESULT_OK;
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	08 95       	ret

00002c72 <timer2ActivateCompareBInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareBInterrupt(void)
{
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
	setBit(TIMSK2, OCIE2B);
    2c7a:	80 e7       	ldi	r24, 0x70	; 112
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	20 e7       	ldi	r18, 0x70	; 112
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	f9 01       	movw	r30, r18
    2c84:	20 81       	ld	r18, Z
    2c86:	24 60       	ori	r18, 0x04	; 4
    2c88:	fc 01       	movw	r30, r24
    2c8a:	20 83       	st	Z, r18
	return RESULT_OK;
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	08 95       	ret

00002c94 <timer2DeactivateCompareBInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareBInterrupt(void)
{
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
	clrBit(TIMSK2, OCIE2B);
    2c9c:	80 e7       	ldi	r24, 0x70	; 112
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	20 e7       	ldi	r18, 0x70	; 112
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	f9 01       	movw	r30, r18
    2ca6:	20 81       	ld	r18, Z
    2ca8:	2b 7f       	andi	r18, 0xFB	; 251
    2caa:	fc 01       	movw	r30, r24
    2cac:	20 83       	st	Z, r18
	return RESULT_OK;
    2cae:	80 e0       	ldi	r24, 0x00	; 0
}
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	08 95       	ret

00002cb6 <timer2ClearCompareBInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the timer2 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareBInterruptRequest(void)
{
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	setBit(TIFR2, OCF2B);
    2cbe:	87 e3       	ldi	r24, 0x37	; 55
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	27 e3       	ldi	r18, 0x37	; 55
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	f9 01       	movw	r30, r18
    2cc8:	20 81       	ld	r18, Z
    2cca:	24 60       	ori	r18, 0x04	; 4
    2ccc:	fc 01       	movw	r30, r24
    2cce:	20 83       	st	Z, r18
	return RESULT_OK;
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
}
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	08 95       	ret

00002cd8 <timer2ForceCompareA>:
/* -----------------------------------------------------------------------------
 * Forces a comparison on the output compare A of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareA(void)
{
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
	setBit(TCCR2B, FOC2A);
    2ce0:	81 eb       	ldi	r24, 0xB1	; 177
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	21 eb       	ldi	r18, 0xB1	; 177
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	f9 01       	movw	r30, r18
    2cea:	20 81       	ld	r18, Z
    2cec:	20 68       	ori	r18, 0x80	; 128
    2cee:	fc 01       	movw	r30, r24
    2cf0:	20 83       	st	Z, r18
	return RESULT_OK;
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
}
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	08 95       	ret

00002cfa <timer2ForceCompareB>:
/* -----------------------------------------------------------------------------
 * Forces a comparison on the output compare B of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareB(void)
{
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
	setBit(TCCR2B, FOC2B);
    2d02:	81 eb       	ldi	r24, 0xB1	; 177
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	21 eb       	ldi	r18, 0xB1	; 177
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	f9 01       	movw	r30, r18
    2d0c:	20 81       	ld	r18, Z
    2d0e:	20 64       	ori	r18, 0x40	; 64
    2d10:	fc 01       	movw	r30, r24
    2d12:	20 83       	st	Z, r18
	return RESULT_OK;
    2d14:	80 e0       	ldi	r24, 0x00	; 0
}
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	08 95       	ret

00002d1c <timer2SetCounterValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer2 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCounterValue(uint8 value)
{
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	1f 92       	push	r1
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = value;
    2d28:	82 eb       	ldi	r24, 0xB2	; 178
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	29 81       	ldd	r18, Y+1	; 0x01
    2d2e:	fc 01       	movw	r30, r24
    2d30:	20 83       	st	Z, r18
	return RESULT_OK;
    2d32:	80 e0       	ldi	r24, 0x00	; 0
}
    2d34:	0f 90       	pop	r0
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	08 95       	ret

00002d3c <timer2GetCounterValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer2 counter value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCounterValue(void)
{
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    2d44:	82 eb       	ldi	r24, 0xB2	; 178
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	fc 01       	movw	r30, r24
    2d4a:	80 81       	ld	r24, Z
}
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
    2d50:	08 95       	ret

00002d52 <timer2SetCompareAValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer2 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareAValue(uint8 value)
{
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	1f 92       	push	r1
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	89 83       	std	Y+1, r24	; 0x01
	OCR2A = value;
    2d5e:	83 eb       	ldi	r24, 0xB3	; 179
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	29 81       	ldd	r18, Y+1	; 0x01
    2d64:	fc 01       	movw	r30, r24
    2d66:	20 83       	st	Z, r18
	return RESULT_OK;
    2d68:	80 e0       	ldi	r24, 0x00	; 0
}
    2d6a:	0f 90       	pop	r0
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	08 95       	ret

00002d72 <timer2GetCompareAValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer2 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareAValue(void)
{
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
	return OCR2A;
    2d7a:	83 eb       	ldi	r24, 0xB3	; 179
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	fc 01       	movw	r30, r24
    2d80:	80 81       	ld	r24, Z
}
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	08 95       	ret

00002d88 <timer2SetCompareBValue>:
/* -----------------------------------------------------------------------------
 * Sets the timer2 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareBValue(uint8 value)
{
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	1f 92       	push	r1
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	89 83       	std	Y+1, r24	; 0x01
	OCR2B = value;
    2d94:	84 eb       	ldi	r24, 0xB4	; 180
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	29 81       	ldd	r18, Y+1	; 0x01
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	20 83       	st	Z, r18
	return RESULT_OK;
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
}
    2da0:	0f 90       	pop	r0
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	08 95       	ret

00002da8 <timer2GetCompareBValue>:
/* -----------------------------------------------------------------------------
 * Gets the timer2 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareBValue(void)
{
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
	return OCR2B;
    2db0:	84 eb       	ldi	r24, 0xB4	; 180
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	fc 01       	movw	r30, r24
    2db6:	80 81       	ld	r24, Z
}
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	08 95       	ret

00002dbe <adcConfig>:
/* -----------------------------------------------------------------------------
 * Configures the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
    2dbe:	cf 93       	push	r28
    2dc0:	df 93       	push	r29
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <adcConfig+0x6>
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <adcConfig+0x8>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	8a 83       	std	Y+2, r24	; 0x02
    2dcc:	6b 83       	std	Y+3, r22	; 0x03
    2dce:	4c 83       	std	Y+4, r20	; 0x04
	uint8 reg = 0;
    2dd0:	19 82       	std	Y+1, r1	; 0x01

	if(reference != ADC_REFERENCE_NO_CHANGE){
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd6:	e1 f0       	breq	.+56     	; 0x2e10 <adcConfig+0x52>
		reg = ADMUX;
    2dd8:	8c e7       	ldi	r24, 0x7C	; 124
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	fc 01       	movw	r30, r24
    2dde:	80 81       	ld	r24, Z
    2de0:	89 83       	std	Y+1, r24	; 0x01
		reg &= ~(0x03 << REFS0);
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	8f 73       	andi	r24, 0x3F	; 63
    2de6:	89 83       	std	Y+1, r24	; 0x01
		reg |= reference << REFS0;
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	88 2f       	mov	r24, r24
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	38 2f       	mov	r19, r24
    2df0:	35 95       	asr	r19
    2df2:	35 95       	asr	r19
    2df4:	28 2f       	mov	r18, r24
    2df6:	22 95       	swap	r18
    2df8:	22 0f       	add	r18, r18
    2dfa:	22 0f       	add	r18, r18
    2dfc:	20 7c       	andi	r18, 0xC0	; 192
    2dfe:	92 2f       	mov	r25, r18
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	89 2b       	or	r24, r25
    2e04:	89 83       	std	Y+1, r24	; 0x01
		ADMUX = reg;
    2e06:	8c e7       	ldi	r24, 0x7C	; 124
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	29 81       	ldd	r18, Y+1	; 0x01
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	20 83       	st	Z, r18
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
    2e10:	8c 81       	ldd	r24, Y+4	; 0x04
    2e12:	8f 3f       	cpi	r24, 0xFF	; 255
    2e14:	89 f0       	breq	.+34     	; 0x2e38 <adcConfig+0x7a>
		reg = ADCSRA;
    2e16:	8a e7       	ldi	r24, 0x7A	; 122
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	80 81       	ld	r24, Z
    2e1e:	89 83       	std	Y+1, r24	; 0x01
		reg &= ~(0x07 << ADPS0);
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	88 7f       	andi	r24, 0xF8	; 248
    2e24:	89 83       	std	Y+1, r24	; 0x01
		reg |= prescaler << ADPS0;
    2e26:	99 81       	ldd	r25, Y+1	; 0x01
    2e28:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2a:	89 2b       	or	r24, r25
    2e2c:	89 83       	std	Y+1, r24	; 0x01
		ADCSRA = reg;
    2e2e:	8a e7       	ldi	r24, 0x7A	; 122
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	29 81       	ldd	r18, Y+1	; 0x01
    2e34:	fc 01       	movw	r30, r24
    2e36:	20 83       	st	Z, r18
	}

	if(mode != ADC_MODE_NO_CHANGE){
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <adcConfig+0x82>
    2e3e:	5d c0       	rjmp	.+186    	; 0x2efa <adcConfig+0x13c>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	88 23       	and	r24, r24
    2e44:	51 f4       	brne	.+20     	; 0x2e5a <adcConfig+0x9c>
			clrBit(ADCSRA, ADATE);
    2e46:	8a e7       	ldi	r24, 0x7A	; 122
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	2a e7       	ldi	r18, 0x7A	; 122
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	f9 01       	movw	r30, r18
    2e50:	20 81       	ld	r18, Z
    2e52:	2f 7d       	andi	r18, 0xDF	; 223
    2e54:	fc 01       	movw	r30, r24
    2e56:	20 83       	st	Z, r18
    2e58:	50 c0       	rjmp	.+160    	; 0x2efa <adcConfig+0x13c>
		else{
			reg = ADCSRB;
    2e5a:	8b e7       	ldi	r24, 0x7B	; 123
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	fc 01       	movw	r30, r24
    2e60:	80 81       	ld	r24, Z
    2e62:	89 83       	std	Y+1, r24	; 0x01
			reg &= ~(0x07 << ADTS0);
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	88 7f       	andi	r24, 0xF8	; 248
    2e68:	89 83       	std	Y+1, r24	; 0x01
			switch(mode){
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	88 2f       	mov	r24, r24
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	09 2e       	mov	r0, r25
    2e72:	00 0c       	add	r0, r0
    2e74:	aa 0b       	sbc	r26, r26
    2e76:	bb 0b       	sbc	r27, r27
    2e78:	42 e0       	ldi	r20, 0x02	; 2
    2e7a:	50 e0       	ldi	r21, 0x00	; 0
    2e7c:	26 e0       	ldi	r18, 0x06	; 6
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	84 1b       	sub	r24, r20
    2e82:	95 0b       	sbc	r25, r21
    2e84:	28 17       	cp	r18, r24
    2e86:	39 07       	cpc	r19, r25
    2e88:	40 f1       	brcs	.+80     	; 0x2eda <adcConfig+0x11c>
    2e8a:	86 5b       	subi	r24, 0xB6	; 182
    2e8c:	98 4e       	sbci	r25, 0xE8	; 232
    2e8e:	fc 01       	movw	r30, r24
    2e90:	0c 94 94 23 	jmp	0x4728	; 0x4728 <__tablejump2__>
    2e94:	51 17       	cp	r21, r17
    2e96:	55 17       	cp	r21, r21
    2e98:	59 17       	cp	r21, r25
    2e9a:	5d 17       	cp	r21, r29
    2e9c:	61 17       	cp	r22, r17
    2e9e:	65 17       	cp	r22, r21
    2ea0:	69 17       	cp	r22, r25
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	81 60       	ori	r24, 0x01	; 1
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	1a c0       	rjmp	.+52     	; 0x2ede <adcConfig+0x120>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	82 60       	ori	r24, 0x02	; 2
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	16 c0       	rjmp	.+44     	; 0x2ede <adcConfig+0x120>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	83 60       	ori	r24, 0x03	; 3
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	12 c0       	rjmp	.+36     	; 0x2ede <adcConfig+0x120>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	84 60       	ori	r24, 0x04	; 4
    2ebe:	89 83       	std	Y+1, r24	; 0x01
    2ec0:	0e c0       	rjmp	.+28     	; 0x2ede <adcConfig+0x120>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	85 60       	ori	r24, 0x05	; 5
    2ec6:	89 83       	std	Y+1, r24	; 0x01
    2ec8:	0a c0       	rjmp	.+20     	; 0x2ede <adcConfig+0x120>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	86 60       	ori	r24, 0x06	; 6
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	06 c0       	rjmp	.+12     	; 0x2ede <adcConfig+0x120>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	87 60       	ori	r24, 0x07	; 7
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <adcConfig+0x120>
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
    2eda:	87 e0       	ldi	r24, 0x07	; 7
    2edc:	0f c0       	rjmp	.+30     	; 0x2efc <adcConfig+0x13e>
			}
			ADCSRB = reg;
    2ede:	8b e7       	ldi	r24, 0x7B	; 123
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	29 81       	ldd	r18, Y+1	; 0x01
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	20 83       	st	Z, r18
			setBit(ADCSRA, ADATE);
    2ee8:	8a e7       	ldi	r24, 0x7A	; 122
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	2a e7       	ldi	r18, 0x7A	; 122
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	f9 01       	movw	r30, r18
    2ef2:	20 81       	ld	r18, Z
    2ef4:	20 62       	ori	r18, 0x20	; 32
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	20 83       	st	Z, r18
		}
	}

	return RESULT_OK;
    2efa:	80 e0       	ldi	r24, 0x00	; 0
 }
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	08 95       	ret

00002f0a <adcSelectChannel>:
/* -----------------------------------------------------------------------------
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <adcSelectChannel+0x6>
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 reg = ADMUX;
    2f16:	8c e7       	ldi	r24, 0x7C	; 124
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	80 81       	ld	r24, Z
    2f1e:	89 83       	std	Y+1, r24	; 0x01

	reg &= ~(0x0F << MUX0);
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	80 7f       	andi	r24, 0xF0	; 240
    2f24:	89 83       	std	Y+1, r24	; 0x01
	reg |= (channel << MUX0);
    2f26:	99 81       	ldd	r25, Y+1	; 0x01
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	89 2b       	or	r24, r25
    2f2c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = reg;
    2f2e:	8c e7       	ldi	r24, 0x7C	; 124
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	29 81       	ldd	r18, Y+1	; 0x01
    2f34:	fc 01       	movw	r30, r24
    2f36:	20 83       	st	Z, r18

	return RESULT_OK;
    2f38:	80 e0       	ldi	r24, 0x00	; 0
}
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	08 95       	ret

00002f44 <adcEnableDigitalInput>:
/* -----------------------------------------------------------------------------
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcEnableDigitalInput(uint8 flagInputs)
{
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	1f 92       	push	r1
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	89 83       	std	Y+1, r24	; 0x01
	DIDR0 &= (~flagInputs);
    2f50:	8e e7       	ldi	r24, 0x7E	; 126
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	2e e7       	ldi	r18, 0x7E	; 126
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	f9 01       	movw	r30, r18
    2f5a:	20 81       	ld	r18, Z
    2f5c:	32 2f       	mov	r19, r18
    2f5e:	29 81       	ldd	r18, Y+1	; 0x01
    2f60:	20 95       	com	r18
    2f62:	23 23       	and	r18, r19
    2f64:	fc 01       	movw	r30, r24
    2f66:	20 83       	st	Z, r18

	return RESULT_OK;
    2f68:	80 e0       	ldi	r24, 0x00	; 0
}
    2f6a:	0f 90       	pop	r0
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	08 95       	ret

00002f72 <adcDisableDigitalInput>:
/* -----------------------------------------------------------------------------
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	1f 92       	push	r1
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	89 83       	std	Y+1, r24	; 0x01
	DIDR0 |= flagInputs;
    2f7e:	8e e7       	ldi	r24, 0x7E	; 126
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	2e e7       	ldi	r18, 0x7E	; 126
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	f9 01       	movw	r30, r18
    2f88:	30 81       	ld	r19, Z
    2f8a:	29 81       	ldd	r18, Y+1	; 0x01
    2f8c:	23 2b       	or	r18, r19
    2f8e:	fc 01       	movw	r30, r24
    2f90:	20 83       	st	Z, r18

	return RESULT_OK;
    2f92:	80 e0       	ldi	r24, 0x00	; 0
}
    2f94:	0f 90       	pop	r0
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	08 95       	ret

00002f9c <adcDataPresentation>:
/* -----------------------------------------------------------------------------
 * Sets the adc data presentation
 * -------------------------------------------------------------------------- */

resultValue_t adcDataPresentation(adcDataPresentation_t presentation)
{
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	1f 92       	push	r1
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	89 83       	std	Y+1, r24	; 0x01
	if(presentation == ADC_LEFT_ADJUSTED)
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	88 23       	and	r24, r24
    2fac:	51 f4       	brne	.+20     	; 0x2fc2 <adcDataPresentation+0x26>
		setBit(ADMUX, ADLAR);
    2fae:	8c e7       	ldi	r24, 0x7C	; 124
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	2c e7       	ldi	r18, 0x7C	; 124
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	f9 01       	movw	r30, r18
    2fb8:	20 81       	ld	r18, Z
    2fba:	20 62       	ori	r18, 0x20	; 32
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	20 83       	st	Z, r18
    2fc0:	09 c0       	rjmp	.+18     	; 0x2fd4 <adcDataPresentation+0x38>
	else
		clrBit(ADMUX, ADLAR);
    2fc2:	8c e7       	ldi	r24, 0x7C	; 124
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	2c e7       	ldi	r18, 0x7C	; 124
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	f9 01       	movw	r30, r18
    2fcc:	20 81       	ld	r18, Z
    2fce:	2f 7d       	andi	r18, 0xDF	; 223
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	20 83       	st	Z, r18

	return RESULT_OK;
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
}
    2fd6:	0f 90       	pop	r0
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	08 95       	ret

00002fde <adcEnable>:
/* -----------------------------------------------------------------------------
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
	setBit(ADCSRA, ADEN);
    2fe6:	8a e7       	ldi	r24, 0x7A	; 122
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	2a e7       	ldi	r18, 0x7A	; 122
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	f9 01       	movw	r30, r18
    2ff0:	20 81       	ld	r18, Z
    2ff2:	20 68       	ori	r18, 0x80	; 128
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	20 83       	st	Z, r18

	return RESULT_OK;
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
}
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	08 95       	ret

00003000 <adcDisable>:
/* -----------------------------------------------------------------------------
 * Disables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcDisable(void)
{
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
	clrBit(ADCSRA, ADEN);
    3008:	8a e7       	ldi	r24, 0x7A	; 122
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	2a e7       	ldi	r18, 0x7A	; 122
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	f9 01       	movw	r30, r18
    3012:	20 81       	ld	r18, Z
    3014:	2f 77       	andi	r18, 0x7F	; 127
    3016:	fc 01       	movw	r30, r24
    3018:	20 83       	st	Z, r18

	return RESULT_OK;
    301a:	80 e0       	ldi	r24, 0x00	; 0
}
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	08 95       	ret

00003022 <adcClearInterruptRequest>:
/* -----------------------------------------------------------------------------
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
	setBit(ADCSRA, ADIF);
    302a:	8a e7       	ldi	r24, 0x7A	; 122
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	2a e7       	ldi	r18, 0x7A	; 122
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	f9 01       	movw	r30, r18
    3034:	20 81       	ld	r18, Z
    3036:	20 61       	ori	r18, 0x10	; 16
    3038:	fc 01       	movw	r30, r24
    303a:	20 83       	st	Z, r18

	return RESULT_OK;
    303c:	80 e0       	ldi	r24, 0x00	; 0
}
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	08 95       	ret

00003044 <adcActivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
	setBit(ADCSRA, ADIE);
    304c:	8a e7       	ldi	r24, 0x7A	; 122
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	2a e7       	ldi	r18, 0x7A	; 122
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	f9 01       	movw	r30, r18
    3056:	20 81       	ld	r18, Z
    3058:	28 60       	ori	r18, 0x08	; 8
    305a:	fc 01       	movw	r30, r24
    305c:	20 83       	st	Z, r18

	return RESULT_OK;
    305e:	80 e0       	ldi	r24, 0x00	; 0
}
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	08 95       	ret

00003066 <adcDeactivateInterrupt>:
/* -----------------------------------------------------------------------------
 * Disables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcDeactivateInterrupt(void)
{
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
	clrBit(ADCSRA, ADIE);
    306e:	8a e7       	ldi	r24, 0x7A	; 122
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	2a e7       	ldi	r18, 0x7A	; 122
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	f9 01       	movw	r30, r18
    3078:	20 81       	ld	r18, Z
    307a:	27 7f       	andi	r18, 0xF7	; 247
    307c:	fc 01       	movw	r30, r24
    307e:	20 83       	st	Z, r18

	return RESULT_OK;
    3080:	80 e0       	ldi	r24, 0x00	; 0
}
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	08 95       	ret

00003088 <adcStartConversion>:
/* -----------------------------------------------------------------------------
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
	setBit(ADCSRA, ADSC);
    3090:	8a e7       	ldi	r24, 0x7A	; 122
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	2a e7       	ldi	r18, 0x7A	; 122
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	f9 01       	movw	r30, r18
    309a:	20 81       	ld	r18, Z
    309c:	20 64       	ori	r18, 0x40	; 64
    309e:	fc 01       	movw	r30, r24
    30a0:	20 83       	st	Z, r18

	return RESULT_OK;
    30a2:	80 e0       	ldi	r24, 0x00	; 0
}
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	08 95       	ret

000030aa <adcIsBusy>:
/* -----------------------------------------------------------------------------
 * Returns if an adc conversion is running
 * -------------------------------------------------------------------------- */

bool_t adcIsBusy(void)
{
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
	return isBitSet(ADCSRA, ADSC);
    30b2:	8a e7       	ldi	r24, 0x7A	; 122
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	fc 01       	movw	r30, r24
    30b8:	80 81       	ld	r24, Z
    30ba:	82 95       	swap	r24
    30bc:	86 95       	lsr	r24
    30be:	86 95       	lsr	r24
    30c0:	83 70       	andi	r24, 0x03	; 3
    30c2:	81 70       	andi	r24, 0x01	; 1
}
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	08 95       	ret

000030ca <adcWaitUntilConversionFinish>:
/* -----------------------------------------------------------------------------
 * Waits until the current conversion is finished
 * -------------------------------------------------------------------------- */

resultValue_t adcWaitUntilConversionFinish(void)
{
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
	waitUntilBitIsClear(ADCSRA, ADSC);
    30d2:	8a e7       	ldi	r24, 0x7A	; 122
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	fc 01       	movw	r30, r24
    30d8:	80 81       	ld	r24, Z
    30da:	82 95       	swap	r24
    30dc:	86 95       	lsr	r24
    30de:	86 95       	lsr	r24
    30e0:	83 70       	andi	r24, 0x03	; 3
    30e2:	88 2f       	mov	r24, r24
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	81 70       	andi	r24, 0x01	; 1
    30e8:	99 27       	eor	r25, r25
    30ea:	89 2b       	or	r24, r25
    30ec:	91 f7       	brne	.-28     	; 0x30d2 <adcWaitUntilConversionFinish+0x8>
	return RESULT_OK;
    30ee:	80 e0       	ldi	r24, 0x00	; 0
}
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	08 95       	ret

000030f6 <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
    30f6:	af 92       	push	r10
    30f8:	bf 92       	push	r11
    30fa:	cf 92       	push	r12
    30fc:	df 92       	push	r13
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	65 97       	sbiw	r28, 0x15	; 21
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	8e 87       	std	Y+14, r24	; 0x0e
    311c:	4f 87       	std	Y+15, r20	; 0x0f
    311e:	58 8b       	std	Y+16, r21	; 0x10
    3120:	69 8b       	std	Y+17, r22	; 0x11
    3122:	7a 8b       	std	Y+18, r23	; 0x12
    3124:	2b 8b       	std	Y+19, r18	; 0x13
    3126:	0c 8b       	std	Y+20, r16	; 0x14
    3128:	ed 8a       	std	Y+21, r14	; 0x15
	uint8 reg1 = UCSR0A;
    312a:	80 ec       	ldi	r24, 0xC0	; 192
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	fc 01       	movw	r30, r24
    3130:	80 81       	ld	r24, Z
    3132:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 reg2 = UCSR0B;
    3134:	81 ec       	ldi	r24, 0xC1	; 193
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	fc 01       	movw	r30, r24
    313a:	80 81       	ld	r24, Z
    313c:	8c 87       	std	Y+12, r24	; 0x0c
	uint8 reg3 = UCSR0C;
    313e:	82 ec       	ldi	r24, 0xC2	; 194
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	fc 01       	movw	r30, r24
    3144:	80 81       	ld	r24, Z
    3146:	89 83       	std	Y+1, r24	; 0x01
	uint8 modeAux = 0;
    3148:	1a 82       	std	Y+2, r1	; 0x02
	uint8 aux8 = 0;
    314a:	1d 86       	std	Y+13, r1	; 0x0d
	uint64 aux64 = 0;
    314c:	1b 82       	std	Y+3, r1	; 0x03
    314e:	1c 82       	std	Y+4, r1	; 0x04
    3150:	1d 82       	std	Y+5, r1	; 0x05
    3152:	1e 82       	std	Y+6, r1	; 0x06
    3154:	1f 82       	std	Y+7, r1	; 0x07
    3156:	18 86       	std	Y+8, r1	; 0x08
    3158:	19 86       	std	Y+9, r1	; 0x09
    315a:	1a 86       	std	Y+10, r1	; 0x0a

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));
    315c:	8b 85       	ldd	r24, Y+11	; 0x0b
    315e:	83 7e       	andi	r24, 0xE3	; 227
    3160:	8b 87       	std	Y+11, r24	; 0x0b

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
    3162:	8d 89       	ldd	r24, Y+21	; 0x15
    3164:	8f 3f       	cpi	r24, 0xFF	; 255
    3166:	91 f0       	breq	.+36     	; 0x318c <usartConfig+0x96>
		switch(stopBits){
    3168:	8d 89       	ldd	r24, Y+21	; 0x15
    316a:	88 2f       	mov	r24, r24
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	00 97       	sbiw	r24, 0x00	; 0
    3170:	19 f0       	breq	.+6      	; 0x3178 <usartConfig+0x82>
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	29 f0       	breq	.+10     	; 0x3180 <usartConfig+0x8a>
    3176:	08 c0       	rjmp	.+16     	; 0x3188 <usartConfig+0x92>
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	87 7f       	andi	r24, 0xF7	; 247
    317c:	89 83       	std	Y+1, r24	; 0x01
    317e:	06 c0       	rjmp	.+12     	; 0x318c <usartConfig+0x96>
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	88 60       	ori	r24, 0x08	; 8
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	02 c0       	rjmp	.+4      	; 0x318c <usartConfig+0x96>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
    3188:	87 e0       	ldi	r24, 0x07	; 7
    318a:	4b c1       	rjmp	.+662    	; 0x3422 <usartConfig+0x32c>
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
    318c:	8c 89       	ldd	r24, Y+20	; 0x14
    318e:	8f 3f       	cpi	r24, 0xFF	; 255
    3190:	31 f1       	breq	.+76     	; 0x31de <usartConfig+0xe8>
		reg3 &= ~(0x03 << UPM00);
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	8f 7c       	andi	r24, 0xCF	; 207
    3196:	89 83       	std	Y+1, r24	; 0x01
		switch(parity){
    3198:	8c 89       	ldd	r24, Y+20	; 0x14
    319a:	88 2f       	mov	r24, r24
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	82 30       	cpi	r24, 0x02	; 2
    31a0:	91 05       	cpc	r25, r1
    31a2:	71 f0       	breq	.+28     	; 0x31c0 <usartConfig+0xca>
    31a4:	83 30       	cpi	r24, 0x03	; 3
    31a6:	91 05       	cpc	r25, r1
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <usartConfig+0xbe>
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	b9 f0       	breq	.+46     	; 0x31dc <usartConfig+0xe6>
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	59 f0       	breq	.+22     	; 0x31c8 <usartConfig+0xd2>
    31b2:	12 c0       	rjmp	.+36     	; 0x31d8 <usartConfig+0xe2>
    31b4:	83 30       	cpi	r24, 0x03	; 3
    31b6:	91 05       	cpc	r25, r1
    31b8:	59 f0       	breq	.+22     	; 0x31d0 <usartConfig+0xda>
    31ba:	04 97       	sbiw	r24, 0x04	; 4
    31bc:	59 f0       	breq	.+22     	; 0x31d4 <usartConfig+0xde>
    31be:	0c c0       	rjmp	.+24     	; 0x31d8 <usartConfig+0xe2>
			case USART_PARITY_NONE:		break;
			case USART_PARITY_EVEN:		reg3 |= (0x02 << UPM00);	break;
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	80 62       	ori	r24, 0x20	; 32
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	0b c0       	rjmp	.+22     	; 0x31de <usartConfig+0xe8>
			case USART_PARITY_ODD:		reg3 |= (0x03 << UPM00);	break;
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	80 63       	ori	r24, 0x30	; 48
    31cc:	89 83       	std	Y+1, r24	; 0x01
    31ce:	07 c0       	rjmp	.+14     	; 0x31de <usartConfig+0xe8>
			case USART_PARITY_MARK:		return RESULT_USART_PARITY_UNSUPORTED;	break;
    31d0:	85 e0       	ldi	r24, 0x05	; 5
    31d2:	27 c1       	rjmp	.+590    	; 0x3422 <usartConfig+0x32c>
			case USART_PARITY_SPACE:	return RESULT_USART_PARITY_UNSUPORTED;	break;
    31d4:	85 e0       	ldi	r24, 0x05	; 5
    31d6:	25 c1       	rjmp	.+586    	; 0x3422 <usartConfig+0x32c>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
    31d8:	85 e0       	ldi	r24, 0x05	; 5
    31da:	23 c1       	rjmp	.+582    	; 0x3422 <usartConfig+0x32c>
			case USART_PARITY_NONE:		break;
    31dc:	00 00       	nop
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
    31de:	8b 89       	ldd	r24, Y+19	; 0x13
    31e0:	8f 3f       	cpi	r24, 0xFF	; 255
    31e2:	81 f1       	breq	.+96     	; 0x3244 <usartConfig+0x14e>
		clrBit(reg2, UCSZ02);
    31e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    31e6:	8b 7f       	andi	r24, 0xFB	; 251
    31e8:	8c 87       	std	Y+12, r24	; 0x0c
		reg3 &= ~(0x03 << UCSZ00);
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	89 7f       	andi	r24, 0xF9	; 249
    31ee:	89 83       	std	Y+1, r24	; 0x01
		switch(dataBits){
    31f0:	8b 89       	ldd	r24, Y+19	; 0x13
    31f2:	88 2f       	mov	r24, r24
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	82 30       	cpi	r24, 0x02	; 2
    31f8:	91 05       	cpc	r25, r1
    31fa:	91 f0       	breq	.+36     	; 0x3220 <usartConfig+0x12a>
    31fc:	83 30       	cpi	r24, 0x03	; 3
    31fe:	91 05       	cpc	r25, r1
    3200:	2c f4       	brge	.+10     	; 0x320c <usartConfig+0x116>
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	f1 f0       	breq	.+60     	; 0x3242 <usartConfig+0x14c>
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	39 f0       	breq	.+14     	; 0x3218 <usartConfig+0x122>
    320a:	19 c0       	rjmp	.+50     	; 0x323e <usartConfig+0x148>
    320c:	83 30       	cpi	r24, 0x03	; 3
    320e:	91 05       	cpc	r25, r1
    3210:	59 f0       	breq	.+22     	; 0x3228 <usartConfig+0x132>
    3212:	04 97       	sbiw	r24, 0x04	; 4
    3214:	69 f0       	breq	.+26     	; 0x3230 <usartConfig+0x13a>
    3216:	13 c0       	rjmp	.+38     	; 0x323e <usartConfig+0x148>
		case USART_DATA_BITS_5:
			break;
		case USART_DATA_BITS_6:
			reg3 |= (0x01 << UCSZ00);
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	82 60       	ori	r24, 0x02	; 2
    321c:	89 83       	std	Y+1, r24	; 0x01
			break;
    321e:	12 c0       	rjmp	.+36     	; 0x3244 <usartConfig+0x14e>
		case USART_DATA_BITS_7:
			reg3 |= (0x02 << UCSZ00);
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	84 60       	ori	r24, 0x04	; 4
    3224:	89 83       	std	Y+1, r24	; 0x01
			break;
    3226:	0e c0       	rjmp	.+28     	; 0x3244 <usartConfig+0x14e>
		case USART_DATA_BITS_8:
			reg3 |= (0x03 << UCSZ00);
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	86 60       	ori	r24, 0x06	; 6
    322c:	89 83       	std	Y+1, r24	; 0x01
			break;
    322e:	0a c0       	rjmp	.+20     	; 0x3244 <usartConfig+0x14e>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
    3230:	8c 85       	ldd	r24, Y+12	; 0x0c
    3232:	84 60       	ori	r24, 0x04	; 4
    3234:	8c 87       	std	Y+12, r24	; 0x0c
			reg3 |= (0x03 << UCSZ00);
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	86 60       	ori	r24, 0x06	; 6
    323a:	89 83       	std	Y+1, r24	; 0x01
			break;
    323c:	03 c0       	rjmp	.+6      	; 0x3244 <usartConfig+0x14e>
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
    323e:	85 e0       	ldi	r24, 0x05	; 5
    3240:	f0 c0       	rjmp	.+480    	; 0x3422 <usartConfig+0x32c>
			break;
    3242:	00 00       	nop
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
    3244:	8e 85       	ldd	r24, Y+14	; 0x0e
    3246:	8f 3f       	cpi	r24, 0xFF	; 255
    3248:	a1 f1       	breq	.+104    	; 0x32b2 <usartConfig+0x1bc>
		modeAux = mode;
    324a:	8e 85       	ldd	r24, Y+14	; 0x0e
    324c:	8a 83       	std	Y+2, r24	; 0x02
		reg3 &= ~(0x03 << UMSEL00);
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	8f 73       	andi	r24, 0x3F	; 63
    3252:	89 83       	std	Y+1, r24	; 0x01
		clrBit(reg1, U2X0);				// Single Speed
    3254:	8b 85       	ldd	r24, Y+11	; 0x0b
    3256:	8d 7f       	andi	r24, 0xFD	; 253
    3258:	8b 87       	std	Y+11, r24	; 0x0b
		clrBit(reg3, UCPOL0);			// Polarity
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	8e 7f       	andi	r24, 0xFE	; 254
    325e:	89 83       	std	Y+1, r24	; 0x01
		switch(mode){
    3260:	8e 85       	ldd	r24, Y+14	; 0x0e
    3262:	88 2f       	mov	r24, r24
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	82 30       	cpi	r24, 0x02	; 2
    3268:	91 05       	cpc	r25, r1
    326a:	99 f0       	breq	.+38     	; 0x3292 <usartConfig+0x19c>
    326c:	83 30       	cpi	r24, 0x03	; 3
    326e:	91 05       	cpc	r25, r1
    3270:	34 f4       	brge	.+12     	; 0x327e <usartConfig+0x188>
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	09 f4       	brne	.+2      	; 0x3278 <usartConfig+0x182>
    3276:	42 c0       	rjmp	.+132    	; 0x32fc <usartConfig+0x206>
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	39 f0       	breq	.+14     	; 0x328a <usartConfig+0x194>
    327c:	40 c0       	rjmp	.+128    	; 0x32fe <usartConfig+0x208>
    327e:	84 30       	cpi	r24, 0x04	; 4
    3280:	91 05       	cpc	r25, r1
    3282:	79 f0       	breq	.+30     	; 0x32a2 <usartConfig+0x1ac>
    3284:	04 97       	sbiw	r24, 0x04	; 4
    3286:	4c f0       	brlt	.+18     	; 0x329a <usartConfig+0x1a4>
		case USART_MODE_NO_CHANGE:
			break;
    3288:	3a c0       	rjmp	.+116    	; 0x32fe <usartConfig+0x208>
		case USART_MODE_ASYNCHRONOUS:
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			setBit(reg1, U2X0);			// Double Speed
    328a:	8b 85       	ldd	r24, Y+11	; 0x0b
    328c:	82 60       	ori	r24, 0x02	; 2
    328e:	8b 87       	std	Y+11, r24	; 0x0b
			break;
    3290:	36 c0       	rjmp	.+108    	; 0x32fe <usartConfig+0x208>
		case USART_MODE_SYNCHRONOUS_XCK_FALLING:
			reg3 |= (1 << UMSEL00);		// Synchronous Mode
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	80 64       	ori	r24, 0x40	; 64
    3296:	89 83       	std	Y+1, r24	; 0x01
			break;
    3298:	32 c0       	rjmp	.+100    	; 0x32fe <usartConfig+0x208>
		case USART_MODE_SYNCHRONOUS_XCK_RISING:
			reg3 |= (1 << UMSEL00);		// Synchronous Mode
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	80 64       	ori	r24, 0x40	; 64
    329e:	89 83       	std	Y+1, r24	; 0x01
			break;
    32a0:	2e c0       	rjmp	.+92     	; 0x32fe <usartConfig+0x208>
		case USART_MODE_SYNCHRONOUS_SPI:
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	80 6c       	ori	r24, 0xC0	; 192
    32a6:	89 83       	std	Y+1, r24	; 0x01
			setBit(reg3, UCPOL0);		// Polarity
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	81 60       	ori	r24, 0x01	; 1
    32ac:	89 83       	std	Y+1, r24	; 0x01
			break;
    32ae:	00 00       	nop
    32b0:	26 c0       	rjmp	.+76     	; 0x32fe <usartConfig+0x208>
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
    32b2:	82 ec       	ldi	r24, 0xC2	; 194
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	fc 01       	movw	r30, r24
    32b8:	80 81       	ld	r24, Z
    32ba:	82 95       	swap	r24
    32bc:	86 95       	lsr	r24
    32be:	86 95       	lsr	r24
    32c0:	83 70       	andi	r24, 0x03	; 3
    32c2:	83 70       	andi	r24, 0x03	; 3
    32c4:	8d 87       	std	Y+13, r24	; 0x0d
		switch(aux8){
    32c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c8:	88 2f       	mov	r24, r24
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	19 f0       	breq	.+6      	; 0x32d6 <usartConfig+0x1e0>
    32d0:	03 97       	sbiw	r24, 0x03	; 3
    32d2:	89 f0       	breq	.+34     	; 0x32f6 <usartConfig+0x200>
    32d4:	14 c0       	rjmp	.+40     	; 0x32fe <usartConfig+0x208>
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
    32d6:	80 ec       	ldi	r24, 0xC0	; 192
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	fc 01       	movw	r30, r24
    32dc:	80 81       	ld	r24, Z
    32de:	86 95       	lsr	r24
    32e0:	88 2f       	mov	r24, r24
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	81 70       	andi	r24, 0x01	; 1
    32e6:	99 27       	eor	r25, r25
    32e8:	89 2b       	or	r24, r25
    32ea:	11 f4       	brne	.+4      	; 0x32f0 <usartConfig+0x1fa>
				modeAux = USART_MODE_ASYNCHRONOUS;
    32ec:	1a 82       	std	Y+2, r1	; 0x02
			}else{						// Double speed
				modeAux = USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED;
			}
			break;
    32ee:	07 c0       	rjmp	.+14     	; 0x32fe <usartConfig+0x208>
				modeAux = USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	8a 83       	std	Y+2, r24	; 0x02
			break;
    32f4:	04 c0       	rjmp	.+8      	; 0x32fe <usartConfig+0x208>
		case 3: // Synchronous SPI mode
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
    32f6:	84 e0       	ldi	r24, 0x04	; 4
    32f8:	8a 83       	std	Y+2, r24	; 0x02
			break;
    32fa:	01 c0       	rjmp	.+2      	; 0x32fe <usartConfig+0x208>
			break;
    32fc:	00 00       	nop
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    32fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3300:	98 89       	ldd	r25, Y+16	; 0x10
    3302:	a9 89       	ldd	r26, Y+17	; 0x11
    3304:	ba 89       	ldd	r27, Y+18	; 0x12
    3306:	8f 3f       	cpi	r24, 0xFF	; 255
    3308:	9f 4f       	sbci	r25, 0xFF	; 255
    330a:	af 4f       	sbci	r26, 0xFF	; 255
    330c:	bf 4f       	sbci	r27, 0xFF	; 255
    330e:	09 f4       	brne	.+2      	; 0x3312 <usartConfig+0x21c>
    3310:	87 c0       	rjmp	.+270    	; 0x3420 <usartConfig+0x32a>
		switch(modeAux){
    3312:	8a 81       	ldd	r24, Y+2	; 0x02
    3314:	88 2f       	mov	r24, r24
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	81 30       	cpi	r24, 0x01	; 1
    331a:	91 05       	cpc	r25, r1
    331c:	31 f1       	breq	.+76     	; 0x336a <usartConfig+0x274>
    331e:	84 30       	cpi	r24, 0x04	; 4
    3320:	91 05       	cpc	r25, r1
    3322:	09 f4       	brne	.+2      	; 0x3326 <usartConfig+0x230>
    3324:	41 c0       	rjmp	.+130    	; 0x33a8 <usartConfig+0x2b2>
    3326:	89 2b       	or	r24, r25
    3328:	09 f0       	breq	.+2      	; 0x332c <usartConfig+0x236>
    332a:	5d c0       	rjmp	.+186    	; 0x33e6 <usartConfig+0x2f0>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
    332c:	80 ed       	ldi	r24, 0xD0	; 208
    332e:	92 e1       	ldi	r25, 0x12	; 18
    3330:	a3 e1       	ldi	r26, 0x13	; 19
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	2f 85       	ldd	r18, Y+15	; 0x0f
    3336:	38 89       	ldd	r19, Y+16	; 0x10
    3338:	49 89       	ldd	r20, Y+17	; 0x11
    333a:	5a 89       	ldd	r21, Y+18	; 0x12
    333c:	bc 01       	movw	r22, r24
    333e:	cd 01       	movw	r24, r26
    3340:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__udivmodsi4>
    3344:	da 01       	movw	r26, r20
    3346:	c9 01       	movw	r24, r18
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	a1 09       	sbc	r26, r1
    334c:	b1 09       	sbc	r27, r1
    334e:	9c 01       	movw	r18, r24
    3350:	ad 01       	movw	r20, r26
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	cb 01       	movw	r24, r22
    3358:	2b 83       	std	Y+3, r18	; 0x03
    335a:	3c 83       	std	Y+4, r19	; 0x04
    335c:	4d 83       	std	Y+5, r20	; 0x05
    335e:	5e 83       	std	Y+6, r21	; 0x06
    3360:	6f 83       	std	Y+7, r22	; 0x07
    3362:	78 87       	std	Y+8, r23	; 0x08
    3364:	89 87       	std	Y+9, r24	; 0x09
    3366:	9a 87       	std	Y+10, r25	; 0x0a
			break;
    3368:	3e c0       	rjmp	.+124    	; 0x33e6 <usartConfig+0x2f0>
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
    336a:	80 ea       	ldi	r24, 0xA0	; 160
    336c:	95 e2       	ldi	r25, 0x25	; 37
    336e:	a6 e2       	ldi	r26, 0x26	; 38
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	2f 85       	ldd	r18, Y+15	; 0x0f
    3374:	38 89       	ldd	r19, Y+16	; 0x10
    3376:	49 89       	ldd	r20, Y+17	; 0x11
    3378:	5a 89       	ldd	r21, Y+18	; 0x12
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__udivmodsi4>
    3382:	da 01       	movw	r26, r20
    3384:	c9 01       	movw	r24, r18
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	a1 09       	sbc	r26, r1
    338a:	b1 09       	sbc	r27, r1
    338c:	9c 01       	movw	r18, r24
    338e:	ad 01       	movw	r20, r26
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	cb 01       	movw	r24, r22
    3396:	2b 83       	std	Y+3, r18	; 0x03
    3398:	3c 83       	std	Y+4, r19	; 0x04
    339a:	4d 83       	std	Y+5, r20	; 0x05
    339c:	5e 83       	std	Y+6, r21	; 0x06
    339e:	6f 83       	std	Y+7, r22	; 0x07
    33a0:	78 87       	std	Y+8, r23	; 0x08
    33a2:	89 87       	std	Y+9, r24	; 0x09
    33a4:	9a 87       	std	Y+10, r25	; 0x0a
			break;
    33a6:	1f c0       	rjmp	.+62     	; 0x33e6 <usartConfig+0x2f0>
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
    33a8:	80 e8       	ldi	r24, 0x80	; 128
    33aa:	96 e9       	ldi	r25, 0x96	; 150
    33ac:	a8 e9       	ldi	r26, 0x98	; 152
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    33b2:	38 89       	ldd	r19, Y+16	; 0x10
    33b4:	49 89       	ldd	r20, Y+17	; 0x11
    33b6:	5a 89       	ldd	r21, Y+18	; 0x12
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__udivmodsi4>
    33c0:	da 01       	movw	r26, r20
    33c2:	c9 01       	movw	r24, r18
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	a1 09       	sbc	r26, r1
    33c8:	b1 09       	sbc	r27, r1
    33ca:	9c 01       	movw	r18, r24
    33cc:	ad 01       	movw	r20, r26
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	70 e0       	ldi	r23, 0x00	; 0
    33d2:	cb 01       	movw	r24, r22
    33d4:	2b 83       	std	Y+3, r18	; 0x03
    33d6:	3c 83       	std	Y+4, r19	; 0x04
    33d8:	4d 83       	std	Y+5, r20	; 0x05
    33da:	5e 83       	std	Y+6, r21	; 0x06
    33dc:	6f 83       	std	Y+7, r22	; 0x07
    33de:	78 87       	std	Y+8, r23	; 0x08
    33e0:	89 87       	std	Y+9, r24	; 0x09
    33e2:	9a 87       	std	Y+10, r25	; 0x0a
			break;
    33e4:	00 00       	nop
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
    33e6:	e5 ec       	ldi	r30, 0xC5	; 197
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	2b 81       	ldd	r18, Y+3	; 0x03
    33ec:	3c 81       	ldd	r19, Y+4	; 0x04
    33ee:	4d 81       	ldd	r20, Y+5	; 0x05
    33f0:	5e 81       	ldd	r21, Y+6	; 0x06
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	08 e0       	ldi	r16, 0x08	; 8
    33fc:	0e 94 ab 23 	call	0x4756	; 0x4756 <__lshrdi3>
    3400:	a2 2e       	mov	r10, r18
    3402:	b3 2e       	mov	r11, r19
    3404:	c4 2e       	mov	r12, r20
    3406:	d5 2e       	mov	r13, r21
    3408:	e6 2e       	mov	r14, r22
    340a:	f7 2e       	mov	r15, r23
    340c:	08 2f       	mov	r16, r24
    340e:	19 2f       	mov	r17, r25
    3410:	8a 2d       	mov	r24, r10
    3412:	8f 70       	andi	r24, 0x0F	; 15
    3414:	80 83       	st	Z, r24
		UBRR0L = (0xFF & aux64);
    3416:	84 ec       	ldi	r24, 0xC4	; 196
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	2b 81       	ldd	r18, Y+3	; 0x03
    341c:	fc 01       	movw	r30, r24
    341e:	20 83       	st	Z, r18
	}

	return RESULT_OK;
    3420:	80 e0       	ldi	r24, 0x00	; 0
}
    3422:	65 96       	adiw	r28, 0x15	; 21
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	f8 94       	cli
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	cd bf       	out	0x3d, r28	; 61
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    3436:	ff 90       	pop	r15
    3438:	ef 90       	pop	r14
    343a:	df 90       	pop	r13
    343c:	cf 90       	pop	r12
    343e:	bf 90       	pop	r11
    3440:	af 90       	pop	r10
    3442:	08 95       	ret

00003444 <usartEnableReceiver>:
/* -----------------------------------------------------------------------------
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
    3444:	cf 93       	push	r28
    3446:	df 93       	push	r29
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
	setBit(UCSR0B, RXEN0);
    344c:	81 ec       	ldi	r24, 0xC1	; 193
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	21 ec       	ldi	r18, 0xC1	; 193
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	f9 01       	movw	r30, r18
    3456:	20 81       	ld	r18, Z
    3458:	20 61       	ori	r18, 0x10	; 16
    345a:	fc 01       	movw	r30, r24
    345c:	20 83       	st	Z, r18
	return RESULT_OK;
    345e:	80 e0       	ldi	r24, 0x00	; 0
}
    3460:	df 91       	pop	r29
    3462:	cf 91       	pop	r28
    3464:	08 95       	ret

00003466 <usartDisableReceiver>:
/* -----------------------------------------------------------------------------
 * Disables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableReceiver(void)
{
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
	clrBit(UCSR0B, RXEN0);
    346e:	81 ec       	ldi	r24, 0xC1	; 193
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	21 ec       	ldi	r18, 0xC1	; 193
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	f9 01       	movw	r30, r18
    3478:	20 81       	ld	r18, Z
    347a:	2f 7e       	andi	r18, 0xEF	; 239
    347c:	fc 01       	movw	r30, r24
    347e:	20 83       	st	Z, r18
	return RESULT_OK;
    3480:	80 e0       	ldi	r24, 0x00	; 0
}
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	08 95       	ret

00003488 <usartEnableTransmitter>:
/* -----------------------------------------------------------------------------
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
	setBit(UCSR0B, TXEN0);
    3490:	81 ec       	ldi	r24, 0xC1	; 193
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	21 ec       	ldi	r18, 0xC1	; 193
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	f9 01       	movw	r30, r18
    349a:	20 81       	ld	r18, Z
    349c:	28 60       	ori	r18, 0x08	; 8
    349e:	fc 01       	movw	r30, r24
    34a0:	20 83       	st	Z, r18
	return RESULT_OK;
    34a2:	80 e0       	ldi	r24, 0x00	; 0
}
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	08 95       	ret

000034aa <usartDisableTransmitter>:
/* -----------------------------------------------------------------------------
 * Disables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableTransmitter(void)
{
    34aa:	cf 93       	push	r28
    34ac:	df 93       	push	r29
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
	clrBit(UCSR0B, TXEN0);
    34b2:	81 ec       	ldi	r24, 0xC1	; 193
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	21 ec       	ldi	r18, 0xC1	; 193
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	f9 01       	movw	r30, r18
    34bc:	20 81       	ld	r18, Z
    34be:	27 7f       	andi	r18, 0xF7	; 247
    34c0:	fc 01       	movw	r30, r24
    34c2:	20 83       	st	Z, r18
	return RESULT_OK;
    34c4:	80 e0       	ldi	r24, 0x00	; 0
}
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	08 95       	ret

000034cc <usartActivateReceptionCompleteInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
	setBit(UCSR0B, RXCIE0);
    34d4:	81 ec       	ldi	r24, 0xC1	; 193
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	21 ec       	ldi	r18, 0xC1	; 193
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	f9 01       	movw	r30, r18
    34de:	20 81       	ld	r18, Z
    34e0:	20 68       	ori	r18, 0x80	; 128
    34e2:	fc 01       	movw	r30, r24
    34e4:	20 83       	st	Z, r18
	return RESULT_OK;
    34e6:	80 e0       	ldi	r24, 0x00	; 0
}
    34e8:	df 91       	pop	r29
    34ea:	cf 91       	pop	r28
    34ec:	08 95       	ret

000034ee <usartDeactivateReceptionCompleteInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateReceptionCompleteInterrupt(void)
{
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
	clrBit(UCSR0B, RXCIE0);
    34f6:	81 ec       	ldi	r24, 0xC1	; 193
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	21 ec       	ldi	r18, 0xC1	; 193
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	f9 01       	movw	r30, r18
    3500:	20 81       	ld	r18, Z
    3502:	2f 77       	andi	r18, 0x7F	; 127
    3504:	fc 01       	movw	r30, r24
    3506:	20 83       	st	Z, r18
	return RESULT_OK;
    3508:	80 e0       	ldi	r24, 0x00	; 0
}
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	08 95       	ret

00003510 <usartActivateTransmissionCompleteInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateTransmissionCompleteInterrupt(void)
{
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
	setBit(UCSR0B, TXCIE0);
    3518:	81 ec       	ldi	r24, 0xC1	; 193
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	21 ec       	ldi	r18, 0xC1	; 193
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	f9 01       	movw	r30, r18
    3522:	20 81       	ld	r18, Z
    3524:	20 64       	ori	r18, 0x40	; 64
    3526:	fc 01       	movw	r30, r24
    3528:	20 83       	st	Z, r18
	return RESULT_OK;
    352a:	80 e0       	ldi	r24, 0x00	; 0
}
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	08 95       	ret

00003532 <usartDeactivateTransmissionCompleteInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateTransmissionCompleteInterrupt(void)
{
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
	clrBit(UCSR0B, TXCIE0);
    353a:	81 ec       	ldi	r24, 0xC1	; 193
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	21 ec       	ldi	r18, 0xC1	; 193
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	f9 01       	movw	r30, r18
    3544:	20 81       	ld	r18, Z
    3546:	2f 7b       	andi	r18, 0xBF	; 191
    3548:	fc 01       	movw	r30, r24
    354a:	20 83       	st	Z, r18
	return RESULT_OK;
    354c:	80 e0       	ldi	r24, 0x00	; 0
}
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	08 95       	ret

00003554 <usartActivateBufferEmptyInterrupt>:
/* -----------------------------------------------------------------------------
 * Activates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateBufferEmptyInterrupt(void)
{
    3554:	cf 93       	push	r28
    3556:	df 93       	push	r29
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
	setBit(UCSR0B, UDRIE0);
    355c:	81 ec       	ldi	r24, 0xC1	; 193
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	21 ec       	ldi	r18, 0xC1	; 193
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	f9 01       	movw	r30, r18
    3566:	20 81       	ld	r18, Z
    3568:	20 62       	ori	r18, 0x20	; 32
    356a:	fc 01       	movw	r30, r24
    356c:	20 83       	st	Z, r18
	return RESULT_OK;
    356e:	80 e0       	ldi	r24, 0x00	; 0
}
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	08 95       	ret

00003576 <usartDeactivateBufferEmptyInterrupt>:
/* -----------------------------------------------------------------------------
 * Deactivates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateBufferEmptyInterrupt(void)
{
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
	clrBit(UCSR0B, UDRIE0);
    357e:	81 ec       	ldi	r24, 0xC1	; 193
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	21 ec       	ldi	r18, 0xC1	; 193
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	f9 01       	movw	r30, r18
    3588:	20 81       	ld	r18, Z
    358a:	2f 7d       	andi	r18, 0xDF	; 223
    358c:	fc 01       	movw	r30, r24
    358e:	20 83       	st	Z, r18
	return RESULT_OK;
    3590:	80 e0       	ldi	r24, 0x00	; 0
}
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	08 95       	ret

00003598 <usartStdio>:
/* -----------------------------------------------------------------------------
 * Changes the std handlers to usart module
 * -------------------------------------------------------------------------- */

resultValue_t usartStdio(void)
{
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
	stdin = stdout = stderr = &usartStream;
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	91 e0       	ldi	r25, 0x01	; 1
    35a4:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__iob+0x5>
    35a8:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__iob+0x4>
    35ac:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__iob+0x4>
    35b0:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__iob+0x5>
    35b4:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__iob+0x3>
    35b8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__iob+0x2>
    35bc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__iob+0x2>
    35c0:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__iob+0x3>
    35c4:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__iob+0x1>
    35c8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__iob>
	return RESULT_OK;
    35cc:	80 e0       	ldi	r24, 0x00	; 0
}
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	08 95       	ret

000035d4 <usartIsReceptionComplete>:
/* -----------------------------------------------------------------------------
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
    35d4:	cf 93       	push	r28
    35d6:	df 93       	push	r29
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
	return isBitSet(UCSR0A, RXC0);
    35dc:	80 ec       	ldi	r24, 0xC0	; 192
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	fc 01       	movw	r30, r24
    35e2:	80 81       	ld	r24, Z
    35e4:	88 1f       	adc	r24, r24
    35e6:	88 27       	eor	r24, r24
    35e8:	88 1f       	adc	r24, r24
    35ea:	81 70       	andi	r24, 0x01	; 1
}
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	08 95       	ret

000035f2 <usartIsTransmissionComplete>:
/* -----------------------------------------------------------------------------
 * Checks if a transmission has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsTransmissionComplete(void)
{
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
	return isBitSet(UCSR0A, TXC0);
    35fa:	80 ec       	ldi	r24, 0xC0	; 192
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	fc 01       	movw	r30, r24
    3600:	80 81       	ld	r24, Z
    3602:	82 95       	swap	r24
    3604:	86 95       	lsr	r24
    3606:	86 95       	lsr	r24
    3608:	83 70       	andi	r24, 0x03	; 3
    360a:	81 70       	andi	r24, 0x01	; 1
}
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	08 95       	ret

00003612 <usartIsBufferEmpty>:
/* -----------------------------------------------------------------------------
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
	return isBitSet(UCSR0A, UDRE0);
    361a:	80 ec       	ldi	r24, 0xC0	; 192
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	fc 01       	movw	r30, r24
    3620:	80 81       	ld	r24, Z
    3622:	82 95       	swap	r24
    3624:	86 95       	lsr	r24
    3626:	87 70       	andi	r24, 0x07	; 7
    3628:	81 70       	andi	r24, 0x01	; 1
}
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	08 95       	ret

00003630 <usartCheckError>:
/* -----------------------------------------------------------------------------
 * Checks if an error occurred during transmission or reception
 * -------------------------------------------------------------------------- */

usartError_t usartCheckError(void)
{
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	1f 92       	push	r1
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
	usartError_t error = 0;
    363a:	19 82       	std	Y+1, r1	; 0x01

	if(isBitSet(UCSR0A, FE0))
    363c:	80 ec       	ldi	r24, 0xC0	; 192
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	fc 01       	movw	r30, r24
    3642:	80 81       	ld	r24, Z
    3644:	82 95       	swap	r24
    3646:	8f 70       	andi	r24, 0x0F	; 15
    3648:	88 2f       	mov	r24, r24
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	81 70       	andi	r24, 0x01	; 1
    364e:	99 27       	eor	r25, r25
    3650:	89 2b       	or	r24, r25
    3652:	19 f0       	breq	.+6      	; 0x365a <usartCheckError+0x2a>
		error |= USART_FRAME_ERROR;
    3654:	89 81       	ldd	r24, Y+1	; 0x01
    3656:	82 60       	ori	r24, 0x02	; 2
    3658:	89 83       	std	Y+1, r24	; 0x01
	if(isBitSet(UCSR0A, DOR0))
    365a:	80 ec       	ldi	r24, 0xC0	; 192
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	fc 01       	movw	r30, r24
    3660:	80 81       	ld	r24, Z
    3662:	86 95       	lsr	r24
    3664:	86 95       	lsr	r24
    3666:	86 95       	lsr	r24
    3668:	88 2f       	mov	r24, r24
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	81 70       	andi	r24, 0x01	; 1
    366e:	99 27       	eor	r25, r25
    3670:	89 2b       	or	r24, r25
    3672:	19 f0       	breq	.+6      	; 0x367a <usartCheckError+0x4a>
		error |= USART_PARITY_ERROR;
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	84 60       	ori	r24, 0x04	; 4
    3678:	89 83       	std	Y+1, r24	; 0x01
	if(isBitSet(UCSR0A, UPE0))
    367a:	80 ec       	ldi	r24, 0xC0	; 192
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	fc 01       	movw	r30, r24
    3680:	80 81       	ld	r24, Z
    3682:	86 95       	lsr	r24
    3684:	86 95       	lsr	r24
    3686:	88 2f       	mov	r24, r24
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	81 70       	andi	r24, 0x01	; 1
    368c:	99 27       	eor	r25, r25
    368e:	89 2b       	or	r24, r25
    3690:	19 f0       	breq	.+6      	; 0x3698 <usartCheckError+0x68>
		error |= USART_BUFFER_OVERFLOW_ERROR;
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	88 60       	ori	r24, 0x08	; 8
    3696:	89 83       	std	Y+1, r24	; 0x01

	if(error == 0)
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	88 23       	and	r24, r24
    369c:	11 f4       	brne	.+4      	; 0x36a2 <usartCheckError+0x72>
		return USART_OK;
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	01 c0       	rjmp	.+2      	; 0x36a4 <usartCheckError+0x74>
	return error;
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    36a4:	0f 90       	pop	r0
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	08 95       	ret

000036ac <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	1f 92       	push	r1
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62
    36b6:	89 83       	std	Y+1, r24	; 0x01
	while(!usartIsBufferEmpty())
    36b8:	00 00       	nop
    36ba:	0e 94 09 1b 	call	0x3612	; 0x3612 <usartIsBufferEmpty>
    36be:	88 23       	and	r24, r24
    36c0:	e1 f3       	breq	.-8      	; 0x36ba <usartTransmit+0xe>
		;	// Waits until last transmission ends
	UDR0 = data;
    36c2:	86 ec       	ldi	r24, 0xC6	; 198
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	29 81       	ldd	r18, Y+1	; 0x01
    36c8:	fc 01       	movw	r30, r24
    36ca:	20 83       	st	Z, r18
	return RESULT_OK;
    36cc:	80 e0       	ldi	r24, 0x00	; 0
}
    36ce:	0f 90       	pop	r0
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	08 95       	ret

000036d6 <usartTransmit9bits>:
/* -----------------------------------------------------------------------------
 * Transmits data in 9 bits mode using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit9bits(uint16 data)
{
    36d6:	cf 93       	push	r28
    36d8:	df 93       	push	r29
    36da:	00 d0       	rcall	.+0      	; 0x36dc <usartTransmit9bits+0x6>
    36dc:	1f 92       	push	r1
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	9b 83       	std	Y+3, r25	; 0x03
    36e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 aux;

	while(!usartIsBufferEmpty())
    36e6:	00 00       	nop
    36e8:	0e 94 09 1b 	call	0x3612	; 0x3612 <usartIsBufferEmpty>
    36ec:	88 23       	and	r24, r24
    36ee:	e1 f3       	breq	.-8      	; 0x36e8 <usartTransmit9bits+0x12>
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
    36f2:	9b 81       	ldd	r25, Y+3	; 0x03
    36f4:	89 2f       	mov	r24, r25
    36f6:	99 27       	eor	r25, r25
    36f8:	81 70       	andi	r24, 0x01	; 1
    36fa:	89 83       	std	Y+1, r24	; 0x01
	if(aux)
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	88 23       	and	r24, r24
    3700:	51 f0       	breq	.+20     	; 0x3716 <usartTransmit9bits+0x40>
		setBit(UCSR0B, TXB80);
    3702:	81 ec       	ldi	r24, 0xC1	; 193
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	21 ec       	ldi	r18, 0xC1	; 193
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	f9 01       	movw	r30, r18
    370c:	20 81       	ld	r18, Z
    370e:	21 60       	ori	r18, 0x01	; 1
    3710:	fc 01       	movw	r30, r24
    3712:	20 83       	st	Z, r18
    3714:	09 c0       	rjmp	.+18     	; 0x3728 <usartTransmit9bits+0x52>
	else
		clrBit(UCSR0B, TXB80);
    3716:	81 ec       	ldi	r24, 0xC1	; 193
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	21 ec       	ldi	r18, 0xC1	; 193
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	f9 01       	movw	r30, r18
    3720:	20 81       	ld	r18, Z
    3722:	2e 7f       	andi	r18, 0xFE	; 254
    3724:	fc 01       	movw	r30, r24
    3726:	20 83       	st	Z, r18
	UDR0 = (uint8)data;
    3728:	86 ec       	ldi	r24, 0xC6	; 198
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	2a 81       	ldd	r18, Y+2	; 0x02
    372e:	fc 01       	movw	r30, r24
    3730:	20 83       	st	Z, r18
	return RESULT_OK;
    3732:	80 e0       	ldi	r24, 0x00	; 0
}
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	08 95       	ret

00003740 <usartTransmitStd>:
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard output heandler
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmitStd(int8 data, FILE * stream)
{
    3740:	cf 93       	push	r28
    3742:	df 93       	push	r29
    3744:	00 d0       	rcall	.+0      	; 0x3746 <usartTransmitStd+0x6>
    3746:	1f 92       	push	r1
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	89 83       	std	Y+1, r24	; 0x01
    374e:	7b 83       	std	Y+3, r23	; 0x03
    3750:	6a 83       	std	Y+2, r22	; 0x02
	while(!usartIsBufferEmpty())
    3752:	00 00       	nop
    3754:	0e 94 09 1b 	call	0x3612	; 0x3612 <usartIsBufferEmpty>
    3758:	88 23       	and	r24, r24
    375a:	e1 f3       	breq	.-8      	; 0x3754 <usartTransmitStd+0x14>
		;	// Waits until last transmission ends
	UDR0 = data;
    375c:	86 ec       	ldi	r24, 0xC6	; 198
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	29 81       	ldd	r18, Y+1	; 0x01
    3762:	fc 01       	movw	r30, r24
    3764:	20 83       	st	Z, r18
	return RESULT_OK;
    3766:	80 e0       	ldi	r24, 0x00	; 0
}
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	df 91       	pop	r29
    3770:	cf 91       	pop	r28
    3772:	08 95       	ret

00003774 <usartReceive>:
/* -----------------------------------------------------------------------------
 * Receives data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

uint8 usartReceive(void)
{
    3774:	cf 93       	push	r28
    3776:	df 93       	push	r29
    3778:	1f 92       	push	r1
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
	uint8 status;

	while(!usartIsReceptionComplete())
    377e:	00 00       	nop
    3780:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <usartIsReceptionComplete>
    3784:	88 23       	and	r24, r24
    3786:	e1 f3       	breq	.-8      	; 0x3780 <usartReceive+0xc>
		;	// Waits until last reception ends
	status = UCSR0A;
    3788:	80 ec       	ldi	r24, 0xC0	; 192
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	fc 01       	movw	r30, r24
    378e:	80 81       	ld	r24, Z
    3790:	89 83       	std	Y+1, r24	; 0x01
	return UDR0;
    3792:	86 ec       	ldi	r24, 0xC6	; 198
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	fc 01       	movw	r30, r24
    3798:	80 81       	ld	r24, Z
}
    379a:	0f 90       	pop	r0
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	08 95       	ret

000037a2 <usartReceive9bits>:
/* -----------------------------------------------------------------------------
 * Receives data in 9 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

uint16 usartReceive9bits(void)
{
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	00 d0       	rcall	.+0      	; 0x37a8 <usartReceive9bits+0x6>
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <usartReceive9bits+0x8>
    37aa:	1f 92       	push	r1
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	uint8 byteh;
	uint8 bytel;
	uint16 byte;

	while(!usartIsReceptionComplete())
    37b0:	00 00       	nop
    37b2:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <usartIsReceptionComplete>
    37b6:	88 23       	and	r24, r24
    37b8:	e1 f3       	breq	.-8      	; 0x37b2 <usartReceive9bits+0x10>
		;	// Waits until last reception ends
	status = UCSR0A;
    37ba:	80 ec       	ldi	r24, 0xC0	; 192
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	fc 01       	movw	r30, r24
    37c0:	80 81       	ld	r24, Z
    37c2:	89 83       	std	Y+1, r24	; 0x01
	byteh = UCSR0B;
    37c4:	81 ec       	ldi	r24, 0xC1	; 193
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	fc 01       	movw	r30, r24
    37ca:	80 81       	ld	r24, Z
    37cc:	8a 83       	std	Y+2, r24	; 0x02
	bytel = UDR0;
    37ce:	86 ec       	ldi	r24, 0xC6	; 198
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	fc 01       	movw	r30, r24
    37d4:	80 81       	ld	r24, Z
    37d6:	8b 83       	std	Y+3, r24	; 0x03

	byte = (uint16)(byteh & 0x02) << 7;
    37d8:	8a 81       	ldd	r24, Y+2	; 0x02
    37da:	88 2f       	mov	r24, r24
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	96 95       	lsr	r25
    37e0:	98 2f       	mov	r25, r24
    37e2:	88 27       	eor	r24, r24
    37e4:	97 95       	ror	r25
    37e6:	87 95       	ror	r24
    37e8:	88 27       	eor	r24, r24
    37ea:	91 70       	andi	r25, 0x01	; 1
    37ec:	9d 83       	std	Y+5, r25	; 0x05
    37ee:	8c 83       	std	Y+4, r24	; 0x04
	byte |= bytel;
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
    37f2:	88 2f       	mov	r24, r24
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	2c 81       	ldd	r18, Y+4	; 0x04
    37f8:	3d 81       	ldd	r19, Y+5	; 0x05
    37fa:	82 2b       	or	r24, r18
    37fc:	93 2b       	or	r25, r19
    37fe:	9d 83       	std	Y+5, r25	; 0x05
    3800:	8c 83       	std	Y+4, r24	; 0x04
	return  byte;
    3802:	8c 81       	ldd	r24, Y+4	; 0x04
    3804:	9d 81       	ldd	r25, Y+5	; 0x05
}
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	08 95       	ret

00003816 <usartReceiveStd>:
 * Receives data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard input heandler
 * -------------------------------------------------------------------------- */

int16 usartReceiveStd(FILE * stream)
{
    3816:	cf 93       	push	r28
    3818:	df 93       	push	r29
    381a:	00 d0       	rcall	.+0      	; 0x381c <usartReceiveStd+0x6>
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	9a 83       	std	Y+2, r25	; 0x02
    3822:	89 83       	std	Y+1, r24	; 0x01
	while(!usartIsReceptionComplete())
    3824:	00 00       	nop
    3826:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <usartIsReceptionComplete>
    382a:	88 23       	and	r24, r24
    382c:	e1 f3       	breq	.-8      	; 0x3826 <usartReceiveStd+0x10>
		;	// Waits until last reception ends
	return (int16)UDR0;
    382e:	86 ec       	ldi	r24, 0xC6	; 198
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	fc 01       	movw	r30, r24
    3834:	80 81       	ld	r24, Z
    3836:	88 2f       	mov	r24, r24
    3838:	90 e0       	ldi	r25, 0x00	; 0
}
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	08 95       	ret

00003844 <usartClearReceptionBuffer>:
/* -----------------------------------------------------------------------------
 * Clears the receptor data buffer
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	1f 92       	push	r1
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
	uint8 aux;
	while(usartIsReceptionComplete())
    384e:	05 c0       	rjmp	.+10     	; 0x385a <usartClearReceptionBuffer+0x16>
		aux = UDR0;
    3850:	86 ec       	ldi	r24, 0xC6	; 198
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	fc 01       	movw	r30, r24
    3856:	80 81       	ld	r24, Z
    3858:	89 83       	std	Y+1, r24	; 0x01
	while(usartIsReceptionComplete())
    385a:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <usartIsReceptionComplete>
    385e:	88 23       	and	r24, r24
    3860:	b9 f7       	brne	.-18     	; 0x3850 <usartClearReceptionBuffer+0xc>
	return;
    3862:	00 00       	nop
}
    3864:	0f 90       	pop	r0
    3866:	df 91       	pop	r29
    3868:	cf 91       	pop	r28
    386a:	08 95       	ret

0000386c <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	1f 92       	push	r1
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	89 83       	std	Y+1, r24	; 0x01
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
    3878:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <usartReceiverBufferNextWrite>
    387c:	88 2f       	mov	r24, r24
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	09 2e       	mov	r0, r25
    3884:	00 0c       	add	r0, r0
    3886:	aa 0b       	sbc	r26, r26
    3888:	bb 0b       	sbc	r27, r27
    388a:	22 e3       	ldi	r18, 0x32	; 50
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	40 e0       	ldi	r20, 0x00	; 0
    3890:	50 e0       	ldi	r21, 0x00	; 0
    3892:	bc 01       	movw	r22, r24
    3894:	cd 01       	movw	r24, r26
    3896:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__udivmodsi4>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	9c 01       	movw	r18, r24
    38a0:	ad 01       	movw	r20, r26
    38a2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <usartReceiverBufferNextRead>
    38a6:	88 2f       	mov	r24, r24
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	a0 e0       	ldi	r26, 0x00	; 0
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	28 17       	cp	r18, r24
    38b0:	39 07       	cpc	r19, r25
    38b2:	4a 07       	cpc	r20, r26
    38b4:	5b 07       	cpc	r21, r27
    38b6:	21 f1       	breq	.+72     	; 0x3900 <usartAddDataToReceiverBuffer+0x94>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
    38b8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <usartReceiverBufferNextWrite>
    38bc:	88 2f       	mov	r24, r24
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	80 5c       	subi	r24, 0xC0	; 192
    38c2:	9e 4f       	sbci	r25, 0xFE	; 254
    38c4:	29 81       	ldd	r18, Y+1	; 0x01
    38c6:	fc 01       	movw	r30, r24
    38c8:	20 83       	st	Z, r18
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
    38ca:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <usartReceiverBufferNextWrite>
    38ce:	88 2f       	mov	r24, r24
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	01 96       	adiw	r24, 0x01	; 1
    38d4:	09 2e       	mov	r0, r25
    38d6:	00 0c       	add	r0, r0
    38d8:	aa 0b       	sbc	r26, r26
    38da:	bb 0b       	sbc	r27, r27
    38dc:	22 e3       	ldi	r18, 0x32	; 50
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e0       	ldi	r20, 0x00	; 0
    38e2:	50 e0       	ldi	r21, 0x00	; 0
    38e4:	bc 01       	movw	r22, r24
    38e6:	cd 01       	movw	r24, r26
    38e8:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__udivmodsi4>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <usartReceiverBufferNextWrite>
		usartReceiverBufferLength++;
    38f4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <usartReceiverBufferLength>
    38f8:	8f 5f       	subi	r24, 0xFF	; 255
    38fa:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <usartReceiverBufferLength>
	}
	return;
    38fe:	00 00       	nop
    3900:	00 00       	nop
}
    3902:	0f 90       	pop	r0
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	08 95       	ret

0000390a <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	1f 92       	push	r1
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
    3914:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <usartReceiverBufferNextRead>
    3918:	88 2f       	mov	r24, r24
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	80 5c       	subi	r24, 0xC0	; 192
    391e:	9e 4f       	sbci	r25, 0xFE	; 254
    3920:	fc 01       	movw	r30, r24
    3922:	80 81       	ld	r24, Z
    3924:	89 83       	std	Y+1, r24	; 0x01
	if(usartReceiverBufferLength > 0){
    3926:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <usartReceiverBufferLength>
    392a:	88 23       	and	r24, r24
    392c:	d1 f0       	breq	.+52     	; 0x3962 <usartGetDataFromReceiverBuffer+0x58>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
    392e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <usartReceiverBufferNextRead>
    3932:	88 2f       	mov	r24, r24
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	01 96       	adiw	r24, 0x01	; 1
    3938:	09 2e       	mov	r0, r25
    393a:	00 0c       	add	r0, r0
    393c:	aa 0b       	sbc	r26, r26
    393e:	bb 0b       	sbc	r27, r27
    3940:	22 e3       	ldi	r18, 0x32	; 50
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e0       	ldi	r20, 0x00	; 0
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__udivmodsi4>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <usartReceiverBufferNextRead>
		usartReceiverBufferLength--;
    3958:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <usartReceiverBufferLength>
    395c:	81 50       	subi	r24, 0x01	; 1
    395e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <usartReceiverBufferLength>
	}
	return data;
    3962:	89 81       	ldd	r24, Y+1	; 0x01
}
    3964:	0f 90       	pop	r0
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	08 95       	ret

0000396c <usartIsReceiverBufferEmpty>:
 * Verifies if there is new data in the receiver buffer. Must be called before
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
	if(usartReceiverBufferLength == 0)
    3974:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <usartReceiverBufferLength>
    3978:	88 23       	and	r24, r24
    397a:	11 f4       	brne	.+4      	; 0x3980 <usartIsReceiverBufferEmpty+0x14>
		return TRUE;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	01 c0       	rjmp	.+2      	; 0x3982 <usartIsReceiverBufferEmpty+0x16>
	return FALSE;
    3980:	80 e0       	ldi	r24, 0x00	; 0
}
    3982:	df 91       	pop	r29
    3984:	cf 91       	pop	r28
    3986:	08 95       	ret

00003988 <usartGetCurrentBaudRate>:
/* -----------------------------------------------------------------------------
 * Returns the current baud rate.
 * -------------------------------------------------------------------------- */

 uint32 usartGetCurrentBaudRate(void)
 {
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
    398c:	00 d0       	rcall	.+0      	; 0x398e <usartGetCurrentBaudRate+0x6>
    398e:	00 d0       	rcall	.+0      	; 0x3990 <usartGetCurrentBaudRate+0x8>
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
	uint32 aux32 = 0;
    3994:	19 82       	std	Y+1, r1	; 0x01
    3996:	1a 82       	std	Y+2, r1	; 0x02
    3998:	1b 82       	std	Y+3, r1	; 0x03
    399a:	1c 82       	std	Y+4, r1	; 0x04
//		break;
//	case 2:
//		aux32 = F_CPU / 2 / (UBRR0 + 1);
//		break;
//	}
	return aux32;
    399c:	89 81       	ldd	r24, Y+1	; 0x01
    399e:	9a 81       	ldd	r25, Y+2	; 0x02
    39a0:	ab 81       	ldd	r26, Y+3	; 0x03
    39a2:	bc 81       	ldd	r27, Y+4	; 0x04
 }
    39a4:	bc 01       	movw	r22, r24
    39a6:	cd 01       	movw	r24, r26
    39a8:	0f 90       	pop	r0
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
    39ae:	0f 90       	pop	r0
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	08 95       	ret

000039b6 <spiInit>:
/* -----------------------------------------------------------------------------
 * Configures the SPI controller
 * -------------------------------------------------------------------------- */

void spiInit(void)
{
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
			(spiConfiguration.sckIdleValue << CPOL) | 
			(spiConfiguration.leadingTrailingEdge << CPHA) | 
			(spiConfiguration.clockPrescaler & 0x03);

*/
	return;
    39be:	00 00       	nop
}
    39c0:	df 91       	pop	r29
    39c2:	cf 91       	pop	r28
    39c4:	08 95       	ret

000039c6 <spiMasterTransmit>:
/* -----------------------------------------------------------------------------
 * Transmit data at the SPI bus in master mode
 * -------------------------------------------------------------------------- */

uint8 spiMasterTransmit(uint8 data)
{
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	1f 92       	push	r1
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    39d2:	8e e4       	ldi	r24, 0x4E	; 78
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	29 81       	ldd	r18, Y+1	; 0x01
    39d8:	fc 01       	movw	r30, r24
    39da:	20 83       	st	Z, r18
	waitUntilBitIsClear(SPSR, SPIF);
    39dc:	8d e4       	ldi	r24, 0x4D	; 77
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	fc 01       	movw	r30, r24
    39e2:	80 81       	ld	r24, Z
    39e4:	88 1f       	adc	r24, r24
    39e6:	88 27       	eor	r24, r24
    39e8:	88 1f       	adc	r24, r24
    39ea:	88 2f       	mov	r24, r24
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	81 70       	andi	r24, 0x01	; 1
    39f0:	99 27       	eor	r25, r25
    39f2:	89 2b       	or	r24, r25
    39f4:	99 f7       	brne	.-26     	; 0x39dc <spiMasterTransmit+0x16>
	return SPDR;
    39f6:	8e e4       	ldi	r24, 0x4E	; 78
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	fc 01       	movw	r30, r24
    39fc:	80 81       	ld	r24, Z
}
    39fe:	0f 90       	pop	r0
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	08 95       	ret

00003a06 <spiSlaveTransmit>:
/* -----------------------------------------------------------------------------
 * Receives data from the SPI bus
 * -------------------------------------------------------------------------- */

uint8 spiSlaveTransmit(void)
{
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
	waitUntilBitIsClear(SPSR, SPIF);
    3a0e:	8d e4       	ldi	r24, 0x4D	; 77
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	fc 01       	movw	r30, r24
    3a14:	80 81       	ld	r24, Z
    3a16:	88 1f       	adc	r24, r24
    3a18:	88 27       	eor	r24, r24
    3a1a:	88 1f       	adc	r24, r24
    3a1c:	88 2f       	mov	r24, r24
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	81 70       	andi	r24, 0x01	; 1
    3a22:	99 27       	eor	r25, r25
    3a24:	89 2b       	or	r24, r25
    3a26:	99 f7       	brne	.-26     	; 0x3a0e <spiSlaveTransmit+0x8>
	return SPDR;
    3a28:	8e e4       	ldi	r24, 0x4E	; 78
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	80 81       	ld	r24, Z
    3a30:	df 91       	pop	r29
    3a32:	cf 91       	pop	r28
    3a34:	08 95       	ret

00003a36 <main>:

// --------------------------------------------------------------------------------
//  Main function -----------------------------------------------------------------

int main(void)
{
    3a36:	ef 92       	push	r14
    3a38:	0f 93       	push	r16
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	c9 50       	subi	r28, 0x09	; 9
    3a44:	d1 40       	sbci	r29, 0x01	; 1
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
	uint16 maxCount[4];
	uint8  percent[4];
	uint16 aux16;
	// Package variables
	uint8 packageData[DATA_MAX_SIZE];
	uint8 packageIndex = 0;
    3a50:	ce 01       	movw	r24, r28
    3a52:	85 5b       	subi	r24, 0xB5	; 181
    3a54:	9f 4f       	sbci	r25, 0xFF	; 255
    3a56:	fc 01       	movw	r30, r24
    3a58:	10 82       	st	Z, r1
	uint8 packageReady = 0;
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	84 5b       	subi	r24, 0xB4	; 180
    3a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a60:	fc 01       	movw	r30, r24
    3a62:	10 82       	st	Z, r1
	uint8 packageSize = 0;
    3a64:	ce 01       	movw	r24, r28
    3a66:	83 5b       	subi	r24, 0xB3	; 179
    3a68:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	10 82       	st	Z, r1
	uint8 packageAux[DATA_MAX_SIZE];
	uint8 i;

	uint8 buffer[2][BUFFER_SIZE]; // 2 buffer para armazenar os valores de 2 servos
	memset(buffer[HEAD_H],0,BUFFER_SIZE);
    3a6e:	ce 01       	movw	r24, r28
    3a70:	80 58       	subi	r24, 0x80	; 128
    3a72:	9f 4f       	sbci	r25, 0xFF	; 255
    3a74:	40 e4       	ldi	r20, 0x40	; 64
    3a76:	50 e0       	ldi	r21, 0x00	; 0
    3a78:	60 e0       	ldi	r22, 0x00	; 0
    3a7a:	70 e0       	ldi	r23, 0x00	; 0
    3a7c:	0e 94 c7 23 	call	0x478e	; 0x478e <memset>
	memset(buffer[HEAD_V],0,BUFFER_SIZE);
    3a80:	ce 01       	movw	r24, r28
    3a82:	80 58       	subi	r24, 0x80	; 128
    3a84:	9f 4f       	sbci	r25, 0xFF	; 255
    3a86:	80 5c       	subi	r24, 0xC0	; 192
    3a88:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8a:	40 e4       	ldi	r20, 0x40	; 64
    3a8c:	50 e0       	ldi	r21, 0x00	; 0
    3a8e:	60 e0       	ldi	r22, 0x00	; 0
    3a90:	70 e0       	ldi	r23, 0x00	; 0
    3a92:	0e 94 c7 23 	call	0x478e	; 0x478e <memset>
	uint8 nextWrite[2];	// Aponta pro próximo local a ser escrito
	memset(nextWrite, 0, 2);
    3a96:	ce 01       	movw	r24, r28
    3a98:	93 95       	inc	r25
    3a9a:	42 e0       	ldi	r20, 0x02	; 2
    3a9c:	50 e0       	ldi	r21, 0x00	; 0
    3a9e:	60 e0       	ldi	r22, 0x00	; 0
    3aa0:	70 e0       	ldi	r23, 0x00	; 0
    3aa2:	0e 94 c7 23 	call	0x478e	; 0x478e <memset>
//	uint8 nextRead = 0;		// Desnecessário pq vai ser sempre escrito em cima
	uint16 totalBuffer[2];		// 16 bits são suficientes para até 64 valores de janela
	memset(totalBuffer, 0, 2);
    3aa6:	ce 01       	movw	r24, r28
    3aa8:	8e 5f       	subi	r24, 0xFE	; 254
    3aaa:	9e 4f       	sbci	r25, 0xFE	; 254
    3aac:	42 e0       	ldi	r20, 0x02	; 2
    3aae:	50 e0       	ldi	r21, 0x00	; 0
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	70 e0       	ldi	r23, 0x00	; 0
    3ab4:	0e 94 c7 23 	call	0x478e	; 0x478e <memset>
	uint16 meanBuffer[2];
	memset(meanBuffer, 0, 2);
    3ab8:	ce 01       	movw	r24, r28
    3aba:	8a 5f       	subi	r24, 0xFA	; 250
    3abc:	9e 4f       	sbci	r25, 0xFE	; 254
    3abe:	42 e0       	ldi	r20, 0x02	; 2
    3ac0:	50 e0       	ldi	r21, 0x00	; 0
    3ac2:	60 e0       	ldi	r22, 0x00	; 0
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	0e 94 c7 23 	call	0x478e	; 0x478e <memset>
	uint8 aux8;

	// Global variables initialization
	ctrlPwm.allFlags = 0;
    3aca:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <ctrlPwm>
	setBit(ctrlPwm.allFlags, 0);
    3ace:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <ctrlPwm>
    3ad2:	81 60       	ori	r24, 0x01	; 1
    3ad4:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ctrlPwm>
	// Nesse programa vou utilizar 2 servos
	for(i=0; i<2;i++){
    3ad8:	19 82       	std	Y+1, r1	; 0x01
    3ada:	a9 c0       	rjmp	.+338    	; 0x3c2e <main+0x1f8>
		minCount[i] = 900;
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	88 2f       	mov	r24, r24
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	88 0f       	add	r24, r24
    3ae4:	99 1f       	adc	r25, r25
    3ae6:	9e 01       	movw	r18, r28
    3ae8:	2f 5f       	subi	r18, 0xFF	; 255
    3aea:	3f 4f       	sbci	r19, 0xFF	; 255
    3aec:	82 0f       	add	r24, r18
    3aee:	93 1f       	adc	r25, r19
    3af0:	04 96       	adiw	r24, 0x04	; 4
    3af2:	24 e8       	ldi	r18, 0x84	; 132
    3af4:	33 e0       	ldi	r19, 0x03	; 3
    3af6:	fc 01       	movw	r30, r24
    3af8:	31 83       	std	Z+1, r19	; 0x01
    3afa:	20 83       	st	Z, r18
		maxCount[i] = 2100;
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	88 2f       	mov	r24, r24
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	88 0f       	add	r24, r24
    3b04:	99 1f       	adc	r25, r25
    3b06:	9e 01       	movw	r18, r28
    3b08:	2f 5f       	subi	r18, 0xFF	; 255
    3b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0c:	82 0f       	add	r24, r18
    3b0e:	93 1f       	adc	r25, r19
    3b10:	0c 96       	adiw	r24, 0x0c	; 12
    3b12:	24 e3       	ldi	r18, 0x34	; 52
    3b14:	38 e0       	ldi	r19, 0x08	; 8
    3b16:	fc 01       	movw	r30, r24
    3b18:	31 83       	std	Z+1, r19	; 0x01
    3b1a:	20 83       	st	Z, r18
		percent[i] = 20;
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	88 2f       	mov	r24, r24
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	9e 01       	movw	r18, r28
    3b24:	2b 5e       	subi	r18, 0xEB	; 235
    3b26:	3f 4f       	sbci	r19, 0xFF	; 255
    3b28:	82 0f       	add	r24, r18
    3b2a:	93 1f       	adc	r25, r19
    3b2c:	24 e1       	ldi	r18, 0x14	; 20
    3b2e:	fc 01       	movw	r30, r24
    3b30:	20 83       	st	Z, r18
		aux16 = (maxCount[i]-minCount[i])/100;
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	88 2f       	mov	r24, r24
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	88 0f       	add	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	9e 01       	movw	r18, r28
    3b3e:	2f 5f       	subi	r18, 0xFF	; 255
    3b40:	3f 4f       	sbci	r19, 0xFF	; 255
    3b42:	82 0f       	add	r24, r18
    3b44:	93 1f       	adc	r25, r19
    3b46:	0c 96       	adiw	r24, 0x0c	; 12
    3b48:	fc 01       	movw	r30, r24
    3b4a:	20 81       	ld	r18, Z
    3b4c:	31 81       	ldd	r19, Z+1	; 0x01
    3b4e:	89 81       	ldd	r24, Y+1	; 0x01
    3b50:	88 2f       	mov	r24, r24
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	88 0f       	add	r24, r24
    3b56:	99 1f       	adc	r25, r25
    3b58:	ae 01       	movw	r20, r28
    3b5a:	4f 5f       	subi	r20, 0xFF	; 255
    3b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b5e:	84 0f       	add	r24, r20
    3b60:	95 1f       	adc	r25, r21
    3b62:	04 96       	adiw	r24, 0x04	; 4
    3b64:	fc 01       	movw	r30, r24
    3b66:	80 81       	ld	r24, Z
    3b68:	91 81       	ldd	r25, Z+1	; 0x01
    3b6a:	a9 01       	movw	r20, r18
    3b6c:	48 1b       	sub	r20, r24
    3b6e:	59 0b       	sbc	r21, r25
    3b70:	ca 01       	movw	r24, r20
    3b72:	96 95       	lsr	r25
    3b74:	87 95       	ror	r24
    3b76:	96 95       	lsr	r25
    3b78:	87 95       	ror	r24
    3b7a:	9c 01       	movw	r18, r24
    3b7c:	ab e7       	ldi	r26, 0x7B	; 123
    3b7e:	b4 e1       	ldi	r27, 0x14	; 20
    3b80:	0e 94 9a 23 	call	0x4734	; 0x4734 <__umulhisi3>
    3b84:	96 95       	lsr	r25
    3b86:	87 95       	ror	r24
    3b88:	9b 83       	std	Y+3, r25	; 0x03
    3b8a:	8a 83       	std	Y+2, r24	; 0x02
		aux16 = aux16*percent[i];
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	88 2f       	mov	r24, r24
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	9e 01       	movw	r18, r28
    3b94:	2b 5e       	subi	r18, 0xEB	; 235
    3b96:	3f 4f       	sbci	r19, 0xFF	; 255
    3b98:	82 0f       	add	r24, r18
    3b9a:	93 1f       	adc	r25, r19
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	80 81       	ld	r24, Z
    3ba0:	28 2f       	mov	r18, r24
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	4a 81       	ldd	r20, Y+2	; 0x02
    3ba6:	5b 81       	ldd	r21, Y+3	; 0x03
    3ba8:	42 9f       	mul	r20, r18
    3baa:	c0 01       	movw	r24, r0
    3bac:	43 9f       	mul	r20, r19
    3bae:	90 0d       	add	r25, r0
    3bb0:	52 9f       	mul	r21, r18
    3bb2:	90 0d       	add	r25, r0
    3bb4:	11 24       	eor	r1, r1
    3bb6:	9b 83       	std	Y+3, r25	; 0x03
    3bb8:	8a 83       	std	Y+2, r24	; 0x02
		aux16 = aux16 + minCount[i];
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	88 2f       	mov	r24, r24
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	9e 01       	movw	r18, r28
    3bc6:	2f 5f       	subi	r18, 0xFF	; 255
    3bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bca:	82 0f       	add	r24, r18
    3bcc:	93 1f       	adc	r25, r19
    3bce:	04 96       	adiw	r24, 0x04	; 4
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    3bd8:	3b 81       	ldd	r19, Y+3	; 0x03
    3bda:	82 0f       	add	r24, r18
    3bdc:	93 1f       	adc	r25, r19
    3bde:	9b 83       	std	Y+3, r25	; 0x03
    3be0:	8a 83       	std	Y+2, r24	; 0x02
		aux16 = aux16<<1;	// Multiplica por 2
    3be2:	8a 81       	ldd	r24, Y+2	; 0x02
    3be4:	9b 81       	ldd	r25, Y+3	; 0x03
    3be6:	88 0f       	add	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	9b 83       	std	Y+3, r25	; 0x03
    3bec:	8a 83       	std	Y+2, r24	; 0x02
		pwmRegValue[i] = aux16+2500+20000*i;
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	88 2f       	mov	r24, r24
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	29 81       	ldd	r18, Y+1	; 0x01
    3bf6:	42 2f       	mov	r20, r18
    3bf8:	50 e0       	ldi	r21, 0x00	; 0
    3bfa:	20 e2       	ldi	r18, 0x20	; 32
    3bfc:	3e e4       	ldi	r19, 0x4E	; 78
    3bfe:	42 9f       	mul	r20, r18
    3c00:	b0 01       	movw	r22, r0
    3c02:	43 9f       	mul	r20, r19
    3c04:	70 0d       	add	r23, r0
    3c06:	52 9f       	mul	r21, r18
    3c08:	70 0d       	add	r23, r0
    3c0a:	11 24       	eor	r1, r1
    3c0c:	ab 01       	movw	r20, r22
    3c0e:	2a 81       	ldd	r18, Y+2	; 0x02
    3c10:	3b 81       	ldd	r19, Y+3	; 0x03
    3c12:	24 0f       	add	r18, r20
    3c14:	35 1f       	adc	r19, r21
    3c16:	2c 53       	subi	r18, 0x3C	; 60
    3c18:	36 4f       	sbci	r19, 0xF6	; 246
    3c1a:	88 0f       	add	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	8b 58       	subi	r24, 0x8B	; 139
    3c20:	9e 4f       	sbci	r25, 0xFE	; 254
    3c22:	fc 01       	movw	r30, r24
    3c24:	31 83       	std	Z+1, r19	; 0x01
    3c26:	20 83       	st	Z, r18
	for(i=0; i<2;i++){
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	8f 5f       	subi	r24, 0xFF	; 255
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	82 30       	cpi	r24, 0x02	; 2
    3c32:	08 f4       	brcc	.+2      	; 0x3c36 <main+0x200>
    3c34:	53 cf       	rjmp	.-346    	; 0x3adc <main+0xa6>
	}
	// Receive
	receiveWd = 0;
    3c36:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <receiveWd>
	// ADC
	adcCurrent = 0;
    3c3a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <adcCurrent+0x1>
    3c3e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <adcCurrent>
	ctrlAdc.adcChannel = HEAD_H;
    3c42:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    3c46:	87 7f       	andi	r24, 0xF7	; 247
    3c48:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ctrlAdc>

	// PWM initialization
	setBit(PWM_REG_DDR, PWM0_BIT);		// Seta pinos do pwm como saída
    3c4c:	8a e2       	ldi	r24, 0x2A	; 42
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	2a e2       	ldi	r18, 0x2A	; 42
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	f9 01       	movw	r30, r18
    3c56:	20 81       	ld	r18, Z
    3c58:	20 62       	ori	r18, 0x20	; 32
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	20 83       	st	Z, r18
	setBit(PWM_REG_DDR, PWM1_BIT);
    3c5e:	8a e2       	ldi	r24, 0x2A	; 42
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	2a e2       	ldi	r18, 0x2A	; 42
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	f9 01       	movw	r30, r18
    3c68:	20 81       	ld	r18, Z
    3c6a:	20 64       	ori	r18, 0x40	; 64
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	20 83       	st	Z, r18

	// USART Configuration
	usartConfig(USART_MODE_ASYNCHRONOUS, USART_BAUD_9600, USART_DATA_BITS_8, USART_PARITY_NONE, USART_STOP_BIT_SINGLE);
    3c70:	e1 2c       	mov	r14, r1
    3c72:	00 e0       	ldi	r16, 0x00	; 0
    3c74:	23 e0       	ldi	r18, 0x03	; 3
    3c76:	40 e8       	ldi	r20, 0x80	; 128
    3c78:	55 e2       	ldi	r21, 0x25	; 37
    3c7a:	60 e0       	ldi	r22, 0x00	; 0
    3c7c:	70 e0       	ldi	r23, 0x00	; 0
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <usartConfig>
	usartEnableReceiver();
    3c84:	0e 94 22 1a 	call	0x3444	; 0x3444 <usartEnableReceiver>
	usartEnableTransmitter();
    3c88:	0e 94 44 1a 	call	0x3488	; 0x3488 <usartEnableTransmitter>
	usartActivateReceptionCompleteInterrupt();
    3c8c:	0e 94 66 1a 	call	0x34cc	; 0x34cc <usartActivateReceptionCompleteInterrupt>
	usartStdio();
    3c90:	0e 94 cc 1a 	call	0x3598	; 0x3598 <usartStdio>

	// Timer 0 	- ADC trigger
	//timer0SetCompareAValue(255);
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);
    3c94:	65 e0       	ldi	r22, 0x05	; 5
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	0e 94 9f 10 	call	0x213e	; 0x213e <timer0Config>

	// Timer1 initialization
	timer1SetCompareAValue(40000);	//
    3c9c:	80 e4       	ldi	r24, 0x40	; 64
    3c9e:	9c e9       	ldi	r25, 0x9C	; 156
    3ca0:	0e 94 ac 14 	call	0x2958	; 0x2958 <timer1SetCompareAValue>
	timer1SetCompareBValue(2500);
    3ca4:	84 ec       	ldi	r24, 0xC4	; 196
    3ca6:	99 e0       	ldi	r25, 0x09	; 9
    3ca8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <timer1SetCompareBValue>
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_8);
    3cac:	62 e0       	ldi	r22, 0x02	; 2
    3cae:	84 e0       	ldi	r24, 0x04	; 4
    3cb0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <timer1Config>
	timer1ActivateCompareBInterrupt();
    3cb4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <timer1ActivateCompareBInterrupt>

	//Timer2 initialization - WatchDog recepção
	timer2Config(TIMER_A_MODE_NORMAL, TIMER_B_PRESCALER_1024);	// Configura o timer
    3cb8:	67 e0       	ldi	r22, 0x07	; 7
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	0e 94 48 15 	call	0x2a90	; 0x2a90 <timer2Config>
	timer2Config(TIMER_A_MODE_NO_CHANGE, TIMER_B_CLOCK_DISABLE);
    3cc0:	60 e0       	ldi	r22, 0x00	; 0
    3cc2:	8f ef       	ldi	r24, 0xFF	; 255
    3cc4:	0e 94 48 15 	call	0x2a90	; 0x2a90 <timer2Config>
	timer2SetCounterValue(0);
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <timer2SetCounterValue>
	timer2ActivateOverflowInterrupt();
    3cce:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <timer2ActivateOverflowInterrupt>

	// ADC configuration
	adcConfig(ADC_MODE_AUTO_TIMER0_OVERFLOW, ADC_REFERENCE_INTERNAL, ADC_PRESCALER_128);
    3cd2:	47 e0       	ldi	r20, 0x07	; 7
    3cd4:	63 e0       	ldi	r22, 0x03	; 3
    3cd6:	85 e0       	ldi	r24, 0x05	; 5
    3cd8:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <adcConfig>
	adcDisableDigitalInput(0b000011);
    3cdc:	83 e0       	ldi	r24, 0x03	; 3
    3cde:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <adcDisableDigitalInput>
	adcSelectChannel(ADC_CHANNEL_0);
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <adcSelectChannel>
	adcActivateInterrupt();
    3ce8:	0e 94 22 18 	call	0x3044	; 0x3044 <adcActivateInterrupt>
	adcEnable();
    3cec:	0e 94 ef 17 	call	0x2fde	; 0x2fde <adcEnable>
//setBit(DDRD, PD2);
//clrBit(PORTD, PD2);

//setBit(DDRB, PB1);

	sei();
    3cf0:	78 94       	sei
    while(1){

    	//printf("Juca Po\n");

    	// Recepção dos pacotes
    	if(packageReady == 0){
    3cf2:	ce 01       	movw	r24, r28
    3cf4:	84 5b       	subi	r24, 0xB4	; 180
    3cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	80 81       	ld	r24, Z
    3cfc:	88 23       	and	r24, r24
    3cfe:	51 f5       	brne	.+84     	; 0x3d54 <main+0x31e>
			receivePackageData(&packageIndex, packageData, &packageSize, &packageReady);
    3d00:	9e 01       	movw	r18, r28
    3d02:	24 5b       	subi	r18, 0xB4	; 180
    3d04:	3f 4f       	sbci	r19, 0xFF	; 255
    3d06:	ae 01       	movw	r20, r28
    3d08:	43 5b       	subi	r20, 0xB3	; 179
    3d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d0c:	be 01       	movw	r22, r28
    3d0e:	67 5e       	subi	r22, 0xE7	; 231
    3d10:	7f 4f       	sbci	r23, 0xFF	; 255
    3d12:	ce 01       	movw	r24, r28
    3d14:	85 5b       	subi	r24, 0xB5	; 181
    3d16:	9f 4f       	sbci	r25, 0xFF	; 255
    3d18:	0e 94 22 22 	call	0x4444	; 0x4444 <receivePackageData>
if(receiveWd){
    3d1c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <receiveWd>
    3d20:	88 23       	and	r24, r24
    3d22:	c1 f0       	breq	.+48     	; 0x3d54 <main+0x31e>
	receiveWd=0;
    3d24:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <receiveWd>

	//printf("-- WatchDog Recepção --\n");
	packageIndex= 0;
    3d28:	ce 01       	movw	r24, r28
    3d2a:	85 5b       	subi	r24, 0xB5	; 181
    3d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2e:	fc 01       	movw	r30, r24
    3d30:	10 82       	st	Z, r1
	packageSize = 0;
    3d32:	ce 01       	movw	r24, r28
    3d34:	83 5b       	subi	r24, 0xB3	; 179
    3d36:	9f 4f       	sbci	r25, 0xFF	; 255
    3d38:	fc 01       	movw	r30, r24
    3d3a:	10 82       	st	Z, r1
	packageReady = 0;
    3d3c:	ce 01       	movw	r24, r28
    3d3e:	84 5b       	subi	r24, 0xB4	; 180
    3d40:	9f 4f       	sbci	r25, 0xFF	; 255
    3d42:	fc 01       	movw	r30, r24
    3d44:	10 82       	st	Z, r1
	timer2Config(TIMER_A_MODE_NO_CHANGE, TIMER_B_CLOCK_DISABLE);
    3d46:	60 e0       	ldi	r22, 0x00	; 0
    3d48:	8f ef       	ldi	r24, 0xFF	; 255
    3d4a:	0e 94 48 15 	call	0x2a90	; 0x2a90 <timer2Config>
	timer2SetCounterValue(0);
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <timer2SetCounterValue>
}
		}
    	// Processamento dos pacotes
		if(packageReady){
    3d54:	ce 01       	movw	r24, r28
    3d56:	84 5b       	subi	r24, 0xB4	; 180
    3d58:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	80 81       	ld	r24, Z
    3d5e:	88 23       	and	r24, r24
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <main+0x32e>
    3d62:	fd c0       	rjmp	.+506    	; 0x3f5e <main+0x528>
			// Maquina de tratamento do pacote

			packageReady = 0;
    3d64:	ce 01       	movw	r24, r28
    3d66:	84 5b       	subi	r24, 0xB4	; 180
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	10 82       	st	Z, r1
			packageIndex = 0;
    3d6e:	ce 01       	movw	r24, r28
    3d70:	85 5b       	subi	r24, 0xB5	; 181
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	fc 01       	movw	r30, r24
    3d76:	10 82       	st	Z, r1

			if(packageData[0]==0x01){
    3d78:	89 8d       	ldd	r24, Y+25	; 0x19
    3d7a:	81 30       	cpi	r24, 0x01	; 1
    3d7c:	09 f0       	breq	.+2      	; 0x3d80 <main+0x34a>
    3d7e:	ef c0       	rjmp	.+478    	; 0x3f5e <main+0x528>
				percent[packageData[1]] = packageData[2];
    3d80:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d82:	88 2f       	mov	r24, r24
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3d88:	9e 01       	movw	r18, r28
    3d8a:	2b 5e       	subi	r18, 0xEB	; 235
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	82 0f       	add	r24, r18
    3d90:	93 1f       	adc	r25, r19
    3d92:	fc 01       	movw	r30, r24
    3d94:	40 83       	st	Z, r20

				aux16 = (maxCount[packageData[1]]-minCount[packageData[1]])/100;
    3d96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d98:	88 2f       	mov	r24, r24
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	88 0f       	add	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	9e 01       	movw	r18, r28
    3da2:	2f 5f       	subi	r18, 0xFF	; 255
    3da4:	3f 4f       	sbci	r19, 0xFF	; 255
    3da6:	82 0f       	add	r24, r18
    3da8:	93 1f       	adc	r25, r19
    3daa:	0c 96       	adiw	r24, 0x0c	; 12
    3dac:	fc 01       	movw	r30, r24
    3dae:	20 81       	ld	r18, Z
    3db0:	31 81       	ldd	r19, Z+1	; 0x01
    3db2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3db4:	88 2f       	mov	r24, r24
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	ae 01       	movw	r20, r28
    3dbe:	4f 5f       	subi	r20, 0xFF	; 255
    3dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc2:	84 0f       	add	r24, r20
    3dc4:	95 1f       	adc	r25, r21
    3dc6:	04 96       	adiw	r24, 0x04	; 4
    3dc8:	fc 01       	movw	r30, r24
    3dca:	80 81       	ld	r24, Z
    3dcc:	91 81       	ldd	r25, Z+1	; 0x01
    3dce:	a9 01       	movw	r20, r18
    3dd0:	48 1b       	sub	r20, r24
    3dd2:	59 0b       	sbc	r21, r25
    3dd4:	ca 01       	movw	r24, r20
    3dd6:	96 95       	lsr	r25
    3dd8:	87 95       	ror	r24
    3dda:	96 95       	lsr	r25
    3ddc:	87 95       	ror	r24
    3dde:	9c 01       	movw	r18, r24
    3de0:	ab e7       	ldi	r26, 0x7B	; 123
    3de2:	b4 e1       	ldi	r27, 0x14	; 20
    3de4:	0e 94 9a 23 	call	0x4734	; 0x4734 <__umulhisi3>
    3de8:	96 95       	lsr	r25
    3dea:	87 95       	ror	r24
    3dec:	9b 83       	std	Y+3, r25	; 0x03
    3dee:	8a 83       	std	Y+2, r24	; 0x02
				aux16 = aux16*percent[packageData[1]];
    3df0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3df2:	88 2f       	mov	r24, r24
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	9e 01       	movw	r18, r28
    3df8:	2b 5e       	subi	r18, 0xEB	; 235
    3dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfc:	82 0f       	add	r24, r18
    3dfe:	93 1f       	adc	r25, r19
    3e00:	fc 01       	movw	r30, r24
    3e02:	80 81       	ld	r24, Z
    3e04:	28 2f       	mov	r18, r24
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	4a 81       	ldd	r20, Y+2	; 0x02
    3e0a:	5b 81       	ldd	r21, Y+3	; 0x03
    3e0c:	42 9f       	mul	r20, r18
    3e0e:	c0 01       	movw	r24, r0
    3e10:	43 9f       	mul	r20, r19
    3e12:	90 0d       	add	r25, r0
    3e14:	52 9f       	mul	r21, r18
    3e16:	90 0d       	add	r25, r0
    3e18:	11 24       	eor	r1, r1
    3e1a:	9b 83       	std	Y+3, r25	; 0x03
    3e1c:	8a 83       	std	Y+2, r24	; 0x02
				aux16 = aux16 + minCount[packageData[1]];
    3e1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e20:	88 2f       	mov	r24, r24
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	88 0f       	add	r24, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	9e 01       	movw	r18, r28
    3e2a:	2f 5f       	subi	r18, 0xFF	; 255
    3e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2e:	82 0f       	add	r24, r18
    3e30:	93 1f       	adc	r25, r19
    3e32:	04 96       	adiw	r24, 0x04	; 4
    3e34:	fc 01       	movw	r30, r24
    3e36:	80 81       	ld	r24, Z
    3e38:	91 81       	ldd	r25, Z+1	; 0x01
    3e3a:	2a 81       	ldd	r18, Y+2	; 0x02
    3e3c:	3b 81       	ldd	r19, Y+3	; 0x03
    3e3e:	82 0f       	add	r24, r18
    3e40:	93 1f       	adc	r25, r19
    3e42:	9b 83       	std	Y+3, r25	; 0x03
    3e44:	8a 83       	std	Y+2, r24	; 0x02
				aux16 = ((aux16>>1)+(aux16<<1));
    3e46:	8a 81       	ldd	r24, Y+2	; 0x02
    3e48:	9b 81       	ldd	r25, Y+3	; 0x03
    3e4a:	9c 01       	movw	r18, r24
    3e4c:	36 95       	lsr	r19
    3e4e:	27 95       	ror	r18
    3e50:	8a 81       	ldd	r24, Y+2	; 0x02
    3e52:	9b 81       	ldd	r25, Y+3	; 0x03
    3e54:	88 0f       	add	r24, r24
    3e56:	99 1f       	adc	r25, r25
    3e58:	82 0f       	add	r24, r18
    3e5a:	93 1f       	adc	r25, r19
    3e5c:	9b 83       	std	Y+3, r25	; 0x03
    3e5e:	8a 83       	std	Y+2, r24	; 0x02
				pwmRegValue[packageData[1]] = aux16 + 2500 + (20000*packageData[1]);
    3e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e62:	88 2f       	mov	r24, r24
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3e68:	42 2f       	mov	r20, r18
    3e6a:	50 e0       	ldi	r21, 0x00	; 0
    3e6c:	20 e2       	ldi	r18, 0x20	; 32
    3e6e:	3e e4       	ldi	r19, 0x4E	; 78
    3e70:	42 9f       	mul	r20, r18
    3e72:	b0 01       	movw	r22, r0
    3e74:	43 9f       	mul	r20, r19
    3e76:	70 0d       	add	r23, r0
    3e78:	52 9f       	mul	r21, r18
    3e7a:	70 0d       	add	r23, r0
    3e7c:	11 24       	eor	r1, r1
    3e7e:	ab 01       	movw	r20, r22
    3e80:	2a 81       	ldd	r18, Y+2	; 0x02
    3e82:	3b 81       	ldd	r19, Y+3	; 0x03
    3e84:	24 0f       	add	r18, r20
    3e86:	35 1f       	adc	r19, r21
    3e88:	2c 53       	subi	r18, 0x3C	; 60
    3e8a:	36 4f       	sbci	r19, 0xF6	; 246
    3e8c:	88 0f       	add	r24, r24
    3e8e:	99 1f       	adc	r25, r25
    3e90:	8b 58       	subi	r24, 0x8B	; 139
    3e92:	9e 4f       	sbci	r25, 0xFE	; 254
    3e94:	fc 01       	movw	r30, r24
    3e96:	31 83       	std	Z+1, r19	; 0x01
    3e98:	20 83       	st	Z, r18

// Transmissão utilizando buildTransmitPackage
packageAux[0] = packageData[0];		// Sem uso de for pra maior velocidade
    3e9a:	29 8d       	ldd	r18, Y+25	; 0x19
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	82 5b       	subi	r24, 0xB2	; 178
    3ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	20 83       	st	Z, r18
packageAux[1] = packageData[1];
    3ea6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	82 5b       	subi	r24, 0xB2	; 178
    3eac:	9f 4f       	sbci	r25, 0xFF	; 255
    3eae:	fc 01       	movw	r30, r24
    3eb0:	21 83       	std	Z+1, r18	; 0x01
packageAux[2] = packageData[2];
    3eb2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3eb4:	ce 01       	movw	r24, r28
    3eb6:	82 5b       	subi	r24, 0xB2	; 178
    3eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eba:	fc 01       	movw	r30, r24
    3ebc:	22 83       	std	Z+2, r18	; 0x02
packageSize = buildTransmitPackageData(packageData, packageAux, packageSize);
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	83 5b       	subi	r24, 0xB3	; 179
    3ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	40 81       	ld	r20, Z
    3ec8:	9e 01       	movw	r18, r28
    3eca:	22 5b       	subi	r18, 0xB2	; 178
    3ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ece:	ce 01       	movw	r24, r28
    3ed0:	49 96       	adiw	r24, 0x19	; 25
    3ed2:	b9 01       	movw	r22, r18
    3ed4:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <buildTransmitPackageData>
    3ed8:	28 2f       	mov	r18, r24
    3eda:	ce 01       	movw	r24, r28
    3edc:	83 5b       	subi	r24, 0xB3	; 179
    3ede:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	20 83       	st	Z, r18
i=0;
    3ee4:	19 82       	std	Y+1, r1	; 0x01
while(i<packageSize){
    3ee6:	0f c0       	rjmp	.+30     	; 0x3f06 <main+0x4d0>
	usartTransmit(packageData[i++]);
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	91 e0       	ldi	r25, 0x01	; 1
    3eec:	98 0f       	add	r25, r24
    3eee:	99 83       	std	Y+1, r25	; 0x01
    3ef0:	88 2f       	mov	r24, r24
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	9e 01       	movw	r18, r28
    3ef6:	27 5e       	subi	r18, 0xE7	; 231
    3ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    3efa:	82 0f       	add	r24, r18
    3efc:	93 1f       	adc	r25, r19
    3efe:	fc 01       	movw	r30, r24
    3f00:	80 81       	ld	r24, Z
    3f02:	0e 94 56 1b 	call	0x36ac	; 0x36ac <usartTransmit>
while(i<packageSize){
    3f06:	ce 01       	movw	r24, r28
    3f08:	83 5b       	subi	r24, 0xB3	; 179
    3f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	80 81       	ld	r24, Z
    3f10:	99 81       	ldd	r25, Y+1	; 0x01
    3f12:	98 17       	cp	r25, r24
    3f14:	48 f3       	brcs	.-46     	; 0x3ee8 <main+0x4b2>
}
printf("-- PWM = %d pct = %d -- \n", packageData[1], percent[packageData[1]]);
    3f16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f18:	88 2f       	mov	r24, r24
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	9e 01       	movw	r18, r28
    3f1e:	2b 5e       	subi	r18, 0xEB	; 235
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255
    3f22:	82 0f       	add	r24, r18
    3f24:	93 1f       	adc	r25, r19
    3f26:	fc 01       	movw	r30, r24
    3f28:	80 81       	ld	r24, Z
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f30:	88 2f       	mov	r24, r24
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	43 2f       	mov	r20, r19
    3f36:	4f 93       	push	r20
    3f38:	2f 93       	push	r18
    3f3a:	29 2f       	mov	r18, r25
    3f3c:	2f 93       	push	r18
    3f3e:	8f 93       	push	r24
    3f40:	8e e0       	ldi	r24, 0x0E	; 14
    3f42:	91 e0       	ldi	r25, 0x01	; 1
    3f44:	89 2f       	mov	r24, r25
    3f46:	8f 93       	push	r24
    3f48:	8e e0       	ldi	r24, 0x0E	; 14
    3f4a:	91 e0       	ldi	r25, 0x01	; 1
    3f4c:	8f 93       	push	r24
    3f4e:	0e 94 ce 23 	call	0x479c	; 0x479c <printf>
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	0f 90       	pop	r0
    3f5c:	0f 90       	pop	r0
//				if(pwmRegValue[packageData[1]]>(maxCount[packageData[1]]+2500)) pwmRegValue[packageData[1]]=maxCount[packageData[1]];
			}
		} // End processamento pacotes

		// Processamento ADC
		if(ctrlAdc.adcCount>=MEASURE_WINDOW){
    3f5e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    3f62:	87 70       	andi	r24, 0x07	; 7
    3f64:	88 2f       	mov	r24, r24
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	07 97       	sbiw	r24, 0x07	; 7
    3f6a:	0c f4       	brge	.+2      	; 0x3f6e <main+0x538>
    3f6c:	4a c1       	rjmp	.+660    	; 0x4202 <main+0x7cc>
cplBit(PORTB, PB1);
    3f6e:	85 e2       	ldi	r24, 0x25	; 37
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	25 e2       	ldi	r18, 0x25	; 37
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	f9 01       	movw	r30, r18
    3f78:	30 81       	ld	r19, Z
    3f7a:	22 e0       	ldi	r18, 0x02	; 2
    3f7c:	23 27       	eor	r18, r19
    3f7e:	fc 01       	movw	r30, r24
    3f80:	20 83       	st	Z, r18
			ctrlAdc.adcCount=0;
    3f82:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    3f86:	88 7f       	andi	r24, 0xF8	; 248
    3f88:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ctrlAdc>
			// Replace value in buffer and update total value
			totalBuffer[(ctrlAdc.adcChannel)] -= buffer[(ctrlAdc.adcChannel)][nextWrite[ctrlAdc.adcChannel]];
    3f8c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    3f90:	83 fb       	bst	r24, 3
    3f92:	88 27       	eor	r24, r24
    3f94:	80 f9       	bld	r24, 0
    3f96:	28 2f       	mov	r18, r24
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    3f9e:	83 fb       	bst	r24, 3
    3fa0:	88 27       	eor	r24, r24
    3fa2:	80 f9       	bld	r24, 0
    3fa4:	88 2f       	mov	r24, r24
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	ae 01       	movw	r20, r28
    3faa:	53 95       	inc	r21
    3fac:	84 0f       	add	r24, r20
    3fae:	95 1f       	adc	r25, r21
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	80 81       	ld	r24, Z
    3fb4:	88 2f       	mov	r24, r24
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	ae 01       	movw	r20, r28
    3fba:	40 58       	subi	r20, 0x80	; 128
    3fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3fbe:	00 24       	eor	r0, r0
    3fc0:	36 95       	lsr	r19
    3fc2:	27 95       	ror	r18
    3fc4:	07 94       	ror	r0
    3fc6:	36 95       	lsr	r19
    3fc8:	27 95       	ror	r18
    3fca:	07 94       	ror	r0
    3fcc:	32 2f       	mov	r19, r18
    3fce:	20 2d       	mov	r18, r0
    3fd0:	24 0f       	add	r18, r20
    3fd2:	35 1f       	adc	r19, r21
    3fd4:	82 0f       	add	r24, r18
    3fd6:	93 1f       	adc	r25, r19
    3fd8:	fc 01       	movw	r30, r24
    3fda:	60 81       	ld	r22, Z
    3fdc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    3fe0:	83 fb       	bst	r24, 3
    3fe2:	22 27       	eor	r18, r18
    3fe4:	20 f9       	bld	r18, 0
    3fe6:	82 2f       	mov	r24, r18
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	22 2f       	mov	r18, r18
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	ae 01       	movw	r20, r28
    3ff0:	4e 5f       	subi	r20, 0xFE	; 254
    3ff2:	5e 4f       	sbci	r21, 0xFE	; 254
    3ff4:	22 0f       	add	r18, r18
    3ff6:	33 1f       	adc	r19, r19
    3ff8:	24 0f       	add	r18, r20
    3ffa:	35 1f       	adc	r19, r21
    3ffc:	f9 01       	movw	r30, r18
    3ffe:	40 81       	ld	r20, Z
    4000:	51 81       	ldd	r21, Z+1	; 0x01
    4002:	26 2f       	mov	r18, r22
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	ba 01       	movw	r22, r20
    4008:	62 1b       	sub	r22, r18
    400a:	73 0b       	sbc	r23, r19
    400c:	9b 01       	movw	r18, r22
    400e:	ae 01       	movw	r20, r28
    4010:	4e 5f       	subi	r20, 0xFE	; 254
    4012:	5e 4f       	sbci	r21, 0xFE	; 254
    4014:	88 0f       	add	r24, r24
    4016:	99 1f       	adc	r25, r25
    4018:	84 0f       	add	r24, r20
    401a:	95 1f       	adc	r25, r21
    401c:	fc 01       	movw	r30, r24
    401e:	31 83       	std	Z+1, r19	; 0x01
    4020:	20 83       	st	Z, r18
			aux8 = (adcCurrent>>2);
    4022:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <adcCurrent>
    4026:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <adcCurrent+0x1>
    402a:	96 95       	lsr	r25
    402c:	87 95       	ror	r24
    402e:	96 95       	lsr	r25
    4030:	87 95       	ror	r24
    4032:	8c 83       	std	Y+4, r24	; 0x04
			buffer[ctrlAdc.adcChannel][nextWrite[ctrlAdc.adcChannel]] = aux8;
    4034:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    4038:	83 fb       	bst	r24, 3
    403a:	88 27       	eor	r24, r24
    403c:	80 f9       	bld	r24, 0
    403e:	28 2f       	mov	r18, r24
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    4046:	83 fb       	bst	r24, 3
    4048:	88 27       	eor	r24, r24
    404a:	80 f9       	bld	r24, 0
    404c:	88 2f       	mov	r24, r24
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	ae 01       	movw	r20, r28
    4052:	53 95       	inc	r21
    4054:	84 0f       	add	r24, r20
    4056:	95 1f       	adc	r25, r21
    4058:	fc 01       	movw	r30, r24
    405a:	80 81       	ld	r24, Z
    405c:	88 2f       	mov	r24, r24
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	ae 01       	movw	r20, r28
    4062:	40 58       	subi	r20, 0x80	; 128
    4064:	5f 4f       	sbci	r21, 0xFF	; 255
    4066:	00 24       	eor	r0, r0
    4068:	36 95       	lsr	r19
    406a:	27 95       	ror	r18
    406c:	07 94       	ror	r0
    406e:	36 95       	lsr	r19
    4070:	27 95       	ror	r18
    4072:	07 94       	ror	r0
    4074:	32 2f       	mov	r19, r18
    4076:	20 2d       	mov	r18, r0
    4078:	24 0f       	add	r18, r20
    407a:	35 1f       	adc	r19, r21
    407c:	82 0f       	add	r24, r18
    407e:	93 1f       	adc	r25, r19
    4080:	2c 81       	ldd	r18, Y+4	; 0x04
    4082:	fc 01       	movw	r30, r24
    4084:	20 83       	st	Z, r18
			totalBuffer[ctrlAdc.adcChannel] += buffer[ctrlAdc.adcChannel][nextWrite[ctrlAdc.adcChannel]];
    4086:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    408a:	83 fb       	bst	r24, 3
    408c:	88 27       	eor	r24, r24
    408e:	80 f9       	bld	r24, 0
    4090:	28 2f       	mov	r18, r24
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    4098:	83 fb       	bst	r24, 3
    409a:	88 27       	eor	r24, r24
    409c:	80 f9       	bld	r24, 0
    409e:	88 2f       	mov	r24, r24
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	ae 01       	movw	r20, r28
    40a4:	53 95       	inc	r21
    40a6:	84 0f       	add	r24, r20
    40a8:	95 1f       	adc	r25, r21
    40aa:	fc 01       	movw	r30, r24
    40ac:	80 81       	ld	r24, Z
    40ae:	88 2f       	mov	r24, r24
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	ae 01       	movw	r20, r28
    40b4:	40 58       	subi	r20, 0x80	; 128
    40b6:	5f 4f       	sbci	r21, 0xFF	; 255
    40b8:	00 24       	eor	r0, r0
    40ba:	36 95       	lsr	r19
    40bc:	27 95       	ror	r18
    40be:	07 94       	ror	r0
    40c0:	36 95       	lsr	r19
    40c2:	27 95       	ror	r18
    40c4:	07 94       	ror	r0
    40c6:	32 2f       	mov	r19, r18
    40c8:	20 2d       	mov	r18, r0
    40ca:	24 0f       	add	r18, r20
    40cc:	35 1f       	adc	r19, r21
    40ce:	82 0f       	add	r24, r18
    40d0:	93 1f       	adc	r25, r19
    40d2:	fc 01       	movw	r30, r24
    40d4:	60 81       	ld	r22, Z
    40d6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    40da:	83 fb       	bst	r24, 3
    40dc:	22 27       	eor	r18, r18
    40de:	20 f9       	bld	r18, 0
    40e0:	82 2f       	mov	r24, r18
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	22 2f       	mov	r18, r18
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	ae 01       	movw	r20, r28
    40ea:	4e 5f       	subi	r20, 0xFE	; 254
    40ec:	5e 4f       	sbci	r21, 0xFE	; 254
    40ee:	22 0f       	add	r18, r18
    40f0:	33 1f       	adc	r19, r19
    40f2:	24 0f       	add	r18, r20
    40f4:	35 1f       	adc	r19, r21
    40f6:	f9 01       	movw	r30, r18
    40f8:	40 81       	ld	r20, Z
    40fa:	51 81       	ldd	r21, Z+1	; 0x01
    40fc:	26 2f       	mov	r18, r22
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	24 0f       	add	r18, r20
    4102:	35 1f       	adc	r19, r21
    4104:	ae 01       	movw	r20, r28
    4106:	4e 5f       	subi	r20, 0xFE	; 254
    4108:	5e 4f       	sbci	r21, 0xFE	; 254
    410a:	88 0f       	add	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	84 0f       	add	r24, r20
    4110:	95 1f       	adc	r25, r21
    4112:	fc 01       	movw	r30, r24
    4114:	31 83       	std	Z+1, r19	; 0x01
    4116:	20 83       	st	Z, r18
			// Update pointer(?)
			nextWrite[ctrlAdc.adcChannel] == (BUFFER_SIZE-1) ? nextWrite[ctrlAdc.adcChannel]=0 : nextWrite[ctrlAdc.adcChannel]++;
    4118:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    411c:	83 fb       	bst	r24, 3
    411e:	88 27       	eor	r24, r24
    4120:	80 f9       	bld	r24, 0
    4122:	88 2f       	mov	r24, r24
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	9e 01       	movw	r18, r28
    4128:	33 95       	inc	r19
    412a:	82 0f       	add	r24, r18
    412c:	93 1f       	adc	r25, r19
    412e:	fc 01       	movw	r30, r24
    4130:	80 81       	ld	r24, Z
    4132:	8f 33       	cpi	r24, 0x3F	; 63
    4134:	71 f4       	brne	.+28     	; 0x4152 <main+0x71c>
    4136:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    413a:	83 fb       	bst	r24, 3
    413c:	88 27       	eor	r24, r24
    413e:	80 f9       	bld	r24, 0
    4140:	88 2f       	mov	r24, r24
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	9e 01       	movw	r18, r28
    4146:	33 95       	inc	r19
    4148:	82 0f       	add	r24, r18
    414a:	93 1f       	adc	r25, r19
    414c:	fc 01       	movw	r30, r24
    414e:	10 82       	st	Z, r1
    4150:	15 c0       	rjmp	.+42     	; 0x417c <main+0x746>
    4152:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    4156:	83 fb       	bst	r24, 3
    4158:	88 27       	eor	r24, r24
    415a:	80 f9       	bld	r24, 0
    415c:	88 2f       	mov	r24, r24
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	9e 01       	movw	r18, r28
    4162:	33 95       	inc	r19
    4164:	28 0f       	add	r18, r24
    4166:	39 1f       	adc	r19, r25
    4168:	f9 01       	movw	r30, r18
    416a:	20 81       	ld	r18, Z
    416c:	41 e0       	ldi	r20, 0x01	; 1
    416e:	42 0f       	add	r20, r18
    4170:	9e 01       	movw	r18, r28
    4172:	33 95       	inc	r19
    4174:	82 0f       	add	r24, r18
    4176:	93 1f       	adc	r25, r19
    4178:	fc 01       	movw	r30, r24
    417a:	40 83       	st	Z, r20
			// Get mean value
			meanBuffer[ctrlAdc.adcChannel] = (totalBuffer[ctrlAdc.adcChannel] >> DIV_VALUE);
    417c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    4180:	83 fb       	bst	r24, 3
    4182:	88 27       	eor	r24, r24
    4184:	80 f9       	bld	r24, 0
    4186:	88 2f       	mov	r24, r24
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <ctrlAdc>
    418e:	23 fb       	bst	r18, 3
    4190:	22 27       	eor	r18, r18
    4192:	20 f9       	bld	r18, 0
    4194:	22 2f       	mov	r18, r18
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	ae 01       	movw	r20, r28
    419a:	4e 5f       	subi	r20, 0xFE	; 254
    419c:	5e 4f       	sbci	r21, 0xFE	; 254
    419e:	22 0f       	add	r18, r18
    41a0:	33 1f       	adc	r19, r19
    41a2:	24 0f       	add	r18, r20
    41a4:	35 1f       	adc	r19, r21
    41a6:	f9 01       	movw	r30, r18
    41a8:	20 81       	ld	r18, Z
    41aa:	31 81       	ldd	r19, Z+1	; 0x01
    41ac:	00 24       	eor	r0, r0
    41ae:	22 0f       	add	r18, r18
    41b0:	33 1f       	adc	r19, r19
    41b2:	00 1c       	adc	r0, r0
    41b4:	22 0f       	add	r18, r18
    41b6:	33 1f       	adc	r19, r19
    41b8:	00 1c       	adc	r0, r0
    41ba:	23 2f       	mov	r18, r19
    41bc:	30 2d       	mov	r19, r0
    41be:	ae 01       	movw	r20, r28
    41c0:	4a 5f       	subi	r20, 0xFA	; 250
    41c2:	5e 4f       	sbci	r21, 0xFE	; 254
    41c4:	88 0f       	add	r24, r24
    41c6:	99 1f       	adc	r25, r25
    41c8:	84 0f       	add	r24, r20
    41ca:	95 1f       	adc	r25, r21
    41cc:	fc 01       	movw	r30, r24
    41ce:	31 83       	std	Z+1, r19	; 0x01
    41d0:	20 83       	st	Z, r18

			if(ctrlAdc.adcChannel == HEAD_H){
    41d2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    41d6:	83 fb       	bst	r24, 3
    41d8:	88 27       	eor	r24, r24
    41da:	80 f9       	bld	r24, 0
    41dc:	88 23       	and	r24, r24
    41de:	49 f4       	brne	.+18     	; 0x41f2 <main+0x7bc>
				ctrlAdc.adcChannel = HEAD_V;
    41e0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    41e4:	88 60       	ori	r24, 0x08	; 8
    41e6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ctrlAdc>
				adcSelectChannel(ADC_CHANNEL_1);
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <adcSelectChannel>
    41f0:	08 c0       	rjmp	.+16     	; 0x4202 <main+0x7cc>
			}else{
				ctrlAdc.adcChannel = HEAD_H;
    41f2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    41f6:	87 7f       	andi	r24, 0xF7	; 247
    41f8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ctrlAdc>
				adcSelectChannel(ADC_CHANNEL_0);
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <adcSelectChannel>
//				printf("pointer = %u - totalBuffer = %u\n\r", nextWrite[ctrlAdc.adcChannel], totalBuffer[ctrlAdc.adcChannel]);
//				printf("Buffer[%d] = %u\n\r", ctrlAdc.adcChannel, buffer[ctrlAdc.adcChannel][nextWrite[ctrlAdc.adcChannel]]);
//				printf("media = %u\n\r", meanBuffer[ctrlAdc.adcChannel]);
//			}
		}
		if(meanBuffer[ctrlAdc.adcChannel]>CURRENT_LIMIT){
    4202:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    	if(packageReady == 0){
    4206:	75 cd       	rjmp	.-1302   	; 0x3cf2 <main+0x2bc>

00004208 <__vector_18>:
}

// --------------------------------------------------------------------------------
//  Handlers ----------------------------------------------------------------------

USART_RECEIVER_BUFFER_FUNCTION_HANDLER;
    4208:	1f 92       	push	r1
    420a:	0f 92       	push	r0
    420c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4210:	0f 92       	push	r0
    4212:	11 24       	eor	r1, r1
    4214:	2f 93       	push	r18
    4216:	3f 93       	push	r19
    4218:	4f 93       	push	r20
    421a:	5f 93       	push	r21
    421c:	6f 93       	push	r22
    421e:	7f 93       	push	r23
    4220:	8f 93       	push	r24
    4222:	9f 93       	push	r25
    4224:	af 93       	push	r26
    4226:	bf 93       	push	r27
    4228:	ef 93       	push	r30
    422a:	ff 93       	push	r31
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
    4234:	0e 94 ba 1b 	call	0x3774	; 0x3774 <usartReceive>
    4238:	0e 94 36 1c 	call	0x386c	; 0x386c <usartAddDataToReceiverBuffer>
    423c:	00 00       	nop
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	ff 91       	pop	r31
    4244:	ef 91       	pop	r30
    4246:	bf 91       	pop	r27
    4248:	af 91       	pop	r26
    424a:	9f 91       	pop	r25
    424c:	8f 91       	pop	r24
    424e:	7f 91       	pop	r23
    4250:	6f 91       	pop	r22
    4252:	5f 91       	pop	r21
    4254:	4f 91       	pop	r20
    4256:	3f 91       	pop	r19
    4258:	2f 91       	pop	r18
    425a:	0f 90       	pop	r0
    425c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4260:	0f 90       	pop	r0
    4262:	1f 90       	pop	r1
    4264:	18 95       	reti

00004266 <__vector_21>:

ISR(ADC_vect)
{
    4266:	1f 92       	push	r1
    4268:	0f 92       	push	r0
    426a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    426e:	0f 92       	push	r0
    4270:	11 24       	eor	r1, r1
    4272:	2f 93       	push	r18
    4274:	3f 93       	push	r19
    4276:	8f 93       	push	r24
    4278:	9f 93       	push	r25
    427a:	ef 93       	push	r30
    427c:	ff 93       	push	r31
    427e:	cf 93       	push	r28
    4280:	df 93       	push	r29
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
	(ctrlAdc.adcCount)++;
    4286:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ctrlAdc>
    428a:	87 70       	andi	r24, 0x07	; 7
    428c:	8f 5f       	subi	r24, 0xFF	; 255
    428e:	87 70       	andi	r24, 0x07	; 7
    4290:	87 70       	andi	r24, 0x07	; 7
    4292:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <ctrlAdc>
    4296:	98 7f       	andi	r25, 0xF8	; 248
    4298:	89 2b       	or	r24, r25
    429a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ctrlAdc>
	adcCurrent = ADC;
    429e:	88 e7       	ldi	r24, 0x78	; 120
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	fc 01       	movw	r30, r24
    42a4:	80 81       	ld	r24, Z
    42a6:	91 81       	ldd	r25, Z+1	; 0x01
    42a8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <adcCurrent+0x1>
    42ac:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <adcCurrent>
//	}else{
//		adcSelectChannel(ADC_CHANNEL_0);
//		ctrlAdc.adcChannel = HEAD_H;
//	}

	setBit(TIFR0, TOV0);
    42b0:	85 e3       	ldi	r24, 0x35	; 53
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	25 e3       	ldi	r18, 0x35	; 53
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	f9 01       	movw	r30, r18
    42ba:	20 81       	ld	r18, Z
    42bc:	21 60       	ori	r18, 0x01	; 1
    42be:	fc 01       	movw	r30, r24
    42c0:	20 83       	st	Z, r18
}
    42c2:	00 00       	nop
    42c4:	df 91       	pop	r29
    42c6:	cf 91       	pop	r28
    42c8:	ff 91       	pop	r31
    42ca:	ef 91       	pop	r30
    42cc:	9f 91       	pop	r25
    42ce:	8f 91       	pop	r24
    42d0:	3f 91       	pop	r19
    42d2:	2f 91       	pop	r18
    42d4:	0f 90       	pop	r0
    42d6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    42da:	0f 90       	pop	r0
    42dc:	1f 90       	pop	r1
    42de:	18 95       	reti

000042e0 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
    42e0:	1f 92       	push	r1
    42e2:	0f 92       	push	r0
    42e4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    42e8:	0f 92       	push	r0
    42ea:	11 24       	eor	r1, r1
    42ec:	2f 93       	push	r18
    42ee:	3f 93       	push	r19
    42f0:	4f 93       	push	r20
    42f2:	5f 93       	push	r21
    42f4:	6f 93       	push	r22
    42f6:	7f 93       	push	r23
    42f8:	8f 93       	push	r24
    42fa:	9f 93       	push	r25
    42fc:	af 93       	push	r26
    42fe:	bf 93       	push	r27
    4300:	ef 93       	push	r30
    4302:	ff 93       	push	r31
    4304:	cf 93       	push	r28
    4306:	df 93       	push	r29
    4308:	cd b7       	in	r28, 0x3d	; 61
    430a:	de b7       	in	r29, 0x3e	; 62
	if(isBitSet(ctrlPwm.allFlags, 0)){
    430c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <ctrlPwm>
    4310:	88 2f       	mov	r24, r24
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	81 70       	andi	r24, 0x01	; 1
    4316:	99 27       	eor	r25, r25
    4318:	89 2b       	or	r24, r25
    431a:	81 f1       	breq	.+96     	; 0x437c <__vector_12+0x9c>
		if(isBitClr(PWM_REG_PIN, PWM0_BIT)){
    431c:	89 e2       	ldi	r24, 0x29	; 41
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	fc 01       	movw	r30, r24
    4322:	80 81       	ld	r24, Z
    4324:	82 95       	swap	r24
    4326:	86 95       	lsr	r24
    4328:	87 70       	andi	r24, 0x07	; 7
    432a:	88 2f       	mov	r24, r24
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	81 70       	andi	r24, 0x01	; 1
    4330:	99 27       	eor	r25, r25
    4332:	89 2b       	or	r24, r25
    4334:	81 f4       	brne	.+32     	; 0x4356 <__vector_12+0x76>
			setBit(PWM_REG_PORT, PWM0_BIT);
    4336:	8b e2       	ldi	r24, 0x2B	; 43
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	2b e2       	ldi	r18, 0x2B	; 43
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	f9 01       	movw	r30, r18
    4340:	20 81       	ld	r18, Z
    4342:	20 62       	ori	r18, 0x20	; 32
    4344:	fc 01       	movw	r30, r24
    4346:	20 83       	st	Z, r18
			timer1SetCompareBValue(pwmRegValue[0]);
    4348:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <pwmRegValue>
    434c:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <pwmRegValue+0x1>
    4350:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <timer1SetCompareBValue>
			clrBit(PWM_REG_PORT, PWM1_BIT);
			ctrlPwm.allFlags = 1;
			timer1SetCompareBValue(2500);
		}
	}
}
    4354:	4a c0       	rjmp	.+148    	; 0x43ea <__vector_12+0x10a>
			clrBit(PWM_REG_PORT, PWM0_BIT);
    4356:	8b e2       	ldi	r24, 0x2B	; 43
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	2b e2       	ldi	r18, 0x2B	; 43
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	f9 01       	movw	r30, r18
    4360:	20 81       	ld	r18, Z
    4362:	2f 7d       	andi	r18, 0xDF	; 223
    4364:	fc 01       	movw	r30, r24
    4366:	20 83       	st	Z, r18
			ctrlPwm.allFlags = ctrlPwm.allFlags<<1;
    4368:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <ctrlPwm>
    436c:	88 0f       	add	r24, r24
    436e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ctrlPwm>
			timer1SetCompareBValue(22500);
    4372:	84 ee       	ldi	r24, 0xE4	; 228
    4374:	97 e5       	ldi	r25, 0x57	; 87
    4376:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <timer1SetCompareBValue>
}
    437a:	37 c0       	rjmp	.+110    	; 0x43ea <__vector_12+0x10a>
	else if(isBitSet(ctrlPwm.allFlags, 1)){
    437c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <ctrlPwm>
    4380:	86 95       	lsr	r24
    4382:	88 2f       	mov	r24, r24
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	81 70       	andi	r24, 0x01	; 1
    4388:	99 27       	eor	r25, r25
    438a:	89 2b       	or	r24, r25
    438c:	71 f1       	breq	.+92     	; 0x43ea <__vector_12+0x10a>
		if(isBitClr(PWM_REG_PIN, PWM1_BIT)){
    438e:	89 e2       	ldi	r24, 0x29	; 41
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	fc 01       	movw	r30, r24
    4394:	80 81       	ld	r24, Z
    4396:	82 95       	swap	r24
    4398:	86 95       	lsr	r24
    439a:	86 95       	lsr	r24
    439c:	83 70       	andi	r24, 0x03	; 3
    439e:	88 2f       	mov	r24, r24
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	81 70       	andi	r24, 0x01	; 1
    43a4:	99 27       	eor	r25, r25
    43a6:	89 2b       	or	r24, r25
    43a8:	81 f4       	brne	.+32     	; 0x43ca <__vector_12+0xea>
			setBit(PWM_REG_PORT, PWM1_BIT);
    43aa:	8b e2       	ldi	r24, 0x2B	; 43
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	2b e2       	ldi	r18, 0x2B	; 43
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	f9 01       	movw	r30, r18
    43b4:	20 81       	ld	r18, Z
    43b6:	20 64       	ori	r18, 0x40	; 64
    43b8:	fc 01       	movw	r30, r24
    43ba:	20 83       	st	Z, r18
			timer1SetCompareBValue(pwmRegValue[1]);
    43bc:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <pwmRegValue+0x2>
    43c0:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <pwmRegValue+0x3>
    43c4:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <timer1SetCompareBValue>
}
    43c8:	10 c0       	rjmp	.+32     	; 0x43ea <__vector_12+0x10a>
			clrBit(PWM_REG_PORT, PWM1_BIT);
    43ca:	8b e2       	ldi	r24, 0x2B	; 43
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	2b e2       	ldi	r18, 0x2B	; 43
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	f9 01       	movw	r30, r18
    43d4:	20 81       	ld	r18, Z
    43d6:	2f 7b       	andi	r18, 0xBF	; 191
    43d8:	fc 01       	movw	r30, r24
    43da:	20 83       	st	Z, r18
			ctrlPwm.allFlags = 1;
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ctrlPwm>
			timer1SetCompareBValue(2500);
    43e2:	84 ec       	ldi	r24, 0xC4	; 196
    43e4:	99 e0       	ldi	r25, 0x09	; 9
    43e6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <timer1SetCompareBValue>
}
    43ea:	00 00       	nop
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	ff 91       	pop	r31
    43f2:	ef 91       	pop	r30
    43f4:	bf 91       	pop	r27
    43f6:	af 91       	pop	r26
    43f8:	9f 91       	pop	r25
    43fa:	8f 91       	pop	r24
    43fc:	7f 91       	pop	r23
    43fe:	6f 91       	pop	r22
    4400:	5f 91       	pop	r21
    4402:	4f 91       	pop	r20
    4404:	3f 91       	pop	r19
    4406:	2f 91       	pop	r18
    4408:	0f 90       	pop	r0
    440a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    440e:	0f 90       	pop	r0
    4410:	1f 90       	pop	r1
    4412:	18 95       	reti

00004414 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
    4414:	1f 92       	push	r1
    4416:	0f 92       	push	r0
    4418:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    441c:	0f 92       	push	r0
    441e:	11 24       	eor	r1, r1
    4420:	8f 93       	push	r24
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	cd b7       	in	r28, 0x3d	; 61
    4428:	de b7       	in	r29, 0x3e	; 62
	receiveWd = 1;
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <receiveWd>
}
    4430:	00 00       	nop
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	8f 91       	pop	r24
    4438:	0f 90       	pop	r0
    443a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    443e:	0f 90       	pop	r0
    4440:	1f 90       	pop	r1
    4442:	18 95       	reti

00004444 <receivePackageData>:

void receivePackageData(uint8 *index, uint8 *data, uint8 *size, uint8 *ready)
{
    4444:	cf 93       	push	r28
    4446:	df 93       	push	r29
    4448:	cd b7       	in	r28, 0x3d	; 61
    444a:	de b7       	in	r29, 0x3e	; 62
    444c:	2a 97       	sbiw	r28, 0x0a	; 10
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	f8 94       	cli
    4452:	de bf       	out	0x3e, r29	; 62
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	cd bf       	out	0x3d, r28	; 61
    4458:	9c 83       	std	Y+4, r25	; 0x04
    445a:	8b 83       	std	Y+3, r24	; 0x03
    445c:	7e 83       	std	Y+6, r23	; 0x06
    445e:	6d 83       	std	Y+5, r22	; 0x05
    4460:	58 87       	std	Y+8, r21	; 0x08
    4462:	4f 83       	std	Y+7, r20	; 0x07
    4464:	3a 87       	std	Y+10, r19	; 0x0a
    4466:	29 87       	std	Y+9, r18	; 0x09
	uint8 aux8;
	uint8 i;

	while(!usartIsReceiverBufferEmpty()){
    4468:	af c0       	rjmp	.+350    	; 0x45c8 <receivePackageData+0x184>
		aux8 = usartGetDataFromReceiverBuffer();
    446a:	0e 94 85 1c 	call	0x390a	; 0x390a <usartGetDataFromReceiverBuffer>
    446e:	89 83       	std	Y+1, r24	; 0x01
timer2Config(TIMER_A_MODE_NO_CHANGE, TIMER_B_PRESCALER_1024);
    4470:	67 e0       	ldi	r22, 0x07	; 7
    4472:	8f ef       	ldi	r24, 0xFF	; 255
    4474:	0e 94 48 15 	call	0x2a90	; 0x2a90 <timer2Config>
		switch(*index){
    4478:	8b 81       	ldd	r24, Y+3	; 0x03
    447a:	9c 81       	ldd	r25, Y+4	; 0x04
    447c:	fc 01       	movw	r30, r24
    447e:	80 81       	ld	r24, Z
    4480:	88 2f       	mov	r24, r24
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	00 97       	sbiw	r24, 0x00	; 0
    4486:	19 f0       	breq	.+6      	; 0x448e <receivePackageData+0x4a>
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	e1 f0       	breq	.+56     	; 0x44c4 <receivePackageData+0x80>
    448c:	2e c0       	rjmp	.+92     	; 0x44ea <receivePackageData+0xa6>
			case 0:		// Start delimiter
				if(aux8 == 0x7E){
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	8e 37       	cpi	r24, 0x7E	; 126
    4492:	09 f0       	breq	.+2      	; 0x4496 <receivePackageData+0x52>
    4494:	99 c0       	rjmp	.+306    	; 0x45c8 <receivePackageData+0x184>
					(*index)++;
    4496:	8b 81       	ldd	r24, Y+3	; 0x03
    4498:	9c 81       	ldd	r25, Y+4	; 0x04
    449a:	fc 01       	movw	r30, r24
    449c:	80 81       	ld	r24, Z
    449e:	21 e0       	ldi	r18, 0x01	; 1
    44a0:	28 0f       	add	r18, r24
    44a2:	8b 81       	ldd	r24, Y+3	; 0x03
    44a4:	9c 81       	ldd	r25, Y+4	; 0x04
    44a6:	fc 01       	movw	r30, r24
    44a8:	20 83       	st	Z, r18
timer2SetCounterValue(0);
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <timer2SetCounterValue>
setBit(PORTB, PB0);
    44b0:	85 e2       	ldi	r24, 0x25	; 37
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	25 e2       	ldi	r18, 0x25	; 37
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	f9 01       	movw	r30, r18
    44ba:	20 81       	ld	r18, Z
    44bc:	21 60       	ori	r18, 0x01	; 1
    44be:	fc 01       	movw	r30, r24
    44c0:	20 83       	st	Z, r18
				}
				break;
    44c2:	82 c0       	rjmp	.+260    	; 0x45c8 <receivePackageData+0x184>
			case 1:		// Size
timer2SetCounterValue(0);
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <timer2SetCounterValue>
				*size = aux8;
    44ca:	8f 81       	ldd	r24, Y+7	; 0x07
    44cc:	98 85       	ldd	r25, Y+8	; 0x08
    44ce:	29 81       	ldd	r18, Y+1	; 0x01
    44d0:	fc 01       	movw	r30, r24
    44d2:	20 83       	st	Z, r18
				(*index)++;
    44d4:	8b 81       	ldd	r24, Y+3	; 0x03
    44d6:	9c 81       	ldd	r25, Y+4	; 0x04
    44d8:	fc 01       	movw	r30, r24
    44da:	80 81       	ld	r24, Z
    44dc:	21 e0       	ldi	r18, 0x01	; 1
    44de:	28 0f       	add	r18, r24
    44e0:	8b 81       	ldd	r24, Y+3	; 0x03
    44e2:	9c 81       	ldd	r25, Y+4	; 0x04
    44e4:	fc 01       	movw	r30, r24
    44e6:	20 83       	st	Z, r18
				break;
    44e8:	6f c0       	rjmp	.+222    	; 0x45c8 <receivePackageData+0x184>
			default:
timer2SetCounterValue(0);
    44ea:	80 e0       	ldi	r24, 0x00	; 0
    44ec:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <timer2SetCounterValue>
				if(*index < ((*size) + 2)){
    44f0:	8b 81       	ldd	r24, Y+3	; 0x03
    44f2:	9c 81       	ldd	r25, Y+4	; 0x04
    44f4:	fc 01       	movw	r30, r24
    44f6:	80 81       	ld	r24, Z
    44f8:	28 2f       	mov	r18, r24
    44fa:	30 e0       	ldi	r19, 0x00	; 0
    44fc:	8f 81       	ldd	r24, Y+7	; 0x07
    44fe:	98 85       	ldd	r25, Y+8	; 0x08
    4500:	fc 01       	movw	r30, r24
    4502:	80 81       	ld	r24, Z
    4504:	88 2f       	mov	r24, r24
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	02 96       	adiw	r24, 0x02	; 2
    450a:	28 17       	cp	r18, r24
    450c:	39 07       	cpc	r19, r25
    450e:	cc f4       	brge	.+50     	; 0x4542 <receivePackageData+0xfe>
					data[(*index) - 2] = aux8;
    4510:	8b 81       	ldd	r24, Y+3	; 0x03
    4512:	9c 81       	ldd	r25, Y+4	; 0x04
    4514:	fc 01       	movw	r30, r24
    4516:	80 81       	ld	r24, Z
    4518:	88 2f       	mov	r24, r24
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	02 97       	sbiw	r24, 0x02	; 2
    451e:	2d 81       	ldd	r18, Y+5	; 0x05
    4520:	3e 81       	ldd	r19, Y+6	; 0x06
    4522:	82 0f       	add	r24, r18
    4524:	93 1f       	adc	r25, r19
    4526:	29 81       	ldd	r18, Y+1	; 0x01
    4528:	fc 01       	movw	r30, r24
    452a:	20 83       	st	Z, r18
					(*index)++;
    452c:	8b 81       	ldd	r24, Y+3	; 0x03
    452e:	9c 81       	ldd	r25, Y+4	; 0x04
    4530:	fc 01       	movw	r30, r24
    4532:	80 81       	ld	r24, Z
    4534:	21 e0       	ldi	r18, 0x01	; 1
    4536:	28 0f       	add	r18, r24
    4538:	8b 81       	ldd	r24, Y+3	; 0x03
    453a:	9c 81       	ldd	r25, Y+4	; 0x04
    453c:	fc 01       	movw	r30, r24
    453e:	20 83       	st	Z, r18
    4540:	42 c0       	rjmp	.+132    	; 0x45c6 <receivePackageData+0x182>
				}else{
					for(i=0; i<(*index-2); i++){
    4542:	1a 82       	std	Y+2, r1	; 0x02
    4544:	0f c0       	rjmp	.+30     	; 0x4564 <receivePackageData+0x120>
						aux8 += data[i];
    4546:	8a 81       	ldd	r24, Y+2	; 0x02
    4548:	88 2f       	mov	r24, r24
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	2d 81       	ldd	r18, Y+5	; 0x05
    454e:	3e 81       	ldd	r19, Y+6	; 0x06
    4550:	82 0f       	add	r24, r18
    4552:	93 1f       	adc	r25, r19
    4554:	fc 01       	movw	r30, r24
    4556:	80 81       	ld	r24, Z
    4558:	99 81       	ldd	r25, Y+1	; 0x01
    455a:	89 0f       	add	r24, r25
    455c:	89 83       	std	Y+1, r24	; 0x01
					for(i=0; i<(*index-2); i++){
    455e:	8a 81       	ldd	r24, Y+2	; 0x02
    4560:	8f 5f       	subi	r24, 0xFF	; 255
    4562:	8a 83       	std	Y+2, r24	; 0x02
    4564:	8a 81       	ldd	r24, Y+2	; 0x02
    4566:	28 2f       	mov	r18, r24
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	8b 81       	ldd	r24, Y+3	; 0x03
    456c:	9c 81       	ldd	r25, Y+4	; 0x04
    456e:	fc 01       	movw	r30, r24
    4570:	80 81       	ld	r24, Z
    4572:	88 2f       	mov	r24, r24
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	02 97       	sbiw	r24, 0x02	; 2
    4578:	28 17       	cp	r18, r24
    457a:	39 07       	cpc	r19, r25
    457c:	24 f3       	brlt	.-56     	; 0x4546 <receivePackageData+0x102>
					}
					if(aux8 != 0xFF){
    457e:	89 81       	ldd	r24, Y+1	; 0x01
    4580:	8f 3f       	cpi	r24, 0xFF	; 255
    4582:	89 f0       	breq	.+34     	; 0x45a6 <receivePackageData+0x162>
printf("-- Erro no CheckSum --\n");
    4584:	88 e2       	ldi	r24, 0x28	; 40
    4586:	91 e0       	ldi	r25, 0x01	; 1
    4588:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <puts>
						*ready = 0;
    458c:	89 85       	ldd	r24, Y+9	; 0x09
    458e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4590:	fc 01       	movw	r30, r24
    4592:	10 82       	st	Z, r1
						*index = 0;
    4594:	8b 81       	ldd	r24, Y+3	; 0x03
    4596:	9c 81       	ldd	r25, Y+4	; 0x04
    4598:	fc 01       	movw	r30, r24
    459a:	10 82       	st	Z, r1
						*size = 0;
    459c:	8f 81       	ldd	r24, Y+7	; 0x07
    459e:	98 85       	ldd	r25, Y+8	; 0x08
    45a0:	fc 01       	movw	r30, r24
    45a2:	10 82       	st	Z, r1
    45a4:	10 c0       	rjmp	.+32     	; 0x45c6 <receivePackageData+0x182>
					}
					else{
						*ready = 1;
    45a6:	89 85       	ldd	r24, Y+9	; 0x09
    45a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45aa:	21 e0       	ldi	r18, 0x01	; 1
    45ac:	fc 01       	movw	r30, r24
    45ae:	20 83       	st	Z, r18
						*index = 0;
    45b0:	8b 81       	ldd	r24, Y+3	; 0x03
    45b2:	9c 81       	ldd	r25, Y+4	; 0x04
    45b4:	fc 01       	movw	r30, r24
    45b6:	10 82       	st	Z, r1
timer2Config(TIMER_A_MODE_NO_CHANGE, TIMER_B_CLOCK_DISABLE);
    45b8:	60 e0       	ldi	r22, 0x00	; 0
    45ba:	8f ef       	ldi	r24, 0xFF	; 255
    45bc:	0e 94 48 15 	call	0x2a90	; 0x2a90 <timer2Config>
timer2SetCounterValue(0);
    45c0:	80 e0       	ldi	r24, 0x00	; 0
    45c2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <timer2SetCounterValue>
					}
				}
				break;
    45c6:	00 00       	nop
	while(!usartIsReceiverBufferEmpty()){
    45c8:	0e 94 b6 1c 	call	0x396c	; 0x396c <usartIsReceiverBufferEmpty>
    45cc:	88 23       	and	r24, r24
    45ce:	09 f4       	brne	.+2      	; 0x45d2 <receivePackageData+0x18e>
    45d0:	4c cf       	rjmp	.-360    	; 0x446a <receivePackageData+0x26>
		} // end switch(packageIndex)
	} // end while(!usartIsReceiverBufferEmpty())
}
    45d2:	00 00       	nop
    45d4:	2a 96       	adiw	r28, 0x0a	; 10
    45d6:	0f b6       	in	r0, 0x3f	; 63
    45d8:	f8 94       	cli
    45da:	de bf       	out	0x3e, r29	; 62
    45dc:	0f be       	out	0x3f, r0	; 63
    45de:	cd bf       	out	0x3d, r28	; 61
    45e0:	df 91       	pop	r29
    45e2:	cf 91       	pop	r28
    45e4:	08 95       	ret

000045e6 <buildTransmitPackageData>:
// id - O ID do pacote recebido acrescido de 0x7F
// data - Os dados do pacote (eco)
// dataSize - Tamanho dos dados a serem enviados
// retorno - Tamanho do pacote montado
uint8 buildTransmitPackageData(uint8 *packageData, uint8 *data, uint8 dataSize)
{
    45e6:	cf 93       	push	r28
    45e8:	df 93       	push	r29
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
    45ee:	28 97       	sbiw	r28, 0x08	; 8
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	9d 83       	std	Y+5, r25	; 0x05
    45fc:	8c 83       	std	Y+4, r24	; 0x04
    45fe:	7f 83       	std	Y+7, r23	; 0x07
    4600:	6e 83       	std	Y+6, r22	; 0x06
    4602:	48 87       	std	Y+8, r20	; 0x08
	uint8 size=2; // 0 é 0x7E e 1 é size
    4604:	82 e0       	ldi	r24, 0x02	; 2
    4606:	89 83       	std	Y+1, r24	; 0x01
	uint8 i, checkSum;

	packageData[0] = 0x7E;
    4608:	8c 81       	ldd	r24, Y+4	; 0x04
    460a:	9d 81       	ldd	r25, Y+5	; 0x05
    460c:	2e e7       	ldi	r18, 0x7E	; 126
    460e:	fc 01       	movw	r30, r24
    4610:	20 83       	st	Z, r18
	packageData[size++] = data[0] + 0x7F;
    4612:	89 81       	ldd	r24, Y+1	; 0x01
    4614:	91 e0       	ldi	r25, 0x01	; 1
    4616:	98 0f       	add	r25, r24
    4618:	99 83       	std	Y+1, r25	; 0x01
    461a:	88 2f       	mov	r24, r24
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	2c 81       	ldd	r18, Y+4	; 0x04
    4620:	3d 81       	ldd	r19, Y+5	; 0x05
    4622:	82 0f       	add	r24, r18
    4624:	93 1f       	adc	r25, r19
    4626:	2e 81       	ldd	r18, Y+6	; 0x06
    4628:	3f 81       	ldd	r19, Y+7	; 0x07
    462a:	f9 01       	movw	r30, r18
    462c:	20 81       	ld	r18, Z
    462e:	21 58       	subi	r18, 0x81	; 129
    4630:	fc 01       	movw	r30, r24
    4632:	20 83       	st	Z, r18
	for(i=1; i<dataSize; i++){
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	8a 83       	std	Y+2, r24	; 0x02
    4638:	18 c0       	rjmp	.+48     	; 0x466a <buildTransmitPackageData+0x84>
		packageData[size++] = data[i];
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	91 e0       	ldi	r25, 0x01	; 1
    463e:	98 0f       	add	r25, r24
    4640:	99 83       	std	Y+1, r25	; 0x01
    4642:	88 2f       	mov	r24, r24
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	2c 81       	ldd	r18, Y+4	; 0x04
    4648:	3d 81       	ldd	r19, Y+5	; 0x05
    464a:	82 0f       	add	r24, r18
    464c:	93 1f       	adc	r25, r19
    464e:	2a 81       	ldd	r18, Y+2	; 0x02
    4650:	22 2f       	mov	r18, r18
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	4e 81       	ldd	r20, Y+6	; 0x06
    4656:	5f 81       	ldd	r21, Y+7	; 0x07
    4658:	24 0f       	add	r18, r20
    465a:	35 1f       	adc	r19, r21
    465c:	f9 01       	movw	r30, r18
    465e:	20 81       	ld	r18, Z
    4660:	fc 01       	movw	r30, r24
    4662:	20 83       	st	Z, r18
	for(i=1; i<dataSize; i++){
    4664:	8a 81       	ldd	r24, Y+2	; 0x02
    4666:	8f 5f       	subi	r24, 0xFF	; 255
    4668:	8a 83       	std	Y+2, r24	; 0x02
    466a:	9a 81       	ldd	r25, Y+2	; 0x02
    466c:	88 85       	ldd	r24, Y+8	; 0x08
    466e:	98 17       	cp	r25, r24
    4670:	20 f3       	brcs	.-56     	; 0x463a <buildTransmitPackageData+0x54>
	}
	checkSum = 0xFF;
    4672:	8f ef       	ldi	r24, 0xFF	; 255
    4674:	8b 83       	std	Y+3, r24	; 0x03
	for(i=2; i<size; i++){
    4676:	82 e0       	ldi	r24, 0x02	; 2
    4678:	8a 83       	std	Y+2, r24	; 0x02
    467a:	11 c0       	rjmp	.+34     	; 0x469e <buildTransmitPackageData+0xb8>
		checkSum -= packageData[i];
    467c:	8a 81       	ldd	r24, Y+2	; 0x02
    467e:	88 2f       	mov	r24, r24
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	2c 81       	ldd	r18, Y+4	; 0x04
    4684:	3d 81       	ldd	r19, Y+5	; 0x05
    4686:	82 0f       	add	r24, r18
    4688:	93 1f       	adc	r25, r19
    468a:	fc 01       	movw	r30, r24
    468c:	80 81       	ld	r24, Z
    468e:	9b 81       	ldd	r25, Y+3	; 0x03
    4690:	f9 2f       	mov	r31, r25
    4692:	f8 1b       	sub	r31, r24
    4694:	8f 2f       	mov	r24, r31
    4696:	8b 83       	std	Y+3, r24	; 0x03
	for(i=2; i<size; i++){
    4698:	8a 81       	ldd	r24, Y+2	; 0x02
    469a:	8f 5f       	subi	r24, 0xFF	; 255
    469c:	8a 83       	std	Y+2, r24	; 0x02
    469e:	9a 81       	ldd	r25, Y+2	; 0x02
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	98 17       	cp	r25, r24
    46a4:	58 f3       	brcs	.-42     	; 0x467c <buildTransmitPackageData+0x96>
	}
	packageData[size++] = checkSum-0x7E;
    46a6:	89 81       	ldd	r24, Y+1	; 0x01
    46a8:	91 e0       	ldi	r25, 0x01	; 1
    46aa:	98 0f       	add	r25, r24
    46ac:	99 83       	std	Y+1, r25	; 0x01
    46ae:	88 2f       	mov	r24, r24
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	2c 81       	ldd	r18, Y+4	; 0x04
    46b4:	3d 81       	ldd	r19, Y+5	; 0x05
    46b6:	82 0f       	add	r24, r18
    46b8:	93 1f       	adc	r25, r19
    46ba:	2b 81       	ldd	r18, Y+3	; 0x03
    46bc:	2e 57       	subi	r18, 0x7E	; 126
    46be:	fc 01       	movw	r30, r24
    46c0:	20 83       	st	Z, r18
	packageData[1] = size-3;	// Lenght
    46c2:	8c 81       	ldd	r24, Y+4	; 0x04
    46c4:	9d 81       	ldd	r25, Y+5	; 0x05
    46c6:	01 96       	adiw	r24, 0x01	; 1
    46c8:	29 81       	ldd	r18, Y+1	; 0x01
    46ca:	23 50       	subi	r18, 0x03	; 3
    46cc:	fc 01       	movw	r30, r24
    46ce:	20 83       	st	Z, r18

	return size;
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    46d2:	28 96       	adiw	r28, 0x08	; 8
    46d4:	0f b6       	in	r0, 0x3f	; 63
    46d6:	f8 94       	cli
    46d8:	de bf       	out	0x3e, r29	; 62
    46da:	0f be       	out	0x3f, r0	; 63
    46dc:	cd bf       	out	0x3d, r28	; 61
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	08 95       	ret

000046e4 <__udivmodsi4>:
    46e4:	a1 e2       	ldi	r26, 0x21	; 33
    46e6:	1a 2e       	mov	r1, r26
    46e8:	aa 1b       	sub	r26, r26
    46ea:	bb 1b       	sub	r27, r27
    46ec:	fd 01       	movw	r30, r26
    46ee:	0d c0       	rjmp	.+26     	; 0x470a <__udivmodsi4_ep>

000046f0 <__udivmodsi4_loop>:
    46f0:	aa 1f       	adc	r26, r26
    46f2:	bb 1f       	adc	r27, r27
    46f4:	ee 1f       	adc	r30, r30
    46f6:	ff 1f       	adc	r31, r31
    46f8:	a2 17       	cp	r26, r18
    46fa:	b3 07       	cpc	r27, r19
    46fc:	e4 07       	cpc	r30, r20
    46fe:	f5 07       	cpc	r31, r21
    4700:	20 f0       	brcs	.+8      	; 0x470a <__udivmodsi4_ep>
    4702:	a2 1b       	sub	r26, r18
    4704:	b3 0b       	sbc	r27, r19
    4706:	e4 0b       	sbc	r30, r20
    4708:	f5 0b       	sbc	r31, r21

0000470a <__udivmodsi4_ep>:
    470a:	66 1f       	adc	r22, r22
    470c:	77 1f       	adc	r23, r23
    470e:	88 1f       	adc	r24, r24
    4710:	99 1f       	adc	r25, r25
    4712:	1a 94       	dec	r1
    4714:	69 f7       	brne	.-38     	; 0x46f0 <__udivmodsi4_loop>
    4716:	60 95       	com	r22
    4718:	70 95       	com	r23
    471a:	80 95       	com	r24
    471c:	90 95       	com	r25
    471e:	9b 01       	movw	r18, r22
    4720:	ac 01       	movw	r20, r24
    4722:	bd 01       	movw	r22, r26
    4724:	cf 01       	movw	r24, r30
    4726:	08 95       	ret

00004728 <__tablejump2__>:
    4728:	ee 0f       	add	r30, r30
    472a:	ff 1f       	adc	r31, r31
    472c:	05 90       	lpm	r0, Z+
    472e:	f4 91       	lpm	r31, Z
    4730:	e0 2d       	mov	r30, r0
    4732:	09 94       	ijmp

00004734 <__umulhisi3>:
    4734:	a2 9f       	mul	r26, r18
    4736:	b0 01       	movw	r22, r0
    4738:	b3 9f       	mul	r27, r19
    473a:	c0 01       	movw	r24, r0
    473c:	a3 9f       	mul	r26, r19
    473e:	70 0d       	add	r23, r0
    4740:	81 1d       	adc	r24, r1
    4742:	11 24       	eor	r1, r1
    4744:	91 1d       	adc	r25, r1
    4746:	b2 9f       	mul	r27, r18
    4748:	70 0d       	add	r23, r0
    474a:	81 1d       	adc	r24, r1
    474c:	11 24       	eor	r1, r1
    474e:	91 1d       	adc	r25, r1
    4750:	08 95       	ret

00004752 <__ashrdi3>:
    4752:	97 fb       	bst	r25, 7
    4754:	10 f8       	bld	r1, 0

00004756 <__lshrdi3>:
    4756:	16 94       	lsr	r1
    4758:	00 08       	sbc	r0, r0
    475a:	0f 93       	push	r16
    475c:	08 30       	cpi	r16, 0x08	; 8
    475e:	98 f0       	brcs	.+38     	; 0x4786 <__lshrdi3+0x30>
    4760:	08 50       	subi	r16, 0x08	; 8
    4762:	23 2f       	mov	r18, r19
    4764:	34 2f       	mov	r19, r20
    4766:	45 2f       	mov	r20, r21
    4768:	56 2f       	mov	r21, r22
    476a:	67 2f       	mov	r22, r23
    476c:	78 2f       	mov	r23, r24
    476e:	89 2f       	mov	r24, r25
    4770:	90 2d       	mov	r25, r0
    4772:	f4 cf       	rjmp	.-24     	; 0x475c <__lshrdi3+0x6>
    4774:	05 94       	asr	r0
    4776:	97 95       	ror	r25
    4778:	87 95       	ror	r24
    477a:	77 95       	ror	r23
    477c:	67 95       	ror	r22
    477e:	57 95       	ror	r21
    4780:	47 95       	ror	r20
    4782:	37 95       	ror	r19
    4784:	27 95       	ror	r18
    4786:	0a 95       	dec	r16
    4788:	aa f7       	brpl	.-22     	; 0x4774 <__lshrdi3+0x1e>
    478a:	0f 91       	pop	r16
    478c:	08 95       	ret

0000478e <memset>:
    478e:	dc 01       	movw	r26, r24
    4790:	01 c0       	rjmp	.+2      	; 0x4794 <memset+0x6>
    4792:	6d 93       	st	X+, r22
    4794:	41 50       	subi	r20, 0x01	; 1
    4796:	50 40       	sbci	r21, 0x00	; 0
    4798:	e0 f7       	brcc	.-8      	; 0x4792 <memset+0x4>
    479a:	08 95       	ret

0000479c <printf>:
    479c:	a0 e0       	ldi	r26, 0x00	; 0
    479e:	b0 e0       	ldi	r27, 0x00	; 0
    47a0:	e4 ed       	ldi	r30, 0xD4	; 212
    47a2:	f3 e2       	ldi	r31, 0x23	; 35
    47a4:	0c 94 9b 26 	jmp	0x4d36	; 0x4d36 <__prologue_saves__+0x20>
    47a8:	ae 01       	movw	r20, r28
    47aa:	4b 5f       	subi	r20, 0xFB	; 251
    47ac:	5f 4f       	sbci	r21, 0xFF	; 255
    47ae:	fa 01       	movw	r30, r20
    47b0:	61 91       	ld	r22, Z+
    47b2:	71 91       	ld	r23, Z+
    47b4:	af 01       	movw	r20, r30
    47b6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__iob+0x2>
    47ba:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__iob+0x3>
    47be:	0e 94 14 24 	call	0x4828	; 0x4828 <vfprintf>
    47c2:	e2 e0       	ldi	r30, 0x02	; 2
    47c4:	0c 94 b7 26 	jmp	0x4d6e	; 0x4d6e <__epilogue_restores__+0x20>

000047c8 <puts>:
    47c8:	0f 93       	push	r16
    47ca:	1f 93       	push	r17
    47cc:	cf 93       	push	r28
    47ce:	df 93       	push	r29
    47d0:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <__iob+0x2>
    47d4:	f0 91 85 01 	lds	r31, 0x0185	; 0x800185 <__iob+0x3>
    47d8:	23 81       	ldd	r18, Z+3	; 0x03
    47da:	21 ff       	sbrs	r18, 1
    47dc:	1b c0       	rjmp	.+54     	; 0x4814 <puts+0x4c>
    47de:	8c 01       	movw	r16, r24
    47e0:	d0 e0       	ldi	r29, 0x00	; 0
    47e2:	c0 e0       	ldi	r28, 0x00	; 0
    47e4:	f8 01       	movw	r30, r16
    47e6:	81 91       	ld	r24, Z+
    47e8:	8f 01       	movw	r16, r30
    47ea:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <__iob+0x2>
    47ee:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <__iob+0x3>
    47f2:	db 01       	movw	r26, r22
    47f4:	18 96       	adiw	r26, 0x08	; 8
    47f6:	ed 91       	ld	r30, X+
    47f8:	fc 91       	ld	r31, X
    47fa:	19 97       	sbiw	r26, 0x09	; 9
    47fc:	88 23       	and	r24, r24
    47fe:	31 f0       	breq	.+12     	; 0x480c <puts+0x44>
    4800:	09 95       	icall
    4802:	89 2b       	or	r24, r25
    4804:	79 f3       	breq	.-34     	; 0x47e4 <puts+0x1c>
    4806:	df ef       	ldi	r29, 0xFF	; 255
    4808:	cf ef       	ldi	r28, 0xFF	; 255
    480a:	ec cf       	rjmp	.-40     	; 0x47e4 <puts+0x1c>
    480c:	8a e0       	ldi	r24, 0x0A	; 10
    480e:	09 95       	icall
    4810:	89 2b       	or	r24, r25
    4812:	19 f0       	breq	.+6      	; 0x481a <puts+0x52>
    4814:	8f ef       	ldi	r24, 0xFF	; 255
    4816:	9f ef       	ldi	r25, 0xFF	; 255
    4818:	02 c0       	rjmp	.+4      	; 0x481e <puts+0x56>
    481a:	8d 2f       	mov	r24, r29
    481c:	9c 2f       	mov	r25, r28
    481e:	df 91       	pop	r29
    4820:	cf 91       	pop	r28
    4822:	1f 91       	pop	r17
    4824:	0f 91       	pop	r16
    4826:	08 95       	ret

00004828 <vfprintf>:
    4828:	ac e0       	ldi	r26, 0x0C	; 12
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	ea e1       	ldi	r30, 0x1A	; 26
    482e:	f4 e2       	ldi	r31, 0x24	; 36
    4830:	0c 94 8b 26 	jmp	0x4d16	; 0x4d16 <__prologue_saves__>
    4834:	6c 01       	movw	r12, r24
    4836:	7b 01       	movw	r14, r22
    4838:	8a 01       	movw	r16, r20
    483a:	fc 01       	movw	r30, r24
    483c:	17 82       	std	Z+7, r1	; 0x07
    483e:	16 82       	std	Z+6, r1	; 0x06
    4840:	83 81       	ldd	r24, Z+3	; 0x03
    4842:	81 ff       	sbrs	r24, 1
    4844:	be c1       	rjmp	.+892    	; 0x4bc2 <vfprintf+0x39a>
    4846:	ce 01       	movw	r24, r28
    4848:	01 96       	adiw	r24, 0x01	; 1
    484a:	4c 01       	movw	r8, r24
    484c:	f6 01       	movw	r30, r12
    484e:	93 81       	ldd	r25, Z+3	; 0x03
    4850:	f7 01       	movw	r30, r14
    4852:	93 fd       	sbrc	r25, 3
    4854:	85 91       	lpm	r24, Z+
    4856:	93 ff       	sbrs	r25, 3
    4858:	81 91       	ld	r24, Z+
    485a:	7f 01       	movw	r14, r30
    485c:	88 23       	and	r24, r24
    485e:	09 f4       	brne	.+2      	; 0x4862 <vfprintf+0x3a>
    4860:	ac c1       	rjmp	.+856    	; 0x4bba <vfprintf+0x392>
    4862:	85 32       	cpi	r24, 0x25	; 37
    4864:	39 f4       	brne	.+14     	; 0x4874 <vfprintf+0x4c>
    4866:	93 fd       	sbrc	r25, 3
    4868:	85 91       	lpm	r24, Z+
    486a:	93 ff       	sbrs	r25, 3
    486c:	81 91       	ld	r24, Z+
    486e:	7f 01       	movw	r14, r30
    4870:	85 32       	cpi	r24, 0x25	; 37
    4872:	29 f4       	brne	.+10     	; 0x487e <vfprintf+0x56>
    4874:	b6 01       	movw	r22, r12
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    487c:	e7 cf       	rjmp	.-50     	; 0x484c <vfprintf+0x24>
    487e:	51 2c       	mov	r5, r1
    4880:	31 2c       	mov	r3, r1
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	20 32       	cpi	r18, 0x20	; 32
    4886:	a0 f4       	brcc	.+40     	; 0x48b0 <vfprintf+0x88>
    4888:	8b 32       	cpi	r24, 0x2B	; 43
    488a:	69 f0       	breq	.+26     	; 0x48a6 <vfprintf+0x7e>
    488c:	30 f4       	brcc	.+12     	; 0x489a <vfprintf+0x72>
    488e:	80 32       	cpi	r24, 0x20	; 32
    4890:	59 f0       	breq	.+22     	; 0x48a8 <vfprintf+0x80>
    4892:	83 32       	cpi	r24, 0x23	; 35
    4894:	69 f4       	brne	.+26     	; 0x48b0 <vfprintf+0x88>
    4896:	20 61       	ori	r18, 0x10	; 16
    4898:	2c c0       	rjmp	.+88     	; 0x48f2 <vfprintf+0xca>
    489a:	8d 32       	cpi	r24, 0x2D	; 45
    489c:	39 f0       	breq	.+14     	; 0x48ac <vfprintf+0x84>
    489e:	80 33       	cpi	r24, 0x30	; 48
    48a0:	39 f4       	brne	.+14     	; 0x48b0 <vfprintf+0x88>
    48a2:	21 60       	ori	r18, 0x01	; 1
    48a4:	26 c0       	rjmp	.+76     	; 0x48f2 <vfprintf+0xca>
    48a6:	22 60       	ori	r18, 0x02	; 2
    48a8:	24 60       	ori	r18, 0x04	; 4
    48aa:	23 c0       	rjmp	.+70     	; 0x48f2 <vfprintf+0xca>
    48ac:	28 60       	ori	r18, 0x08	; 8
    48ae:	21 c0       	rjmp	.+66     	; 0x48f2 <vfprintf+0xca>
    48b0:	27 fd       	sbrc	r18, 7
    48b2:	27 c0       	rjmp	.+78     	; 0x4902 <vfprintf+0xda>
    48b4:	30 ed       	ldi	r19, 0xD0	; 208
    48b6:	38 0f       	add	r19, r24
    48b8:	3a 30       	cpi	r19, 0x0A	; 10
    48ba:	78 f4       	brcc	.+30     	; 0x48da <vfprintf+0xb2>
    48bc:	26 ff       	sbrs	r18, 6
    48be:	06 c0       	rjmp	.+12     	; 0x48cc <vfprintf+0xa4>
    48c0:	fa e0       	ldi	r31, 0x0A	; 10
    48c2:	5f 9e       	mul	r5, r31
    48c4:	30 0d       	add	r19, r0
    48c6:	11 24       	eor	r1, r1
    48c8:	53 2e       	mov	r5, r19
    48ca:	13 c0       	rjmp	.+38     	; 0x48f2 <vfprintf+0xca>
    48cc:	8a e0       	ldi	r24, 0x0A	; 10
    48ce:	38 9e       	mul	r3, r24
    48d0:	30 0d       	add	r19, r0
    48d2:	11 24       	eor	r1, r1
    48d4:	33 2e       	mov	r3, r19
    48d6:	20 62       	ori	r18, 0x20	; 32
    48d8:	0c c0       	rjmp	.+24     	; 0x48f2 <vfprintf+0xca>
    48da:	8e 32       	cpi	r24, 0x2E	; 46
    48dc:	21 f4       	brne	.+8      	; 0x48e6 <vfprintf+0xbe>
    48de:	26 fd       	sbrc	r18, 6
    48e0:	6c c1       	rjmp	.+728    	; 0x4bba <vfprintf+0x392>
    48e2:	20 64       	ori	r18, 0x40	; 64
    48e4:	06 c0       	rjmp	.+12     	; 0x48f2 <vfprintf+0xca>
    48e6:	8c 36       	cpi	r24, 0x6C	; 108
    48e8:	11 f4       	brne	.+4      	; 0x48ee <vfprintf+0xc6>
    48ea:	20 68       	ori	r18, 0x80	; 128
    48ec:	02 c0       	rjmp	.+4      	; 0x48f2 <vfprintf+0xca>
    48ee:	88 36       	cpi	r24, 0x68	; 104
    48f0:	41 f4       	brne	.+16     	; 0x4902 <vfprintf+0xda>
    48f2:	f7 01       	movw	r30, r14
    48f4:	93 fd       	sbrc	r25, 3
    48f6:	85 91       	lpm	r24, Z+
    48f8:	93 ff       	sbrs	r25, 3
    48fa:	81 91       	ld	r24, Z+
    48fc:	7f 01       	movw	r14, r30
    48fe:	81 11       	cpse	r24, r1
    4900:	c1 cf       	rjmp	.-126    	; 0x4884 <vfprintf+0x5c>
    4902:	98 2f       	mov	r25, r24
    4904:	9f 7d       	andi	r25, 0xDF	; 223
    4906:	95 54       	subi	r25, 0x45	; 69
    4908:	93 30       	cpi	r25, 0x03	; 3
    490a:	28 f4       	brcc	.+10     	; 0x4916 <vfprintf+0xee>
    490c:	0c 5f       	subi	r16, 0xFC	; 252
    490e:	1f 4f       	sbci	r17, 0xFF	; 255
    4910:	9f e3       	ldi	r25, 0x3F	; 63
    4912:	99 83       	std	Y+1, r25	; 0x01
    4914:	0d c0       	rjmp	.+26     	; 0x4930 <vfprintf+0x108>
    4916:	83 36       	cpi	r24, 0x63	; 99
    4918:	31 f0       	breq	.+12     	; 0x4926 <vfprintf+0xfe>
    491a:	83 37       	cpi	r24, 0x73	; 115
    491c:	71 f0       	breq	.+28     	; 0x493a <vfprintf+0x112>
    491e:	83 35       	cpi	r24, 0x53	; 83
    4920:	09 f0       	breq	.+2      	; 0x4924 <vfprintf+0xfc>
    4922:	5b c0       	rjmp	.+182    	; 0x49da <vfprintf+0x1b2>
    4924:	22 c0       	rjmp	.+68     	; 0x496a <vfprintf+0x142>
    4926:	f8 01       	movw	r30, r16
    4928:	80 81       	ld	r24, Z
    492a:	89 83       	std	Y+1, r24	; 0x01
    492c:	0e 5f       	subi	r16, 0xFE	; 254
    492e:	1f 4f       	sbci	r17, 0xFF	; 255
    4930:	44 24       	eor	r4, r4
    4932:	43 94       	inc	r4
    4934:	51 2c       	mov	r5, r1
    4936:	54 01       	movw	r10, r8
    4938:	15 c0       	rjmp	.+42     	; 0x4964 <vfprintf+0x13c>
    493a:	38 01       	movw	r6, r16
    493c:	f2 e0       	ldi	r31, 0x02	; 2
    493e:	6f 0e       	add	r6, r31
    4940:	71 1c       	adc	r7, r1
    4942:	f8 01       	movw	r30, r16
    4944:	a0 80       	ld	r10, Z
    4946:	b1 80       	ldd	r11, Z+1	; 0x01
    4948:	26 ff       	sbrs	r18, 6
    494a:	03 c0       	rjmp	.+6      	; 0x4952 <vfprintf+0x12a>
    494c:	65 2d       	mov	r22, r5
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	02 c0       	rjmp	.+4      	; 0x4956 <vfprintf+0x12e>
    4952:	6f ef       	ldi	r22, 0xFF	; 255
    4954:	7f ef       	ldi	r23, 0xFF	; 255
    4956:	c5 01       	movw	r24, r10
    4958:	2c 87       	std	Y+12, r18	; 0x0c
    495a:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <strnlen>
    495e:	2c 01       	movw	r4, r24
    4960:	83 01       	movw	r16, r6
    4962:	2c 85       	ldd	r18, Y+12	; 0x0c
    4964:	2f 77       	andi	r18, 0x7F	; 127
    4966:	22 2e       	mov	r2, r18
    4968:	17 c0       	rjmp	.+46     	; 0x4998 <vfprintf+0x170>
    496a:	38 01       	movw	r6, r16
    496c:	f2 e0       	ldi	r31, 0x02	; 2
    496e:	6f 0e       	add	r6, r31
    4970:	71 1c       	adc	r7, r1
    4972:	f8 01       	movw	r30, r16
    4974:	a0 80       	ld	r10, Z
    4976:	b1 80       	ldd	r11, Z+1	; 0x01
    4978:	26 ff       	sbrs	r18, 6
    497a:	03 c0       	rjmp	.+6      	; 0x4982 <vfprintf+0x15a>
    497c:	65 2d       	mov	r22, r5
    497e:	70 e0       	ldi	r23, 0x00	; 0
    4980:	02 c0       	rjmp	.+4      	; 0x4986 <vfprintf+0x15e>
    4982:	6f ef       	ldi	r22, 0xFF	; 255
    4984:	7f ef       	ldi	r23, 0xFF	; 255
    4986:	c5 01       	movw	r24, r10
    4988:	2c 87       	std	Y+12, r18	; 0x0c
    498a:	0e 94 e7 25 	call	0x4bce	; 0x4bce <strnlen_P>
    498e:	2c 01       	movw	r4, r24
    4990:	2c 85       	ldd	r18, Y+12	; 0x0c
    4992:	20 68       	ori	r18, 0x80	; 128
    4994:	22 2e       	mov	r2, r18
    4996:	83 01       	movw	r16, r6
    4998:	23 fc       	sbrc	r2, 3
    499a:	1b c0       	rjmp	.+54     	; 0x49d2 <vfprintf+0x1aa>
    499c:	83 2d       	mov	r24, r3
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	48 16       	cp	r4, r24
    49a2:	59 06       	cpc	r5, r25
    49a4:	b0 f4       	brcc	.+44     	; 0x49d2 <vfprintf+0x1aa>
    49a6:	b6 01       	movw	r22, r12
    49a8:	80 e2       	ldi	r24, 0x20	; 32
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    49b0:	3a 94       	dec	r3
    49b2:	f4 cf       	rjmp	.-24     	; 0x499c <vfprintf+0x174>
    49b4:	f5 01       	movw	r30, r10
    49b6:	27 fc       	sbrc	r2, 7
    49b8:	85 91       	lpm	r24, Z+
    49ba:	27 fe       	sbrs	r2, 7
    49bc:	81 91       	ld	r24, Z+
    49be:	5f 01       	movw	r10, r30
    49c0:	b6 01       	movw	r22, r12
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    49c8:	31 10       	cpse	r3, r1
    49ca:	3a 94       	dec	r3
    49cc:	f1 e0       	ldi	r31, 0x01	; 1
    49ce:	4f 1a       	sub	r4, r31
    49d0:	51 08       	sbc	r5, r1
    49d2:	41 14       	cp	r4, r1
    49d4:	51 04       	cpc	r5, r1
    49d6:	71 f7       	brne	.-36     	; 0x49b4 <vfprintf+0x18c>
    49d8:	e6 c0       	rjmp	.+460    	; 0x4ba6 <vfprintf+0x37e>
    49da:	84 36       	cpi	r24, 0x64	; 100
    49dc:	11 f0       	breq	.+4      	; 0x49e2 <vfprintf+0x1ba>
    49de:	89 36       	cpi	r24, 0x69	; 105
    49e0:	39 f5       	brne	.+78     	; 0x4a30 <vfprintf+0x208>
    49e2:	f8 01       	movw	r30, r16
    49e4:	27 ff       	sbrs	r18, 7
    49e6:	07 c0       	rjmp	.+14     	; 0x49f6 <vfprintf+0x1ce>
    49e8:	60 81       	ld	r22, Z
    49ea:	71 81       	ldd	r23, Z+1	; 0x01
    49ec:	82 81       	ldd	r24, Z+2	; 0x02
    49ee:	93 81       	ldd	r25, Z+3	; 0x03
    49f0:	0c 5f       	subi	r16, 0xFC	; 252
    49f2:	1f 4f       	sbci	r17, 0xFF	; 255
    49f4:	08 c0       	rjmp	.+16     	; 0x4a06 <vfprintf+0x1de>
    49f6:	60 81       	ld	r22, Z
    49f8:	71 81       	ldd	r23, Z+1	; 0x01
    49fa:	07 2e       	mov	r0, r23
    49fc:	00 0c       	add	r0, r0
    49fe:	88 0b       	sbc	r24, r24
    4a00:	99 0b       	sbc	r25, r25
    4a02:	0e 5f       	subi	r16, 0xFE	; 254
    4a04:	1f 4f       	sbci	r17, 0xFF	; 255
    4a06:	2f 76       	andi	r18, 0x6F	; 111
    4a08:	72 2e       	mov	r7, r18
    4a0a:	97 ff       	sbrs	r25, 7
    4a0c:	09 c0       	rjmp	.+18     	; 0x4a20 <vfprintf+0x1f8>
    4a0e:	90 95       	com	r25
    4a10:	80 95       	com	r24
    4a12:	70 95       	com	r23
    4a14:	61 95       	neg	r22
    4a16:	7f 4f       	sbci	r23, 0xFF	; 255
    4a18:	8f 4f       	sbci	r24, 0xFF	; 255
    4a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a1c:	20 68       	ori	r18, 0x80	; 128
    4a1e:	72 2e       	mov	r7, r18
    4a20:	2a e0       	ldi	r18, 0x0A	; 10
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	a4 01       	movw	r20, r8
    4a26:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__ultoa_invert>
    4a2a:	a8 2e       	mov	r10, r24
    4a2c:	a8 18       	sub	r10, r8
    4a2e:	44 c0       	rjmp	.+136    	; 0x4ab8 <vfprintf+0x290>
    4a30:	85 37       	cpi	r24, 0x75	; 117
    4a32:	29 f4       	brne	.+10     	; 0x4a3e <vfprintf+0x216>
    4a34:	2f 7e       	andi	r18, 0xEF	; 239
    4a36:	b2 2e       	mov	r11, r18
    4a38:	2a e0       	ldi	r18, 0x0A	; 10
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	25 c0       	rjmp	.+74     	; 0x4a88 <vfprintf+0x260>
    4a3e:	f2 2f       	mov	r31, r18
    4a40:	f9 7f       	andi	r31, 0xF9	; 249
    4a42:	bf 2e       	mov	r11, r31
    4a44:	8f 36       	cpi	r24, 0x6F	; 111
    4a46:	c1 f0       	breq	.+48     	; 0x4a78 <vfprintf+0x250>
    4a48:	18 f4       	brcc	.+6      	; 0x4a50 <vfprintf+0x228>
    4a4a:	88 35       	cpi	r24, 0x58	; 88
    4a4c:	79 f0       	breq	.+30     	; 0x4a6c <vfprintf+0x244>
    4a4e:	b5 c0       	rjmp	.+362    	; 0x4bba <vfprintf+0x392>
    4a50:	80 37       	cpi	r24, 0x70	; 112
    4a52:	19 f0       	breq	.+6      	; 0x4a5a <vfprintf+0x232>
    4a54:	88 37       	cpi	r24, 0x78	; 120
    4a56:	21 f0       	breq	.+8      	; 0x4a60 <vfprintf+0x238>
    4a58:	b0 c0       	rjmp	.+352    	; 0x4bba <vfprintf+0x392>
    4a5a:	2f 2f       	mov	r18, r31
    4a5c:	20 61       	ori	r18, 0x10	; 16
    4a5e:	b2 2e       	mov	r11, r18
    4a60:	b4 fe       	sbrs	r11, 4
    4a62:	0d c0       	rjmp	.+26     	; 0x4a7e <vfprintf+0x256>
    4a64:	8b 2d       	mov	r24, r11
    4a66:	84 60       	ori	r24, 0x04	; 4
    4a68:	b8 2e       	mov	r11, r24
    4a6a:	09 c0       	rjmp	.+18     	; 0x4a7e <vfprintf+0x256>
    4a6c:	24 ff       	sbrs	r18, 4
    4a6e:	0a c0       	rjmp	.+20     	; 0x4a84 <vfprintf+0x25c>
    4a70:	9f 2f       	mov	r25, r31
    4a72:	96 60       	ori	r25, 0x06	; 6
    4a74:	b9 2e       	mov	r11, r25
    4a76:	06 c0       	rjmp	.+12     	; 0x4a84 <vfprintf+0x25c>
    4a78:	28 e0       	ldi	r18, 0x08	; 8
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	05 c0       	rjmp	.+10     	; 0x4a88 <vfprintf+0x260>
    4a7e:	20 e1       	ldi	r18, 0x10	; 16
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	02 c0       	rjmp	.+4      	; 0x4a88 <vfprintf+0x260>
    4a84:	20 e1       	ldi	r18, 0x10	; 16
    4a86:	32 e0       	ldi	r19, 0x02	; 2
    4a88:	f8 01       	movw	r30, r16
    4a8a:	b7 fe       	sbrs	r11, 7
    4a8c:	07 c0       	rjmp	.+14     	; 0x4a9c <vfprintf+0x274>
    4a8e:	60 81       	ld	r22, Z
    4a90:	71 81       	ldd	r23, Z+1	; 0x01
    4a92:	82 81       	ldd	r24, Z+2	; 0x02
    4a94:	93 81       	ldd	r25, Z+3	; 0x03
    4a96:	0c 5f       	subi	r16, 0xFC	; 252
    4a98:	1f 4f       	sbci	r17, 0xFF	; 255
    4a9a:	06 c0       	rjmp	.+12     	; 0x4aa8 <vfprintf+0x280>
    4a9c:	60 81       	ld	r22, Z
    4a9e:	71 81       	ldd	r23, Z+1	; 0x01
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	0e 5f       	subi	r16, 0xFE	; 254
    4aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa8:	a4 01       	movw	r20, r8
    4aaa:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__ultoa_invert>
    4aae:	a8 2e       	mov	r10, r24
    4ab0:	a8 18       	sub	r10, r8
    4ab2:	fb 2d       	mov	r31, r11
    4ab4:	ff 77       	andi	r31, 0x7F	; 127
    4ab6:	7f 2e       	mov	r7, r31
    4ab8:	76 fe       	sbrs	r7, 6
    4aba:	0b c0       	rjmp	.+22     	; 0x4ad2 <vfprintf+0x2aa>
    4abc:	37 2d       	mov	r19, r7
    4abe:	3e 7f       	andi	r19, 0xFE	; 254
    4ac0:	a5 14       	cp	r10, r5
    4ac2:	50 f4       	brcc	.+20     	; 0x4ad8 <vfprintf+0x2b0>
    4ac4:	74 fe       	sbrs	r7, 4
    4ac6:	0a c0       	rjmp	.+20     	; 0x4adc <vfprintf+0x2b4>
    4ac8:	72 fc       	sbrc	r7, 2
    4aca:	08 c0       	rjmp	.+16     	; 0x4adc <vfprintf+0x2b4>
    4acc:	37 2d       	mov	r19, r7
    4ace:	3e 7e       	andi	r19, 0xEE	; 238
    4ad0:	05 c0       	rjmp	.+10     	; 0x4adc <vfprintf+0x2b4>
    4ad2:	ba 2c       	mov	r11, r10
    4ad4:	37 2d       	mov	r19, r7
    4ad6:	03 c0       	rjmp	.+6      	; 0x4ade <vfprintf+0x2b6>
    4ad8:	ba 2c       	mov	r11, r10
    4ada:	01 c0       	rjmp	.+2      	; 0x4ade <vfprintf+0x2b6>
    4adc:	b5 2c       	mov	r11, r5
    4ade:	34 ff       	sbrs	r19, 4
    4ae0:	0d c0       	rjmp	.+26     	; 0x4afc <vfprintf+0x2d4>
    4ae2:	fe 01       	movw	r30, r28
    4ae4:	ea 0d       	add	r30, r10
    4ae6:	f1 1d       	adc	r31, r1
    4ae8:	80 81       	ld	r24, Z
    4aea:	80 33       	cpi	r24, 0x30	; 48
    4aec:	11 f4       	brne	.+4      	; 0x4af2 <vfprintf+0x2ca>
    4aee:	39 7e       	andi	r19, 0xE9	; 233
    4af0:	09 c0       	rjmp	.+18     	; 0x4b04 <vfprintf+0x2dc>
    4af2:	32 ff       	sbrs	r19, 2
    4af4:	06 c0       	rjmp	.+12     	; 0x4b02 <vfprintf+0x2da>
    4af6:	b3 94       	inc	r11
    4af8:	b3 94       	inc	r11
    4afa:	04 c0       	rjmp	.+8      	; 0x4b04 <vfprintf+0x2dc>
    4afc:	83 2f       	mov	r24, r19
    4afe:	86 78       	andi	r24, 0x86	; 134
    4b00:	09 f0       	breq	.+2      	; 0x4b04 <vfprintf+0x2dc>
    4b02:	b3 94       	inc	r11
    4b04:	33 fd       	sbrc	r19, 3
    4b06:	13 c0       	rjmp	.+38     	; 0x4b2e <vfprintf+0x306>
    4b08:	30 ff       	sbrs	r19, 0
    4b0a:	06 c0       	rjmp	.+12     	; 0x4b18 <vfprintf+0x2f0>
    4b0c:	b3 14       	cp	r11, r3
    4b0e:	98 f4       	brcc	.+38     	; 0x4b36 <vfprintf+0x30e>
    4b10:	3a 0c       	add	r3, r10
    4b12:	53 2c       	mov	r5, r3
    4b14:	5b 18       	sub	r5, r11
    4b16:	10 c0       	rjmp	.+32     	; 0x4b38 <vfprintf+0x310>
    4b18:	b3 14       	cp	r11, r3
    4b1a:	70 f4       	brcc	.+28     	; 0x4b38 <vfprintf+0x310>
    4b1c:	b6 01       	movw	r22, r12
    4b1e:	80 e2       	ldi	r24, 0x20	; 32
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	3c 87       	std	Y+12, r19	; 0x0c
    4b24:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    4b28:	b3 94       	inc	r11
    4b2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b2c:	f5 cf       	rjmp	.-22     	; 0x4b18 <vfprintf+0x2f0>
    4b2e:	b3 14       	cp	r11, r3
    4b30:	18 f4       	brcc	.+6      	; 0x4b38 <vfprintf+0x310>
    4b32:	3b 18       	sub	r3, r11
    4b34:	02 c0       	rjmp	.+4      	; 0x4b3a <vfprintf+0x312>
    4b36:	5a 2c       	mov	r5, r10
    4b38:	31 2c       	mov	r3, r1
    4b3a:	34 ff       	sbrs	r19, 4
    4b3c:	12 c0       	rjmp	.+36     	; 0x4b62 <vfprintf+0x33a>
    4b3e:	b6 01       	movw	r22, r12
    4b40:	80 e3       	ldi	r24, 0x30	; 48
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	3c 87       	std	Y+12, r19	; 0x0c
    4b46:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    4b4a:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b4c:	32 ff       	sbrs	r19, 2
    4b4e:	17 c0       	rjmp	.+46     	; 0x4b7e <vfprintf+0x356>
    4b50:	31 fd       	sbrc	r19, 1
    4b52:	03 c0       	rjmp	.+6      	; 0x4b5a <vfprintf+0x332>
    4b54:	88 e7       	ldi	r24, 0x78	; 120
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	02 c0       	rjmp	.+4      	; 0x4b5e <vfprintf+0x336>
    4b5a:	88 e5       	ldi	r24, 0x58	; 88
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	b6 01       	movw	r22, r12
    4b60:	0c c0       	rjmp	.+24     	; 0x4b7a <vfprintf+0x352>
    4b62:	83 2f       	mov	r24, r19
    4b64:	86 78       	andi	r24, 0x86	; 134
    4b66:	59 f0       	breq	.+22     	; 0x4b7e <vfprintf+0x356>
    4b68:	31 ff       	sbrs	r19, 1
    4b6a:	02 c0       	rjmp	.+4      	; 0x4b70 <vfprintf+0x348>
    4b6c:	8b e2       	ldi	r24, 0x2B	; 43
    4b6e:	01 c0       	rjmp	.+2      	; 0x4b72 <vfprintf+0x34a>
    4b70:	80 e2       	ldi	r24, 0x20	; 32
    4b72:	37 fd       	sbrc	r19, 7
    4b74:	8d e2       	ldi	r24, 0x2D	; 45
    4b76:	b6 01       	movw	r22, r12
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    4b7e:	a5 14       	cp	r10, r5
    4b80:	38 f4       	brcc	.+14     	; 0x4b90 <vfprintf+0x368>
    4b82:	b6 01       	movw	r22, r12
    4b84:	80 e3       	ldi	r24, 0x30	; 48
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    4b8c:	5a 94       	dec	r5
    4b8e:	f7 cf       	rjmp	.-18     	; 0x4b7e <vfprintf+0x356>
    4b90:	aa 94       	dec	r10
    4b92:	f4 01       	movw	r30, r8
    4b94:	ea 0d       	add	r30, r10
    4b96:	f1 1d       	adc	r31, r1
    4b98:	80 81       	ld	r24, Z
    4b9a:	b6 01       	movw	r22, r12
    4b9c:	90 e0       	ldi	r25, 0x00	; 0
    4b9e:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    4ba2:	a1 10       	cpse	r10, r1
    4ba4:	f5 cf       	rjmp	.-22     	; 0x4b90 <vfprintf+0x368>
    4ba6:	33 20       	and	r3, r3
    4ba8:	09 f4       	brne	.+2      	; 0x4bac <vfprintf+0x384>
    4baa:	50 ce       	rjmp	.-864    	; 0x484c <vfprintf+0x24>
    4bac:	b6 01       	movw	r22, r12
    4bae:	80 e2       	ldi	r24, 0x20	; 32
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fputc>
    4bb6:	3a 94       	dec	r3
    4bb8:	f6 cf       	rjmp	.-20     	; 0x4ba6 <vfprintf+0x37e>
    4bba:	f6 01       	movw	r30, r12
    4bbc:	86 81       	ldd	r24, Z+6	; 0x06
    4bbe:	97 81       	ldd	r25, Z+7	; 0x07
    4bc0:	02 c0       	rjmp	.+4      	; 0x4bc6 <vfprintf+0x39e>
    4bc2:	8f ef       	ldi	r24, 0xFF	; 255
    4bc4:	9f ef       	ldi	r25, 0xFF	; 255
    4bc6:	2c 96       	adiw	r28, 0x0c	; 12
    4bc8:	e2 e1       	ldi	r30, 0x12	; 18
    4bca:	0c 94 a7 26 	jmp	0x4d4e	; 0x4d4e <__epilogue_restores__>

00004bce <strnlen_P>:
    4bce:	fc 01       	movw	r30, r24
    4bd0:	05 90       	lpm	r0, Z+
    4bd2:	61 50       	subi	r22, 0x01	; 1
    4bd4:	70 40       	sbci	r23, 0x00	; 0
    4bd6:	01 10       	cpse	r0, r1
    4bd8:	d8 f7       	brcc	.-10     	; 0x4bd0 <strnlen_P+0x2>
    4bda:	80 95       	com	r24
    4bdc:	90 95       	com	r25
    4bde:	8e 0f       	add	r24, r30
    4be0:	9f 1f       	adc	r25, r31
    4be2:	08 95       	ret

00004be4 <strnlen>:
    4be4:	fc 01       	movw	r30, r24
    4be6:	61 50       	subi	r22, 0x01	; 1
    4be8:	70 40       	sbci	r23, 0x00	; 0
    4bea:	01 90       	ld	r0, Z+
    4bec:	01 10       	cpse	r0, r1
    4bee:	d8 f7       	brcc	.-10     	; 0x4be6 <strnlen+0x2>
    4bf0:	80 95       	com	r24
    4bf2:	90 95       	com	r25
    4bf4:	8e 0f       	add	r24, r30
    4bf6:	9f 1f       	adc	r25, r31
    4bf8:	08 95       	ret

00004bfa <fputc>:
    4bfa:	0f 93       	push	r16
    4bfc:	1f 93       	push	r17
    4bfe:	cf 93       	push	r28
    4c00:	df 93       	push	r29
    4c02:	18 2f       	mov	r17, r24
    4c04:	09 2f       	mov	r16, r25
    4c06:	eb 01       	movw	r28, r22
    4c08:	8b 81       	ldd	r24, Y+3	; 0x03
    4c0a:	81 fd       	sbrc	r24, 1
    4c0c:	03 c0       	rjmp	.+6      	; 0x4c14 <fputc+0x1a>
    4c0e:	8f ef       	ldi	r24, 0xFF	; 255
    4c10:	9f ef       	ldi	r25, 0xFF	; 255
    4c12:	1e c0       	rjmp	.+60     	; 0x4c50 <fputc+0x56>
    4c14:	82 ff       	sbrs	r24, 2
    4c16:	0f c0       	rjmp	.+30     	; 0x4c36 <fputc+0x3c>
    4c18:	2e 81       	ldd	r18, Y+6	; 0x06
    4c1a:	3f 81       	ldd	r19, Y+7	; 0x07
    4c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    4c20:	28 17       	cp	r18, r24
    4c22:	39 07       	cpc	r19, r25
    4c24:	74 f4       	brge	.+28     	; 0x4c42 <fputc+0x48>
    4c26:	e8 81       	ld	r30, Y
    4c28:	f9 81       	ldd	r31, Y+1	; 0x01
    4c2a:	cf 01       	movw	r24, r30
    4c2c:	01 96       	adiw	r24, 0x01	; 1
    4c2e:	99 83       	std	Y+1, r25	; 0x01
    4c30:	88 83       	st	Y, r24
    4c32:	10 83       	st	Z, r17
    4c34:	06 c0       	rjmp	.+12     	; 0x4c42 <fputc+0x48>
    4c36:	e8 85       	ldd	r30, Y+8	; 0x08
    4c38:	f9 85       	ldd	r31, Y+9	; 0x09
    4c3a:	81 2f       	mov	r24, r17
    4c3c:	09 95       	icall
    4c3e:	89 2b       	or	r24, r25
    4c40:	31 f7       	brne	.-52     	; 0x4c0e <fputc+0x14>
    4c42:	8e 81       	ldd	r24, Y+6	; 0x06
    4c44:	9f 81       	ldd	r25, Y+7	; 0x07
    4c46:	01 96       	adiw	r24, 0x01	; 1
    4c48:	9f 83       	std	Y+7, r25	; 0x07
    4c4a:	8e 83       	std	Y+6, r24	; 0x06
    4c4c:	81 2f       	mov	r24, r17
    4c4e:	90 2f       	mov	r25, r16
    4c50:	df 91       	pop	r29
    4c52:	cf 91       	pop	r28
    4c54:	1f 91       	pop	r17
    4c56:	0f 91       	pop	r16
    4c58:	08 95       	ret

00004c5a <__ultoa_invert>:
    4c5a:	fa 01       	movw	r30, r20
    4c5c:	aa 27       	eor	r26, r26
    4c5e:	28 30       	cpi	r18, 0x08	; 8
    4c60:	51 f1       	breq	.+84     	; 0x4cb6 <__ultoa_invert+0x5c>
    4c62:	20 31       	cpi	r18, 0x10	; 16
    4c64:	81 f1       	breq	.+96     	; 0x4cc6 <__ultoa_invert+0x6c>
    4c66:	e8 94       	clt
    4c68:	6f 93       	push	r22
    4c6a:	6e 7f       	andi	r22, 0xFE	; 254
    4c6c:	6e 5f       	subi	r22, 0xFE	; 254
    4c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c70:	8f 4f       	sbci	r24, 0xFF	; 255
    4c72:	9f 4f       	sbci	r25, 0xFF	; 255
    4c74:	af 4f       	sbci	r26, 0xFF	; 255
    4c76:	b1 e0       	ldi	r27, 0x01	; 1
    4c78:	3e d0       	rcall	.+124    	; 0x4cf6 <__ultoa_invert+0x9c>
    4c7a:	b4 e0       	ldi	r27, 0x04	; 4
    4c7c:	3c d0       	rcall	.+120    	; 0x4cf6 <__ultoa_invert+0x9c>
    4c7e:	67 0f       	add	r22, r23
    4c80:	78 1f       	adc	r23, r24
    4c82:	89 1f       	adc	r24, r25
    4c84:	9a 1f       	adc	r25, r26
    4c86:	a1 1d       	adc	r26, r1
    4c88:	68 0f       	add	r22, r24
    4c8a:	79 1f       	adc	r23, r25
    4c8c:	8a 1f       	adc	r24, r26
    4c8e:	91 1d       	adc	r25, r1
    4c90:	a1 1d       	adc	r26, r1
    4c92:	6a 0f       	add	r22, r26
    4c94:	71 1d       	adc	r23, r1
    4c96:	81 1d       	adc	r24, r1
    4c98:	91 1d       	adc	r25, r1
    4c9a:	a1 1d       	adc	r26, r1
    4c9c:	20 d0       	rcall	.+64     	; 0x4cde <__ultoa_invert+0x84>
    4c9e:	09 f4       	brne	.+2      	; 0x4ca2 <__ultoa_invert+0x48>
    4ca0:	68 94       	set
    4ca2:	3f 91       	pop	r19
    4ca4:	2a e0       	ldi	r18, 0x0A	; 10
    4ca6:	26 9f       	mul	r18, r22
    4ca8:	11 24       	eor	r1, r1
    4caa:	30 19       	sub	r19, r0
    4cac:	30 5d       	subi	r19, 0xD0	; 208
    4cae:	31 93       	st	Z+, r19
    4cb0:	de f6       	brtc	.-74     	; 0x4c68 <__ultoa_invert+0xe>
    4cb2:	cf 01       	movw	r24, r30
    4cb4:	08 95       	ret
    4cb6:	46 2f       	mov	r20, r22
    4cb8:	47 70       	andi	r20, 0x07	; 7
    4cba:	40 5d       	subi	r20, 0xD0	; 208
    4cbc:	41 93       	st	Z+, r20
    4cbe:	b3 e0       	ldi	r27, 0x03	; 3
    4cc0:	0f d0       	rcall	.+30     	; 0x4ce0 <__ultoa_invert+0x86>
    4cc2:	c9 f7       	brne	.-14     	; 0x4cb6 <__ultoa_invert+0x5c>
    4cc4:	f6 cf       	rjmp	.-20     	; 0x4cb2 <__ultoa_invert+0x58>
    4cc6:	46 2f       	mov	r20, r22
    4cc8:	4f 70       	andi	r20, 0x0F	; 15
    4cca:	40 5d       	subi	r20, 0xD0	; 208
    4ccc:	4a 33       	cpi	r20, 0x3A	; 58
    4cce:	18 f0       	brcs	.+6      	; 0x4cd6 <__ultoa_invert+0x7c>
    4cd0:	49 5d       	subi	r20, 0xD9	; 217
    4cd2:	31 fd       	sbrc	r19, 1
    4cd4:	40 52       	subi	r20, 0x20	; 32
    4cd6:	41 93       	st	Z+, r20
    4cd8:	02 d0       	rcall	.+4      	; 0x4cde <__ultoa_invert+0x84>
    4cda:	a9 f7       	brne	.-22     	; 0x4cc6 <__ultoa_invert+0x6c>
    4cdc:	ea cf       	rjmp	.-44     	; 0x4cb2 <__ultoa_invert+0x58>
    4cde:	b4 e0       	ldi	r27, 0x04	; 4
    4ce0:	a6 95       	lsr	r26
    4ce2:	97 95       	ror	r25
    4ce4:	87 95       	ror	r24
    4ce6:	77 95       	ror	r23
    4ce8:	67 95       	ror	r22
    4cea:	ba 95       	dec	r27
    4cec:	c9 f7       	brne	.-14     	; 0x4ce0 <__ultoa_invert+0x86>
    4cee:	00 97       	sbiw	r24, 0x00	; 0
    4cf0:	61 05       	cpc	r22, r1
    4cf2:	71 05       	cpc	r23, r1
    4cf4:	08 95       	ret
    4cf6:	9b 01       	movw	r18, r22
    4cf8:	ac 01       	movw	r20, r24
    4cfa:	0a 2e       	mov	r0, r26
    4cfc:	06 94       	lsr	r0
    4cfe:	57 95       	ror	r21
    4d00:	47 95       	ror	r20
    4d02:	37 95       	ror	r19
    4d04:	27 95       	ror	r18
    4d06:	ba 95       	dec	r27
    4d08:	c9 f7       	brne	.-14     	; 0x4cfc <__ultoa_invert+0xa2>
    4d0a:	62 0f       	add	r22, r18
    4d0c:	73 1f       	adc	r23, r19
    4d0e:	84 1f       	adc	r24, r20
    4d10:	95 1f       	adc	r25, r21
    4d12:	a0 1d       	adc	r26, r0
    4d14:	08 95       	ret

00004d16 <__prologue_saves__>:
    4d16:	2f 92       	push	r2
    4d18:	3f 92       	push	r3
    4d1a:	4f 92       	push	r4
    4d1c:	5f 92       	push	r5
    4d1e:	6f 92       	push	r6
    4d20:	7f 92       	push	r7
    4d22:	8f 92       	push	r8
    4d24:	9f 92       	push	r9
    4d26:	af 92       	push	r10
    4d28:	bf 92       	push	r11
    4d2a:	cf 92       	push	r12
    4d2c:	df 92       	push	r13
    4d2e:	ef 92       	push	r14
    4d30:	ff 92       	push	r15
    4d32:	0f 93       	push	r16
    4d34:	1f 93       	push	r17
    4d36:	cf 93       	push	r28
    4d38:	df 93       	push	r29
    4d3a:	cd b7       	in	r28, 0x3d	; 61
    4d3c:	de b7       	in	r29, 0x3e	; 62
    4d3e:	ca 1b       	sub	r28, r26
    4d40:	db 0b       	sbc	r29, r27
    4d42:	0f b6       	in	r0, 0x3f	; 63
    4d44:	f8 94       	cli
    4d46:	de bf       	out	0x3e, r29	; 62
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	cd bf       	out	0x3d, r28	; 61
    4d4c:	09 94       	ijmp

00004d4e <__epilogue_restores__>:
    4d4e:	2a 88       	ldd	r2, Y+18	; 0x12
    4d50:	39 88       	ldd	r3, Y+17	; 0x11
    4d52:	48 88       	ldd	r4, Y+16	; 0x10
    4d54:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d56:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d58:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d60:	b9 84       	ldd	r11, Y+9	; 0x09
    4d62:	c8 84       	ldd	r12, Y+8	; 0x08
    4d64:	df 80       	ldd	r13, Y+7	; 0x07
    4d66:	ee 80       	ldd	r14, Y+6	; 0x06
    4d68:	fd 80       	ldd	r15, Y+5	; 0x05
    4d6a:	0c 81       	ldd	r16, Y+4	; 0x04
    4d6c:	1b 81       	ldd	r17, Y+3	; 0x03
    4d6e:	aa 81       	ldd	r26, Y+2	; 0x02
    4d70:	b9 81       	ldd	r27, Y+1	; 0x01
    4d72:	ce 0f       	add	r28, r30
    4d74:	d1 1d       	adc	r29, r1
    4d76:	0f b6       	in	r0, 0x3f	; 63
    4d78:	f8 94       	cli
    4d7a:	de bf       	out	0x3e, r29	; 62
    4d7c:	0f be       	out	0x3f, r0	; 63
    4d7e:	cd bf       	out	0x3d, r28	; 61
    4d80:	ed 01       	movw	r28, r26
    4d82:	08 95       	ret

00004d84 <_exit>:
    4d84:	f8 94       	cli

00004d86 <__stop_program>:
    4d86:	ff cf       	rjmp	.-2      	; 0x4d86 <__stop_program>
